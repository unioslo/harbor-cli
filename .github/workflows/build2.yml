# Ripped off from https://github.com/pypa/hatch/blob/6322daba750f8db73361fa1aaa965bc99605303b/.github/workflows/build-hatch.yml
name: build harbor-cli binaries

on:
  push:
    branches:
    - build-binaries
  pull_request:
    branches:
    - build-binaries

concurrency:
  group: build-harbor-cli-${{ github.head_ref }}

env:
    APP_NAME: zabbix-cli
    PYTHON_VERSION: "3.11"
    PYOXIDIZER_VERSION: "0.24.0"

jobs:
  python-artifacts:
    name: Build wheel and source distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build frontend
      run: python -m pip install --upgrade build

    - name: Build
      run: python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-artifacts
        path: dist/*
        if-no-files-found: error

  binaries:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    needs:
    - python-artifacts
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
        # Linux
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        - target: x86_64-unknown-linux-musl
          os: ubuntu-22.04
          cross: true
        - target: i686-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        - target: powerpc64le-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        # Windows
        - target: x86_64-pc-windows-msvc
          os: windows-2022
        # macOS
        - target: aarch64-apple-darwin
          os: macos-12
        - target: x86_64-apple-darwin
          os: macos-12

    outputs:
      version: ${{ steps.version.outputs.version }}

    env:
      CARGO: cargo
      CARGO_BUILD_TARGET: ${{ matrix.job.target }}
      PYAPP_REPO: pyapp
      PYAPP_VERSION: "0.12.0"
      PYAPP_PIP_EXTERNAL: "true"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Fetch PyApp
      run: >-
        mkdir $PYAPP_REPO && curl -L
        https://github.com/ofek/pyapp/releases/download/v$PYAPP_VERSION/source.tar.gz
        |
        tar --strip-components=1 -xzf - -C $PYAPP_REPO

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: pip install -e .

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.job.target }}

    - name: Set up cross compiling
      if: matrix.job.cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Configure cross compiling
      if: matrix.job.cross
      run: echo "CARGO=cross" >> $GITHUB_ENV

    - name: Configure target
      run: |-
        config_file="$PYAPP_REPO/.cargo/config_${{ matrix.job.target }}.toml"
        if [[ -f "$config_file" ]]; then
          mv "$config_file" "$PYAPP_REPO/.cargo/config.toml"
        fi

    - name: Download Python artifacts
      if: ${{ !startsWith(github.event.ref, 'refs/tags') }}
      uses: actions/download-artifact@v3
      with:
        name: python-artifacts
        path: dist

    - name: Configure embedded project
      if: ${{ !startsWith(github.event.ref, 'refs/tags') }}
      run: |-
        cd dist
        wheel="$(echo *.whl)"
        mv "$wheel" "../$PYAPP_REPO"
        echo "PYAPP_PROJECT_PATH=$wheel" >> $GITHUB_ENV

    - name: Build binary
      run: hatch build --target app

    # Windows installers don't accept non-integer versions so we ubiquitously
    # perform the following transformation: X.Y.Z.devN -> X.Y.Z.N
    - name: Set project version
      id: version
      run: |-
        old_version="$(hatch version)"
        version="${old_version/dev/}"

        if [[ "$version" != "$old_version" ]]; then
          cd dist/app
          old_binary="$(ls)"
          binary="${old_binary/$old_version/$version}"
          mv "$old_binary" "$binary"
        fi

        echo "version=$version" >> $GITHUB_OUTPUT
        echo "$version"

    - name: Archive binary
      run: |-
        mkdir packaging
        cd dist/app

        binary="$(ls)"

        if [[ "$binary" =~ -pc-windows- ]]; then
          7z a "../../packaging/${binary:0:-4}.zip" "$binary"
        else
          chmod +x "$binary"
          tar -czf "../../packaging/$binary.tar.gz" "$binary"
        fi

    - name: Upload staged archive
      if: runner.os != 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: staged-${{ runner.os }}
        path: packaging/*
        if-no-files-found: error

    - name: Upload archive
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: standalone
        path: packaging/*
        if-no-files-found: error

  # publish:
  #   name: Publish release
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
  #   needs:
  #   - python-artifacts
  #   - binaries
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write
  #     id-token: write

  #   steps:
  #   - name: Download Python artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-artifacts
  #       path: dist

  #   - name: Download binaries
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: standalone
  #       path: archives

  #   - name: Download installers
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: installers
  #       path: installers

  #   - name: Push Python artifacts to PyPI
  #     uses: pypa/gh-action-pypi-publish@v1.8.11
  #     with:
  #       skip-existing: true

  #   - name: Add assets to current release
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       files: |-
  #         archives/*
  #         installers/*
