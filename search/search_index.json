{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"harbor-cli","text":"<p>Harbor CLI is a command line tool for Harbor. It is used to manage Harbor projects, repositories, artifacts, users, and more.</p> <p>Harbor CLI is powered by harborapi and attempts to follow the Harbor API specification as closely as possible. This means you should be able to expect the same behavior and results from the CLI as you would from the API in the vast majority of cases.</p>"},{"location":"#installation","title":"Installation","text":"<p>Installing the application is generally as simple as running:</p> <pre><code>pipx install harbor-cli\n</code></pre> <p>However, on certain platforms this is not sufficient to install all keyring dependencies. If you don't care about storing credentials in your system's keyring, you can stop reading here. Otherwise, read on.</p>"},{"location":"#macos","title":"MacOS","text":"<pre><code>pipx install harbor-cli\n</code></pre> <p>Keyring should work out of the box on MacOS &gt;=11 with Python &gt;=3.8.7.</p>"},{"location":"#linux","title":"Linux","text":"<p>Depending on your Linux flavor and choice of keyring backend, you may need to install additional packages. See the keyring documentation for more information.</p> <p>To inject a package into the application's pipx environment, use the <code>pipx inject</code> command:</p> <pre><code>pipx install harbor-cli\npipx inject harbor-cli &lt;package to inject&gt;\n</code></pre> <p>Follow the instructions for your Linux flavor and keyring backend to determine which package to inject (if any). If a package requires compilation and you don't have the necessary prerequisites installed, installing the package as a system package through your system's package manager may be easier.</p>"},{"location":"#windows","title":"Windows","text":"<pre><code>pipx install harbor-cli\n</code></pre> <p>Keyring functionality is only minimally tested on Windows 10, and completely untested on Windows 11. If you run into any issues, consult the keyring documentation for more information. Otherwise, please open an issue.</p>"},{"location":"contributing/","title":"Contributing","text":"<p><code>harbor-cli</code> is an open source project, and contributions are welcome. This document outlines the development process.</p>"},{"location":"contributing/#development-environment","title":"Development environment","text":"<p>Start by cloning the repository.</p> <pre><code>git clone git@github.com:unioslo/harbor-cli.git\n</code></pre> <p>Use Hatch to set up the required development environments.</p> <pre><code>hatch env create\n</code></pre> <p>Enter the development environment:</p> <pre><code>hatch shell\n</code></pre> <p>See the Hatch docs for more information on environments.</p>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>The code is linted and formatted using a pre-commmit configuration consisting of tools such as Ruff, reorder_python_imports and mypy.</p> <p>Install pre-commit:</p> <pre><code>pip install pre-commit\n</code></pre> <p>Install the pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre> <p>Run the pre-commit hooks:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Hatch supports testing against multiple Python versions, similar to Tox and Nox.</p> <p>To run the test suite for the current environment:</p> <pre><code>hatch run test\n</code></pre> <p>Run the test suite for all supported Python versions:</p> <pre><code>hatch run test:test\n</code></pre> <p>Tests are run in CI, but it's a good idea to run them locally before pushing changes.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation is built using MkDocs. To serve the documentation locally:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>To build the documentation:</p> <pre><code>hatch run docs:build\n</code></pre>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>TBD</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>When submitting a pull request, please make sure to run the pre-commit hooks and tests locally before pushing. This will ensure a smoother review process.</p>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>On versioning</p> <p>In general, managing releases and versioning should only be handled by the project maintainer(s), but it is documented here for completeness.</p> <p>Releases are handled by a GitHub actions workflow found here. Whenever a new tag whose name starts <code>harbor-cli-v</code> is pushed to the repository on the <code>main</code> branch, the workflow will build and publish a new release to PyPI.</p> <pre><code>$ python scripts/bump_version.py --help\n\n Usage: bump_version.py [OPTIONS] [major|minor|patch|x.y.z],[release|a|a\n                        lpha|b|beta|c|rc|pre|preview|r|rev|post|dev]\n\n Bump the version of the project and create a new git tag.\n Examples:\n $ python bump_version.py minor\n $ python bump_version.py major,rc\n $ python bump_version.py 1.2.3 # generally don't use this\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    version      [major|minor|patch|x.y.z  Version bump to perform   \u2502\n\u2502                   ],[release|a|alpha|b|bet  or new version to set.    \u2502\n\u2502                   a|c|rc|pre|preview|r|rev  [default: None]           \u2502\n\u2502                   |post|dev]                [required]                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To assist in bumping versions and tagging correctly, there is a script in <code>scripts/bump_version.py</code> that shares the same interface as <code>hatch version</code>.</p> <p>The tool will automatically update the version in <code>harbor_cli/__about__.py</code>, and create a new git tag with the bumped version number (<code>harbor-cli-vx.y.z</code>).</p> <p>Pushing the new tag to the remote repository will trigger a new release.</p> <pre><code>git push origin --tags\n</code></pre>"},{"location":"contributing/#bumping","title":"Bumping","text":""},{"location":"contributing/#major-version","title":"Major version","text":"<p>Major releases are used to indicate breaking changes. Breaking changes are changes that break backwards compatibility, such as removing or renaming a command or option, changing the configuration file format, or changing the behavior of an existing command.</p> <pre><code>python scripts/bump_version.py major\n</code></pre>"},{"location":"contributing/#minor-version","title":"Minor version","text":"<p>Minor releases are used to indicate new features that maintain backwards compatibility. New commands and new options are considered new features.</p> <pre><code>python scripts/bump_version.py minor\n</code></pre>"},{"location":"contributing/#patch-version","title":"Patch version","text":"<p>Patch releases are used to indicate bug fixes, refactoring, and other minor non-feature changes that maintain backwards compatibility.</p> <pre><code>python scripts/bump_version.py patch\n</code></pre>"},{"location":"contributing/#status-suffixes","title":"Status suffixes","text":""},{"location":"contributing/#bump-and-pre-release","title":"Bump and pre-release","text":"<p>Sometimes we want to publish a pre-release version to allow users to test the new version before it is officially released.</p> <pre><code>python scripts/bump_version.py major,pre\n</code></pre>"},{"location":"contributing/#release-candidate","title":"Release candidate","text":"<p>Graduating to release candidate is not necessary, but can sometimes be useful to indicate that the release is feature-complete and ready for testing, but not yet ready for general use due to possible minor bugs or missing/incomplete documentation.</p> <pre><code>python scripts/bump_version.py major,rc\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>Going from a pre-release or a release candidate to a release is done by removing the status suffix:</p> <pre><code>python scripts/bump_version.py release\n</code></pre>"},{"location":"commands/","title":"Commands","text":"<p>There are currently 155 available commands.</p> <p>Check the sidebar for more information about each command.</p> <p>Important</p> <p>A configuration file is required to use most commands. Using these commands without an existing configuration file will run <code>init</code> in wizardless mode and create a configuration file at the default location.</p> <p>See Configuration for more information about the configuration file.</p>"},{"location":"commands/#available-commands","title":"Available commands","text":"<pre><code>artifact accessories\nartifact buildhistory\nartifact clean\nartifact copy\nartifact delete\nartifact get\nartifact label add\nartifact label delete\nartifact list\nartifact tag create\nartifact tag delete\nartifact tag list\nartifact vulnerability find\nartifact vulnerability summary\nauditlog list\nauditlog rotation get\nauditlog rotation list\nauditlog rotation log\nauditlog rotation schedule create\nauditlog rotation schedule get\nauditlog rotation schedule update\nauditlog rotation stop\ncommands\nconfig get\nconfig update\ncve-allowlist clear\ncve-allowlist get\ncve-allowlist update\nfind\ngc job\ngc jobs\ngc log\ngc schedule create\ngc schedule get\ngc schedule update\ninit\nldap ping\nldap search groups\nldap search users\nproject create\nproject delete\nproject exists\nproject get\nproject list\nproject logs\nproject member add-group\nproject member add-user\nproject member get\nproject member list\nproject member remove\nproject member update-role\nproject metadata field delete\nproject metadata field get\nproject metadata field set\nproject metadata get\nproject metadata set\nproject repos\nproject scanner candidates\nproject scanner get\nproject scanner set\nproject summary\nproject update\nquota get\nquota list\nquota update\nregistry adapters\nregistry create\nregistry delete\nregistry get\nregistry info\nregistry list\nregistry ping\nregistry providers\nregistry update\nrepl\nreplication get\nreplication list\nreplication policy create\nreplication policy delete\nreplication policy get\nreplication policy list\nreplication start\nreplication stop\nreplication task list\nreplication task log\nrepository delete\nrepository get\nrepository list\nrepository update\nretention job list\nretention job start\nretention job stop\nretention job task list\nretention job task log\nretention metadata\nretention policy delete\nretention policy get\nretention policy id\nsample-config\nscan export download\nscan export get\nscan export list\nscan export start\nscan log\nscan start\nscan stop\nscan-all metrics\nscan-all schedule create\nscan-all schedule get\nscan-all schedule update\nscan-all stop\nscanner create\nscanner default\nscanner delete\nscanner get\nscanner list\nscanner update\nsearch\nself config env\nself config get\nself config keys\nself config path\nself config set\nself config write\nself keyring status\nsystem health\nsystem info\nsystem ping\nsystem statistics\nsystem volumes\ntui\nuser create\nuser delete\nuser get\nuser get-current\nuser get-current-permissions\nuser list\nuser search\nuser set-admin\nuser set-cli-secret\nuser set-password\nuser unset-admin\nuser update\nusergroup create\nusergroup delete\nusergroup get\nusergroup list\nusergroup search\nusergroup update\nwebhook events\nwebhook jobs\nwebhook policy delete\nwebhook policy get\nwebhook policy list\nwebhook triggers\n</code></pre>"},{"location":"commands/artifact/","title":"artifact","text":""},{"location":"commands/artifact/#artifact-accessories","title":"artifact accessories","text":"<pre><code>artifact accessories &lt;ARTIFACT&gt;\n</code></pre> <p>Get accessories for an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/artifact/#artifact-buildhistory","title":"artifact buildhistory","text":"<pre><code>artifact buildhistory &lt;ARTIFACT&gt;\n</code></pre> <p>Get the build history of an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/artifact/#artifact-clean","title":"artifact clean","text":"<pre><code>artifact clean [OPTIONS]\n</code></pre> <p>Bulk delete artifacts that match one or more conditions.</p> <p>Options</p> <p><code>--project</code> <code>&lt;PROJECT,[PROJECT...]&gt;</code> Project(s) to delete artifacts from. If not specified, all projects will be considered.Separate multiple values with commas, or use <code>--project</code> multiple times.Type: <code>text</code> </p> <p><code>--repo</code> <code>&lt;REPOSITORY,[REPOSITORY...]&gt;</code> Repository name(s) to delete artifacts from. If not specified, all repositories in the matched project(s) will be considered.Separate multiple values with commas, or use <code>--repo</code> multiple times.Type: <code>text</code> </p> <p><code>--age</code> <code>&lt;AGE&gt;</code> CRITERIA: Delete artifacts older than the specified number of days.Type: <code>integer</code> </p> <p><code>--severity</code> <code>&lt;SEVERITY&gt;</code> CRITERIA: Delete all artifacts with the given severity or higher.Type: <code>choice</code> Choices: <code>Unknown</code>, <code>Negligible</code>, <code>Low</code>, <code>Medium</code>, <code>High</code>, <code>Critical</code>, <code>None</code></p> <p><code>--operator</code> <code>&lt;OPERATOR&gt;</code> Operator to use when matching multiple criteria.Type: <code>choice</code> Choices: <code>and</code>, <code>or</code>, <code>xor</code>Default: <code>and</code></p> <p><code>--except-project</code> <code>&lt;EXCEPT_PROJECT&gt;</code> Regex pattern for excluding artifacts from projects.Type: <code>text</code> </p> <p><code>--except-repo</code> <code>&lt;EXCEPT_REPO&gt;</code> Regex pattern for excluding artifacts from repositories.Type: <code>text</code> </p> <p><code>--except-tag</code> <code>&lt;EXCEPT_TAG&gt;</code> Regex pattern for artifacts with tags to exclude from deletion.Type: <code>text</code> </p> <p><code>--max</code> <code>&lt;MAX_COUNT&gt;</code> Abort deletion if this number of artifacts would be deleted.Type: <code>integer</code> </p> <p><code>--dryrun</code>Show which artifacts would be deleted, but don't do anything.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--exit-on-error</code>Abort the operation and exit with non-zero exit code if an artifact cannot be deleted.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/artifact/#artifact-copy","title":"artifact copy","text":"<pre><code>artifact copy &lt;ARTIFACT&gt; &lt;PROJECT&gt; &lt;REPOSITORY&gt;\n</code></pre> <p>Copy an artifact to a different repository.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p><code>PROJECT</code> Destination project.Type: <code>text</code> Required: \u2705</p> <p><code>REPOSITORY</code> Destination repository (without project name).Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/artifact/#artifact-delete","title":"artifact delete","text":"<pre><code>artifact delete &lt;ARTIFACT&gt; [OPTIONS]\n</code></pre> <p>Delete an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/artifact/#artifact-get","title":"artifact get","text":"<pre><code>artifact get &lt;ARTIFACT&gt; [OPTIONS]\n</code></pre> <p>Get information about a specific artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--with-vuln</code>,  <code>-v</code>Include vulnerability report in output.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--with-vuln-desc</code>,  <code>-d</code>Include descriptions of each vulnerability in the output.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/artifact/#artifact-list","title":"artifact list","text":"<pre><code>artifact list [OPTIONS]\n</code></pre> <p>List artifacts in one or more projects and/or repositories.</p> <p>Options</p> <p><code>--project</code> <code>&lt;PROJECT,[PROJECT...]&gt;</code> Project name(s). (e.g. <code>'library'</code>).Separate multiple values with commas, or use <code>--project</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--repo</code> <code>&lt;REPO,[REPO...]&gt;</code> Repository name(s).(e.g. <code>'hello-world'</code>).Separate multiple values with commas, or use <code>--repo</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--tag</code> <code>&lt;TAG,[TAG...]&gt;</code> Limit to artifacts with tag(s) (e.g. <code>'latest'</code>).Separate multiple values with commas, or use <code>--tag</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--arch</code> <code>&lt;ARCH,[ARCH...]&gt;</code> Limit to artifacts with architecture(s) (e.g. <code>'amd64,arm64'</code>).Separate multiple values with commas, or use <code>--arch</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--os</code> <code>&lt;OS,[OS...]&gt;</code> Limit to artifacts with OS(es) (e.g. <code>'linux,freebsd'</code>).Separate multiple values with commas, or use <code>--os</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--with-report</code>Include vulnerability report in output.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--max-connections</code> <code>&lt;MAX_CONNECTIONS&gt;</code> Maximum number of concurrent connections to use. Setting this too high can lead to severe performance degradation.Type: <code>integer</code> Default: <code>5</code></p>"},{"location":"commands/artifact_label/","title":"artifact label","text":""},{"location":"commands/artifact_label/#artifact-label-add","title":"artifact label add","text":"<pre><code>artifact label add &lt;ARTIFACT&gt; [OPTIONS]\n</code></pre> <p>Add a label to an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--name</code> <code>&lt;NAME&gt;</code> Name of the label.Type: <code>text</code> </p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> Description of the label.Type: <code>text</code> </p> <p><code>--color</code> <code>&lt;COLOR&gt;</code> Label color.Type: <code>text</code> </p> <p><code>--scope</code> <code>&lt;SCOPE&gt;</code> Scope of the label.Type: <code>text</code> </p>"},{"location":"commands/artifact_label/#artifact-label-delete","title":"artifact label delete","text":"<pre><code>artifact label delete &lt;ARTIFACT&gt; &lt;LABEL_ID&gt; [OPTIONS]\n</code></pre> <p>Remove a label from an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p><code>LABEL_ID</code> ID of the label to delete.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/artifact_tag/","title":"artifact tag","text":""},{"location":"commands/artifact_tag/#artifact-tag-create","title":"artifact tag create","text":"<pre><code>artifact tag create &lt;ARTIFACT&gt; &lt;TAG&gt;\n</code></pre> <p>Create a tag for an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p><code>TAG</code> Name of the tag to create.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/artifact_tag/#artifact-tag-delete","title":"artifact tag delete","text":"<pre><code>artifact tag delete &lt;ARTIFACT&gt; &lt;TAG&gt; [OPTIONS]\n</code></pre> <p>Delete a tag for an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p><code>TAG</code> Name of the tag to delete.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/artifact_tag/#artifact-tag-list","title":"artifact tag list","text":"<pre><code>artifact tag list &lt;ARTIFACT&gt; [OPTIONS]\n</code></pre> <p>List tags for an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/artifact_vulnerability/","title":"artifact vulnerability","text":""},{"location":"commands/artifact_vulnerability/#artifact-vulnerability-summary","title":"artifact vulnerability summary","text":"<pre><code>artifact vulnerability summary [OPTIONS]\n</code></pre> <p>Show a summary of vulnerabilities for artifacts in a project or repository.</p> <p>Options</p> <p><code>--project</code> <code>&lt;PROJECT,[PROJECT...]&gt;</code> Name of projects to check.Separate multiple values with commas, or use <code>--project</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--repo</code> <code>&lt;REPO,[REPO...]&gt;</code> Name of repositories to check.Separate multiple values with commas, or use <code>--repo</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Artifact attribute to sort by.Type: <code>choice</code> Choices: <code>total</code>, <code>severity</code>, <code>name</code>, <code>age</code>Default: <code>total</code></p> <p><code>--order</code> <code>&lt;ORDER&gt;</code> Sorting order of artifacts.Type: <code>choice</code> Choices: <code>asc</code>, <code>desc</code>Default: <code>desc</code></p> <p><code>--full-digest</code>Show full artifact digests.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/auditlog/","title":"auditlog","text":""},{"location":"commands/auditlog/#auditlog-list","title":"auditlog list","text":"<pre><code>auditlog list [OPTIONS]\n</code></pre> <p>List audit logs for projects the current user has access to. Recommended to specify a search query and to limit the number of results.</p> <p>Options</p> <p><code>--operation</code> <code>&lt;OPERATION,[OPERATION...]&gt;</code> Operation(s) to filter audit logs by. E.g. <code>'create'</code>.Separate multiple values with commas, or use <code>--operation</code> multiple times.Type: <code>text</code> </p> <p><code>--resource</code> <code>&lt;RESOURCE,[RESOURCE...]&gt;</code> Full name of the resource(s) to filter by. E.g. <code>'library/foo:latest'</code>.Separate multiple values with commas, or use <code>--resource</code> multiple times.Type: <code>text</code> </p> <p><code>--resource-type</code> <code>&lt;RESOURCE_TYPE,[RESOURCE_TYPE...]&gt;</code> Resource type(s) to filter audit logs by. E.g. <code>'artifact'</code>.Separate multiple values with commas, or use <code>--resource-type</code> multiple times.Type: <code>text</code> </p> <p><code>--username</code> <code>&lt;USERNAME,[USERNAME...]&gt;</code> Username to filter audit logs by.Separate multiple values with commas, or use <code>--username</code> multiple times.Type: <code>text</code> </p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> Default: <code>10</code></p>"},{"location":"commands/auditlog_rotation/","title":"auditlog rotation","text":""},{"location":"commands/auditlog_rotation/#auditlog-rotation-get","title":"auditlog rotation get","text":"<pre><code>auditlog rotation get &lt;JOB_ID&gt;\n</code></pre> <p>Get a log rotation job.</p> <p>Arguments</p> <p><code>JOB_ID</code> Log rotation job IDType: <code>integer</code> Required: \u2705</p>"},{"location":"commands/auditlog_rotation/#auditlog-rotation-list","title":"auditlog rotation list","text":"<pre><code>auditlog rotation list [OPTIONS]\n</code></pre> <p>List log rotation job logs.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/auditlog_rotation/#auditlog-rotation-log","title":"auditlog rotation log","text":"<pre><code>auditlog rotation log &lt;JOB_ID&gt;\n</code></pre> <p>Get the log for a log rotation job.</p> <p>Arguments</p> <p><code>JOB_ID</code> Log rotation job IDType: <code>integer</code> Required: \u2705</p>"},{"location":"commands/auditlog_rotation/#auditlog-rotation-stop","title":"auditlog rotation stop","text":"<pre><code>auditlog rotation stop &lt;JOB_ID&gt;\n</code></pre> <p>Stop a log rotation job.</p> <p>Arguments</p> <p><code>JOB_ID</code> Log rotation job IDType: <code>integer</code> Required: \u2705</p>"},{"location":"commands/auditlog_rotation_schedule/","title":"auditlog rotation schedule","text":""},{"location":"commands/auditlog_rotation_schedule/#auditlog-rotation-schedule-create","title":"auditlog rotation schedule create","text":"<pre><code>auditlog rotation schedule create [OPTIONS]\n</code></pre> <p>Create an audit log rotation schedule.</p> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> Type of schedule, e.g. <code>'Hourly'</code>. Mutually exclusive with <code>--cron</code>.Type: <code>text</code> </p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> Cron expression, e.g. <code>'0 0 * * *'</code>Type: <code>text</code> </p> <p><code>--retention-hours</code> <code>&lt;AUDIT_RETENTION_HOUR&gt;</code> Number of hours to retain audit logs, e.g. <code>'168'</code>Type: <code>integer</code> </p> <p><code>--operations</code> <code>&lt;OPERATIONS,[OPERATIONS...]&gt;</code> Operations to rotate logs for e.g. <code>'create,delete,pull'</code>Separate multiple values with commas, or use <code>--operations</code> multiple times.Type: <code>text</code> </p> <p><code>--dry-run</code>/<code>--no-dry-run</code>Dry runType: <code>boolean</code> (flag)</p>"},{"location":"commands/auditlog_rotation_schedule/#auditlog-rotation-schedule-get","title":"auditlog rotation schedule get","text":"<pre><code>auditlog rotation schedule get\n</code></pre> <p>Get the log rotation schedule.</p>"},{"location":"commands/auditlog_rotation_schedule/#auditlog-rotation-schedule-update","title":"auditlog rotation schedule update","text":"<pre><code>auditlog rotation schedule update [OPTIONS]\n</code></pre> <p>Update the audit log rotation schedule.</p> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> Type of schedule, e.g. <code>'Hourly'</code>. Mutually exclusive with <code>--cron</code>.Type: <code>text</code> </p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> Cron expression, e.g. <code>'0 0 * * *'</code>Type: <code>text</code> </p> <p><code>--retention-hours</code> <code>&lt;AUDIT_RETENTION_HOUR&gt;</code> Number of hours to retain audit logs, e.g. <code>168</code>Type: <code>integer</code> </p> <p><code>--operations</code> <code>&lt;OPERATIONS,[OPERATIONS...]&gt;</code> Operations to rotate logs for e.g. <code>'create,delete,pull'</code>Separate multiple values with commas, or use <code>--operations</code> multiple times.Type: <code>text</code> </p> <p><code>--dry-run</code>/<code>--no-dry-run</code>Dry runType: <code>boolean</code> (flag)</p>"},{"location":"commands/commands/","title":"commands","text":""},{"location":"commands/commands/#commands_1","title":"commands","text":"<pre><code>commands\n</code></pre> <p>List all commands.</p>"},{"location":"commands/config/","title":"config","text":""},{"location":"commands/config/#config-get","title":"config get","text":"<pre><code>config get [OPTIONS]\n</code></pre> <p>Fetch the current Harbor configuration.</p> <p>Options</p> <p><code>--flatten</code>/<code>--no-flatten</code>Flatten config response to a single level.Type: <code>boolean</code> (flag)Default: <code>True</code></p>"},{"location":"commands/config/#config-update","title":"config update","text":"<pre><code>config update [OPTIONS]\n</code></pre> <p>Update the Harbor configuration.</p> <p>One or more configuration parameters must be provided.</p> <p>Options</p> <p><code>--auth-mode</code> <code>&lt;AUTH_MODE&gt;</code> The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"Type: <code>text</code> </p> <p><code>--email-from</code> <code>&lt;EMAIL_FROM&gt;</code> Type: <code>text</code> </p> <p><code>--email-host</code> <code>&lt;EMAIL_HOST&gt;</code> Type: <code>text</code> </p> <p><code>--email-identity</code> <code>&lt;EMAIL_IDENTITY&gt;</code> Type: <code>text</code> </p> <p><code>--email-insecure</code> <code>&lt;EMAIL_INSECURE&gt;</code> Type: <code>boolean</code> </p> <p><code>--email-password</code> <code>&lt;EMAIL_PASSWORD&gt;</code> Type: <code>text</code> </p> <p><code>--email-port</code> <code>&lt;EMAIL_PORT&gt;</code> Type: <code>integer</code> </p> <p><code>--email-ssl</code> <code>&lt;EMAIL_SSL&gt;</code> Type: <code>boolean</code> </p> <p><code>--email-username</code> <code>&lt;EMAIL_USERNAME&gt;</code> Type: <code>text</code> </p> <p><code>--ldap-base-dn</code> <code>&lt;LDAP_BASE_DN&gt;</code> The Base DN for LDAP binding.Type: <code>text</code> </p> <p><code>--ldap-filter</code> <code>&lt;LDAP_FILTER&gt;</code> The filter for LDAP searchType: <code>text</code> </p> <p><code>--ldap-group-base-dn</code> <code>&lt;LDAP_GROUP_BASE_DN&gt;</code> The base DN to search LDAP group.Type: <code>text</code> </p> <p><code>--ldap-group-admin-dn</code> <code>&lt;LDAP_GROUP_ADMIN_DN&gt;</code> Specify the ldap group which have the same privilege with Harbor adminType: <code>text</code> </p> <p><code>--ldap-group-attribute-name</code> <code>&lt;LDAP_GROUP_ATTRIBUTE_NAME&gt;</code> The attribute which is used as identity of the LDAP group, default is cn.'Type: <code>text</code> </p> <p><code>--ldap-group-search-filter</code> <code>&lt;LDAP_GROUP_SEARCH_FILTER&gt;</code> The filter to search the ldap groupType: <code>text</code> </p> <p><code>--ldap-group-search-scope</code> <code>&lt;LDAP_GROUP_SEARCH_SCOPE&gt;</code> The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''Type: <code>integer</code> </p> <p><code>--ldap-scope</code> <code>&lt;LDAP_SCOPE&gt;</code> The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'Type: <code>integer</code> </p> <p><code>--ldap-search-dn</code> <code>&lt;LDAP_SEARCH_DN&gt;</code> The DN of the user to do the search.Type: <code>text</code> </p> <p><code>--ldap-search-password</code> <code>&lt;LDAP_SEARCH_PASSWORD&gt;</code> The password of the ldap search dnType: <code>text</code> </p> <p><code>--ldap-timeout</code> <code>&lt;LDAP_TIMEOUT&gt;</code> Timeout in seconds for connection to LDAP serverType: <code>integer</code> </p> <p><code>--ldap-uid</code> <code>&lt;LDAP_UID&gt;</code> The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"Type: <code>text</code> </p> <p><code>--ldap-url</code> <code>&lt;LDAP_URL&gt;</code> The URL of LDAP serverType: <code>text</code> </p> <p><code>--ldap-verify-cert</code> <code>&lt;LDAP_VERIFY_CERT&gt;</code> Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.Type: <code>boolean</code> </p> <p><code>--ldap-group-membership-attribute</code> <code>&lt;LDAP_GROUP_MEMBERSHIP_ATTRIBUTE&gt;</code> The user attribute to identify the group membershipType: <code>text</code> </p> <p><code>--project-creation-restriction</code> <code>&lt;PROJECT_CREATION_RESTRICTION&gt;</code> Indicate who can create projects, it could be ''adminonly'' or ''everyone''.Type: <code>text</code> </p> <p><code>--read-only</code> <code>&lt;READ_ONLY&gt;</code> The flag to indicate whether Harbor is in readonly mode.Type: <code>boolean</code> </p> <p><code>--self-registration</code> <code>&lt;SELF_REGISTRATION&gt;</code> Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.Type: <code>boolean</code> </p> <p><code>--token-expiration</code> <code>&lt;TOKEN_EXPIRATION&gt;</code> The expiration time of the token for internal Registry, in minutes.Type: <code>integer</code> </p> <p><code>--uaa-client-id</code> <code>&lt;UAA_CLIENT_ID&gt;</code> The client id of UAAType: <code>text</code> </p> <p><code>--ua</code> <code>&lt;UAA_CLIENT_SECRET&gt;</code> The client secret of the UAAType: <code>text</code> </p> <p><code>--uaa-endpoint</code> <code>&lt;UAA_ENDPOINT&gt;</code> The endpoint of the UAAType: <code>text</code> </p> <p><code>--uaa-verify-cert</code> <code>&lt;UAA_VERIFY_CERT&gt;</code> Verify the certificate in UAA serverType: <code>boolean</code> </p> <p><code>--http-authproxy-endpoint</code> <code>&lt;HTTP_AUTHPROXY_ENDPOINT&gt;</code> The endpoint of the HTTP authType: <code>text</code> </p> <p><code>--http-authproxy-tokenreview-endpoint</code> <code>&lt;HTTP_AUTHPROXY_TOKENREVIEW_ENDPOINT&gt;</code> The token review endpointType: <code>text</code> </p> <p><code>--http-authproxy-admin-groups</code> <code>&lt;HTTP_AUTHPROXY_ADMIN_GROUPS&gt;</code> The group which has the harbor admin privilegesType: <code>text</code> </p> <p><code>--http-authproxy-admin-usernames</code> <code>&lt;HTTP_AUTHPROXY_ADMIN_USERNAMES&gt;</code> The username of the user with admin privileges. NOTE: ONLY ACCEPTS A SINGLE USERNAME DESPITE NAMING SCHEME IMPLYING OTHERWISE! Type: <code>text</code> </p> <p><code>--http-authproxy-verify-cert</code> <code>&lt;HTTP_AUTHPROXY_VERIFY_CERT&gt;</code> Verify the HTTP auth provider's certificateType: <code>boolean</code> </p> <p><code>--http-authproxy-skip-search</code> <code>&lt;HTTP_AUTHPROXY_SKIP_SEARCH&gt;</code> Search user before onboardType: <code>boolean</code> </p> <p><code>--http-authproxy-server-certificate</code> <code>&lt;HTTP_AUTHPROXY_SERVER_CERTIFICATE&gt;</code> The certificate of the HTTP auth providerType: <code>text</code> </p> <p><code>--oidc-name</code> <code>&lt;OIDC_NAME&gt;</code> The OIDC provider nameType: <code>text</code> </p> <p><code>--oidc-endpoint</code> <code>&lt;OIDC_ENDPOINT&gt;</code> The endpoint of the OIDC providerType: <code>text</code> </p> <p><code>--oidc-client-id</code> <code>&lt;OIDC_CLIENT_ID&gt;</code> The client ID of the OIDC providerType: <code>text</code> </p> <p><code>--oidc-client-secret</code> <code>&lt;OIDC_CLIENT_SECRET&gt;</code> The OIDC provider secretType: <code>text</code> </p> <p><code>--oidc-groups-claim</code> <code>&lt;OIDC_GROUPS_CLAIM&gt;</code> The attribute claims the group nameType: <code>text</code> </p> <p><code>--oidc-admin-group</code> <code>&lt;OIDC_ADMIN_GROUP&gt;</code> The OIDC group which has the harbor admin privilegesType: <code>text</code> </p> <p><code>--oidc-scope</code> <code>&lt;OIDC_SCOPE&gt;</code> The scope of the OIDC providerType: <code>text</code> </p> <p><code>--oidc-user-claim</code> <code>&lt;OIDC_USER_CLAIM&gt;</code> The attribute claims the usernameType: <code>text</code> </p> <p><code>--oidc-verify-cert</code> <code>&lt;OIDC_VERIFY_CERT&gt;</code> Verify the OIDC provider's certificate'Type: <code>boolean</code> </p> <p><code>--oidc-auto-onboard</code> <code>&lt;OIDC_AUTO_ONBOARD&gt;</code> Auto onboard the OIDC userType: <code>boolean</code> </p> <p><code>--oidc-extra-redirect-parms</code> <code>&lt;OIDC_EXTRA_REDIRECT_PARMS&gt;</code> Extra parameters to add when redirect request to OIDC provider. WARNING: 'parms' not 'parAms', due to Harbor spelling parity (blame them).Type: <code>text</code> </p> <p><code>--robot-token-duration</code> <code>&lt;ROBOT_TOKEN_DURATION&gt;</code> The robot account token duration in daysType: <code>integer</code> </p> <p><code>--robot-name-prefix</code> <code>&lt;ROBOT_NAME_PREFIX&gt;</code> The rebot account name prefixType: <code>text</code> </p> <p><code>--notifications</code> <code>&lt;NOTIFICATION_ENABLE&gt;</code> Enable notificationType: <code>boolean</code> </p> <p><code>--quota-per-project</code> <code>&lt;QUOTA_PER_PROJECT_ENABLE&gt;</code> Enable quota per projectType: <code>boolean</code> </p> <p><code>--storage-per-project</code> <code>&lt;STORAGE_PER_PROJECT&gt;</code> The storage quota per projectType: <code>integer</code> </p> <p><code>--audit-log-forward-endpoint</code> <code>&lt;AUDIT_LOG_FORWARD_ENDPOINT&gt;</code> The audit log forward endpointType: <code>text</code> </p> <p><code>--skip-audit-log-database</code> <code>&lt;SKIP_AUDIT_LOG_DATABASE&gt;</code> Skip audit log databaseType: <code>boolean</code> </p>"},{"location":"commands/cve-allowlist/","title":"cve-allowlist","text":""},{"location":"commands/cve-allowlist/#cve-allowlist-clear","title":"cve-allowlist clear","text":"<pre><code>cve-allowlist clear [OPTIONS]\n</code></pre> <p>Clear the current CVE allowlist of all CVEs, and optionally all metadata as well.</p> <p>Options</p> <p><code>--full</code>Also clear the allowlist of all metadata (such as project ID, expiration, etc).Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/cve-allowlist/#cve-allowlist-get","title":"cve-allowlist get","text":"<pre><code>cve-allowlist get\n</code></pre> <p>Get the current CVE allowlist.</p>"},{"location":"commands/cve-allowlist/#cve-allowlist-update","title":"cve-allowlist update","text":"<pre><code>cve-allowlist update [OPTIONS]\n</code></pre> <p>Add/remove CVE IDs to the CVE allowlist.</p> <p>Options</p> <p><code>--cve</code> <code>&lt;CVES,[CVES...]&gt;</code> CVE IDs to add/remove. Can be a comma-separated list, or specified multiple times.Separate multiple values with commas, or use <code>--cve</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--remove</code>Remove the given CVE IDs from the allowlist instead of adding them.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/find/","title":"find","text":""},{"location":"commands/find/#find_1","title":"find","text":"<pre><code>find &lt;QUERY&gt; [OPTIONS]\n</code></pre> <p>Search for commands based on names and descriptions.</p> <p>Arguments</p> <p><code>QUERY</code> The search query.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to show.Type: <code>integer range</code> Min: <code>1</code></p> <p><code>--min-score</code> <code>&lt;MIN_SCORE&gt;</code> Minimum match ratio to show. Lower = more results.Type: <code>integer range</code> Min: <code>0</code>Max: <code>100</code>Default: <code>75</code></p> <p><code>--names</code>/<code>--no-names</code>Search in command names.Type: <code>boolean</code> (flag)Default: <code>True</code></p> <p><code>--descriptions</code>/<code>--no-descriptions</code>Search in command descriptions.Type: <code>boolean</code> (flag)Default: <code>True</code></p> <p><code>--strategy</code> <code>&lt;STRATEGY&gt;</code> The matching strategy to use. Strategies require different scoring thresholds. The default threshold is optimized for partial ratio.Type: <code>choice</code> Choices: <code>ratio</code>, <code>partial-ratio</code>, <code>token-sort-ratio</code>, <code>token-set-ratio</code>Default: <code>partial-ratio</code></p>"},{"location":"commands/gc/","title":"gc","text":""},{"location":"commands/gc/#gc-job","title":"gc job","text":"<pre><code>gc job &lt;JOB_ID&gt;\n</code></pre> <p>Get garbage collection job by its ID.</p> <p>Arguments</p> <p><code>JOB_ID</code> The ID of the Garbage Collection job to fetch.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/gc/#gc-jobs","title":"gc jobs","text":"<pre><code>gc jobs [OPTIONS]\n</code></pre> <p>Get garbage collection jobs.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/gc/#gc-log","title":"gc log","text":"<pre><code>gc log &lt;JOB_ID&gt;\n</code></pre> <p>Get garbage collection job by its ID.</p> <p>Arguments</p> <p><code>JOB_ID</code> The ID of the Garbage Collection job to fetch logs for.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/gc_schedule/","title":"gc schedule","text":""},{"location":"commands/gc_schedule/#gc-schedule-create","title":"gc schedule create","text":"<pre><code>gc schedule create [OPTIONS]\n</code></pre> <p>Create a new Garbage Collection schedule.</p> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.Type: <code>choice</code> Choices: <code>Hourly</code>, <code>Daily</code>, <code>Weekly</code>, <code>Custom</code>, <code>Manual</code>, <code>None</code>, <code>Schedule</code></p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> A cron expression, a time-based job scheduler.Type: <code>text</code> </p>"},{"location":"commands/gc_schedule/#gc-schedule-get","title":"gc schedule get","text":"<pre><code>gc schedule get\n</code></pre> <p>Get garbage collection schedule.</p>"},{"location":"commands/gc_schedule/#gc-schedule-update","title":"gc schedule update","text":"<pre><code>gc schedule update [OPTIONS]\n</code></pre> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.Type: <code>choice</code> Choices: <code>Hourly</code>, <code>Daily</code>, <code>Weekly</code>, <code>Custom</code>, <code>Manual</code>, <code>None</code>, <code>Schedule</code></p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> A cron expression, a time-based job scheduler.Type: <code>text</code> </p>"},{"location":"commands/init/","title":"init","text":""},{"location":"commands/init/#init_1","title":"init","text":"<pre><code>init [OPTIONS]\n</code></pre> <p>Initialize Harbor CLI configuration file.</p> <p>Runs the configuration wizard by default unless otherwise specified.</p> <p>Options</p> <p><code>--path</code> <code>&lt;PATH&gt;</code> Path to create config file.Type: <code>path</code> </p> <p><code>--overwrite</code>/<code>--no-overwrite</code>Overwrite existing config file.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--wizard</code>/<code>--no-wizard</code>Run the configuration wizard after creating the config file.Type: <code>boolean</code> (flag)Default: <code>True</code></p>"},{"location":"commands/ldap/","title":"ldap","text":""},{"location":"commands/ldap/#ldap-ping","title":"ldap ping","text":"<pre><code>ldap ping [OPTIONS]\n</code></pre> <p>Ping LDAP service. Uses default configuration if none is provided.</p> <p>Options</p> <p><code>--url</code> <code>&lt;LDAP_URL&gt;</code> The url of ldap service.Type: <code>text</code> </p> <p><code>--search-dn</code> <code>&lt;LDAP_SEARCH_DN&gt;</code> The search dn of ldap service.Type: <code>text</code> </p> <p><code>--search-password</code> <code>&lt;LDAP_SEARCH_PASSWORD&gt;</code> The search password of ldap service.Type: <code>text</code> </p> <p><code>--base-dn</code> <code>&lt;LDAP_BASE_DN&gt;</code> The base dn of ldap service.Type: <code>text</code> </p> <p><code>--filter</code> <code>&lt;LDAP_FILTER&gt;</code> The serach filter of ldap service.Type: <code>text</code> </p> <p><code>--uid</code> <code>&lt;LDAP_UID&gt;</code> The serach uid from ldap service attributes.Type: <code>text</code> </p> <p><code>--scope</code> <code>&lt;LDAP_SCOPE&gt;</code> The serach scope of ldap service.Type: <code>integer</code> </p> <p><code>--timeout</code> <code>&lt;LDAP_CONNECTION_TIMEOUT&gt;</code> The connect timeout of ldap service(second).Type: <code>integer</code> </p> <p><code>--verify-cert</code>Verify Ldap server certificate.Type: <code>boolean</code> (flag)</p>"},{"location":"commands/ldap_search/","title":"ldap search","text":""},{"location":"commands/ldap_search/#ldap-search-groups","title":"ldap search groups","text":"<pre><code>ldap search groups [OPTIONS]\n</code></pre> <p>Search for groups in LDAP.</p> <p>Options</p> <p><code>--group-name</code> <code>&lt;GROUP_NAME&gt;</code> Group name to search forType: <code>text</code> </p> <p><code>--group-dn</code> <code>&lt;GROUP_DN&gt;</code> Group DN to search forType: <code>text</code> </p>"},{"location":"commands/ldap_search/#ldap-search-users","title":"ldap search users","text":"<pre><code>ldap search users &lt;USERNAME&gt;\n</code></pre> <p>Search for users in LDAP.</p> <p>Arguments</p> <p><code>USERNAME</code> Username to search forType: <code>text</code> Required: \u2705</p>"},{"location":"commands/project/","title":"project","text":""},{"location":"commands/project/#project-create","title":"project create","text":"<pre><code>project create &lt;PROJECT_NAME&gt; [OPTIONS]\n</code></pre> <p>Create a new project.</p> <p>Arguments</p> <p><code>PROJECT_NAME</code> The name of the project.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--storage-limit</code> <code>&lt;STORAGE_LIMIT&gt;</code> The storage quota of the project.Type: <code>integer</code> </p> <p><code>--registry-id</code> <code>&lt;REGISTRY_ID&gt;</code> The ID of referenced registry when creating the proxy cache projectType: <code>integer</code> </p> <p><code>--public</code> <code>&lt;PUBLIC&gt;</code> The public status of the project.Type: <code>boolean</code> </p> <p><code>--content-trust</code> <code>&lt;ENABLE_CONTENT_TRUST&gt;</code> Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project.Type: <code>boolean</code> </p> <p><code>--content-trust-cosign</code> <code>&lt;ENABLE_CONTENT_TRUST_COSIGN&gt;</code> Whether cosign content trust is enabled or not. If it is enabled, user can't pull images without cosign signature from this project.Type: <code>boolean</code> </p> <p><code>--prevent-vul</code> <code>&lt;PREVENT_VUL&gt;</code> Whether prevent the vulnerable images from running.Type: <code>boolean</code> </p> <p><code>--severity</code> <code>&lt;SEVERITY&gt;</code> If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".Type: <code>text</code> </p> <p><code>--auto-scan</code> <code>&lt;AUTO_SCAN&gt;</code> Whether scan images automatically when pushing.Type: <code>boolean</code> </p> <p><code>--reuse-sys-cve-allowlist</code> <code>&lt;REUSE_SYS_CVE_ALLOWLIST&gt;</code> Whether this project reuse the system level CVE allowlist as the allowlist of its own.   If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.Type: <code>boolean</code> </p> <p><code>--retention-id</code> <code>&lt;RETENTION_ID&gt;</code> The ID of the tag retention policy for the projectType: <code>text</code> </p> <p><code>--sbom-generation</code> <code>&lt;AUTO_SBOM_GENERATION&gt;</code> Whether generating SBOM automatically when pushing a subject artifact.Type: <code>boolean</code> </p>"},{"location":"commands/project/#project-delete","title":"project delete","text":"<pre><code>project delete &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/project/#project-exists","title":"project exists","text":"<pre><code>project exists &lt;PROJECT_NAME&gt;\n</code></pre> <p>Check if a project with the given name exists.</p> <p>Arguments</p> <p><code>PROJECT_NAME</code> Project name to check existence of.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project/#project-get","title":"project get","text":"<pre><code>project get &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Get information about a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project/#project-list","title":"project list","text":"<pre><code>project list [OPTIONS]\n</code></pre> <p>Fetch projects.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sort projects by the given field(s). Sortable fields: <code>'name'</code>, <code>'project_id'</code>, <code>'creation_time'</code>Type: <code>text</code> Default: <code>name</code></p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p> <p><code>--public</code>/<code>--no-public</code>Filter projects by the given public status.Type: <code>boolean</code> (flag)</p> <p><code>--owner</code> <code>&lt;OWNER&gt;</code> Filter projects by the user who owns them.Type: <code>text</code> </p>"},{"location":"commands/project/#project-logs","title":"project logs","text":"<pre><code>project logs &lt;PROJECT_NAME&gt; [OPTIONS]\n</code></pre> <p>Fetch logs for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME</code> Project name to fetch logs for.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/project/#project-repos","title":"project repos","text":"<pre><code>project repos &lt;PROJECT&gt; [OPTIONS]\n</code></pre> <p>List all repositories in a project.</p> <p>Alternative to <code>repository list</code></p> <p>Arguments</p> <p><code>PROJECT</code> Name of project to fetch repositories from.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/project/#project-summary","title":"project summary","text":"<pre><code>project summary &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Fetch project summary.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project/#project-update","title":"project update","text":"<pre><code>project update &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Update project information.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--storage-limit</code> <code>&lt;STORAGE_LIMIT&gt;</code> The storage quota of the project.Type: <code>integer</code> </p> <p><code>--registry-id</code> <code>&lt;REGISTRY_ID&gt;</code> The ID of referenced registry when creating the proxy cache projectType: <code>integer</code> </p> <p><code>--public</code> <code>&lt;PUBLIC&gt;</code> The public status of the project.Type: <code>boolean</code> </p> <p><code>--content-trust</code> <code>&lt;ENABLE_CONTENT_TRUST&gt;</code> Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project.Type: <code>boolean</code> </p> <p><code>--content-trust-cosign</code> <code>&lt;ENABLE_CONTENT_TRUST_COSIGN&gt;</code> Whether cosign content trust is enabled or not. If it is enabled, user can't pull images without cosign signature from this project.Type: <code>boolean</code> </p> <p><code>--prevent-vul</code> <code>&lt;PREVENT_VUL&gt;</code> Whether prevent the vulnerable images from running.Type: <code>boolean</code> </p> <p><code>--severity</code> <code>&lt;SEVERITY&gt;</code> If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".Type: <code>text</code> </p> <p><code>--auto-scan</code> <code>&lt;AUTO_SCAN&gt;</code> Whether scan images automatically when pushing.Type: <code>boolean</code> </p> <p><code>--reuse-sys-cve-allowlist</code> <code>&lt;REUSE_SYS_CVE_ALLOWLIST&gt;</code> Whether this project reuse the system level CVE allowlist as the allowlist of its own.   If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.Type: <code>boolean</code> </p> <p><code>--retention-id</code> <code>&lt;RETENTION_ID&gt;</code> The ID of the tag retention policy for the projectType: <code>text</code> </p> <p><code>--sbom-generation</code> <code>&lt;AUTO_SBOM_GENERATION&gt;</code> Whether generating SBOM automatically when pushing a subject artifact.Type: <code>boolean</code> </p>"},{"location":"commands/project_member/","title":"project member","text":""},{"location":"commands/project_member/#project-member-add-group","title":"project member add-group","text":"<pre><code>project member add-group &lt;PROJECT_NAME_OR_ID&gt; &lt;LDAP_GROUP_DN_OR_ID&gt; &lt;ROLE&gt;\n</code></pre> <p>Add a group as a member of a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>LDAP_GROUP_DN_OR_ID</code> LDAP Group DN or ID of the group to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>ROLE</code> The type of role to give the user.Type: <code>choice</code> Choices: <code>admin</code>, <code>developer</code>, <code>guest</code>, <code>maintainer</code>, <code>limited_guest</code>Required: \u2705</p>"},{"location":"commands/project_member/#project-member-add-user","title":"project member add-user","text":"<pre><code>project member add-user &lt;PROJECT_NAME_OR_ID&gt; &lt;USERNAME_OR_ID&gt; &lt;ROLE&gt;\n</code></pre> <p>Add a user as a member of a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>ROLE</code> The type of role to give the user.Type: <code>choice</code> Choices: <code>admin</code>, <code>developer</code>, <code>guest</code>, <code>maintainer</code>, <code>limited_guest</code>Required: \u2705</p>"},{"location":"commands/project_member/#project-member-get","title":"project member get","text":"<pre><code>project member get &lt;PROJECT_NAME_OR_ID&gt; &lt;MEMBER_ID&gt;\n</code></pre> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>MEMBER_ID</code> The ID of the member to get.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/project_member/#project-member-list","title":"project member list","text":"<pre><code>project member list &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>List all members of a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--entity</code> <code>&lt;ENTITY_NAME&gt;</code> Entity name to search for.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/project_member/#project-member-remove","title":"project member remove","text":"<pre><code>project member remove &lt;PROJECT_NAME_OR_ID&gt; &lt;USERNAME_OR_ID&gt;\n</code></pre> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project_member/#project-member-update-role","title":"project member update-role","text":"<pre><code>project member update-role &lt;PROJECT_NAME_OR_ID&gt; &lt;USERNAME_OR_ID&gt; &lt;ROLE&gt;\n</code></pre> <p>Add a user as a member of a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>ROLE</code> The type of role to give the user.Type: <code>choice</code> Choices: <code>admin</code>, <code>developer</code>, <code>guest</code>, <code>maintainer</code>, <code>limited_guest</code>Required: \u2705</p>"},{"location":"commands/project_metadata/","title":"project metadata","text":""},{"location":"commands/project_metadata/#project-metadata-get","title":"project metadata get","text":"<pre><code>project metadata get &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Get metadata for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project_metadata/#project-metadata-set","title":"project metadata set","text":"<pre><code>project metadata set &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Set metadata for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--public</code> <code>&lt;PUBLIC&gt;</code> The public status of the project. The valid values are \"true\", \"false\".Type: <code>boolean</code> </p> <p><code>--content-trust</code> <code>&lt;ENABLE_CONTENT_TRUST&gt;</code> Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".Type: <code>boolean</code> </p> <p><code>--content-trust-cosign</code> <code>&lt;CONTENT_TRUST_COSIGN&gt;</code> Type: <code>boolean</code> </p> <p><code>--prevent-vul</code> <code>&lt;PREVENT_VUL&gt;</code> Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".Type: <code>boolean</code> </p> <p><code>--severity</code> <code>&lt;SEVERITY&gt;</code> If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".Type: <code>text</code> </p> <p><code>--auto-scan</code> <code>&lt;AUTO_SCAN&gt;</code> Whether scan images automatically when pushing. The valid values are \"true\", \"false\".Type: <code>boolean</code> </p> <p><code>--reuse-sys-cve-allowlist</code> <code>&lt;REUSE_SYS_CVE_ALLOWLIST&gt;</code> Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.Type: <code>boolean</code> </p> <p><code>--retention-id</code> <code>&lt;RETENTION_ID&gt;</code> The ID of the tag retention policy for the projectType: <code>integer</code> </p> <p><code>--extra</code> <code>&lt;KEY=VALUE,[KEY=VALUE...]&gt;</code> Extra metadata to set beyond the fields in the spec. Format: <code>'key=value'</code>. Separate multiple values with commas, or use <code>--extra</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p>"},{"location":"commands/project_metadata_field/","title":"project metadata field","text":""},{"location":"commands/project_metadata_field/#project-metadata-field-delete","title":"project metadata field delete","text":"<pre><code>project metadata field delete &lt;PROJECT_NAME_OR_ID&gt; &lt;FIELD&gt; [OPTIONS]\n</code></pre> <p>Delete a single field in the metadata for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>FIELD</code> The metadata field to delete.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/project_metadata_field/#project-metadata-field-get","title":"project metadata field get","text":"<pre><code>project metadata field get &lt;PROJECT_NAME_OR_ID&gt; &lt;FIELD&gt;\n</code></pre> <p>Get a single field from the metadata for a project. NOTE: does not support table output currently.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>FIELD</code> The name of the field to get.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project_metadata_field/#project-metadata-field-set","title":"project metadata field set","text":"<pre><code>project metadata field set &lt;PROJECT_NAME_OR_ID&gt; &lt;FIELD&gt; &lt;VALUE&gt;\n</code></pre> <p>Set a single field in the metadata for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>FIELD</code> The name of the field to set.Type: <code>text</code> Required: \u2705</p> <p><code>VALUE</code> The value to set.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project_scanner/","title":"project scanner","text":""},{"location":"commands/project_scanner/#project-scanner-candidates","title":"project scanner candidates","text":"<pre><code>project scanner candidates &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p>"},{"location":"commands/project_scanner/#project-scanner-get","title":"project scanner get","text":"<pre><code>project scanner get &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/project_scanner/#project-scanner-set","title":"project scanner set","text":"<pre><code>project scanner set &lt;PROJECT_NAME_OR_ID&gt; &lt;SCANNER_ID&gt;\n</code></pre> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>SCANNER_ID</code> ID of the scanner to set.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/quota/","title":"quota","text":""},{"location":"commands/quota/#quota-get","title":"quota get","text":"<pre><code>quota get &lt;QUOTA_ID&gt;\n</code></pre> <p>Fetch a quota.</p> <p>Arguments</p> <p><code>QUOTA_ID</code> ID of quota to get.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/quota/#quota-list","title":"quota list","text":"<pre><code>quota list [OPTIONS]\n</code></pre> <p>List registries.</p> <p>Options</p> <p><code>--reference</code> <code>&lt;REFERENCE&gt;</code> Reference type of quotas to list.Type: <code>text</code> </p> <p><code>--reference-id</code> <code>&lt;REFERENCE_ID&gt;</code> Reference ID of quotas to list.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sort order of quotas to list. Valid values include: <code>'hard.resource_name'</code>, <code>'-hard.resource_name'</code>, <code>'used.resource_name'</code>, <code>'-used.resource_name'</code>.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/quota/#quota-update","title":"quota update","text":"<pre><code>quota update &lt;QUOTA_ID&gt; &lt;PROP=VALUE, ...&gt;\n</code></pre> <p>Update a quota.</p> <p>Arguments</p> <p><code>QUOTA_ID</code> ID of quota to update.Type: <code>integer</code> Required: \u2705</p> <p><code>PROP=VALUE, ...</code> Quota properties to update in the format <code>'property=value'</code>. Multiple properties can be provided separated by spaces or commas. NOTE: It is likely the property should always be <code>'storage'</code> and the value an integer representing the quota size in bytes.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/registry/","title":"registry","text":""},{"location":"commands/registry/#registry-adapters","title":"registry adapters","text":"<pre><code>registry adapters\n</code></pre> <p>Get available adapters</p>"},{"location":"commands/registry/#registry-create","title":"registry create","text":"<pre><code>registry create &lt;NAME&gt; &lt;URL&gt; [OPTIONS]\n</code></pre> <p>Create a new registry.</p> <p>Arguments</p> <p><code>NAME</code> The registry name.Type: <code>text</code> Required: \u2705</p> <p><code>URL</code> The registry URL string.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--credential-type</code> <code>&lt;CREDENTIAL_TYPE&gt;</code> Type: <code>text</code> </p> <p><code>--access-key</code> <code>&lt;ACCESS_KEY&gt;</code> Access key, e.g. user name when credential type is 'basic'.Type: <code>text</code> </p> <p><code>--access-secret</code> <code>&lt;ACCESS_SECRET&gt;</code> Access secret, e.g. password when credential type is 'basic'.Type: <code>text</code> </p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> Type of the registry, e.g. 'harbor'.Type: <code>text</code> </p> <p><code>--insecure</code>Disable verification of TLS certificates.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> Description of the registry.Type: <code>text</code> </p>"},{"location":"commands/registry/#registry-delete","title":"registry delete","text":"<pre><code>registry delete &lt;REGISTRY_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a registry.</p> <p>Arguments</p> <p><code>REGISTRY_ID</code> ID of registry to delete.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/registry/#registry-get","title":"registry get","text":"<pre><code>registry get &lt;REGISTRY_ID&gt;\n</code></pre> <p>Fetch a registry.</p> <p>Arguments</p> <p><code>REGISTRY_ID</code> ID of registry to get.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/registry/#registry-info","title":"registry info","text":"<pre><code>registry info &lt;REGISTRY_ID&gt;\n</code></pre> <p>Get information about a registry's triggers and resource filters</p> <p>Arguments</p> <p><code>REGISTRY_ID</code> ID of registry to get info for.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/registry/#registry-list","title":"registry list","text":"<pre><code>registry list [OPTIONS]\n</code></pre> <p>List registries.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/registry/#registry-ping","title":"registry ping","text":"<pre><code>registry ping &lt;REGISTRY_ID&gt; [OPTIONS]\n</code></pre> <p>Ping a registry to see if it's reachable.</p> <p>Arguments</p> <p><code>REGISTRY_ID</code> ID of registry to get status of.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> Type of the registry, e.g. 'harbor'.Type: <code>text</code> </p> <p><code>--url</code> <code>&lt;URL&gt;</code> The registry URL.Type: <code>text</code> </p> <p><code>--credential-type</code> <code>&lt;CREDENTIAL_TYPE&gt;</code> Credential type of the registry, e.g. 'basic'.Type: <code>text</code> </p> <p><code>--access-key</code> <code>&lt;ACCESS_KEY&gt;</code> The registry access key.Type: <code>text</code> </p> <p><code>--access-secret</code> <code>&lt;ACCESS_SECRET&gt;</code> The registry access secret.Type: <code>text</code> </p> <p><code>--insecure</code> <code>&lt;INSECURE&gt;</code> Whether or not the certificate will be verified when Harbor tries to access the server.Type: <code>boolean</code> </p>"},{"location":"commands/registry/#registry-providers","title":"registry providers","text":"<pre><code>registry providers\n</code></pre> <p>List all available registry providers</p>"},{"location":"commands/registry/#registry-update","title":"registry update","text":"<pre><code>registry update &lt;REGISTRY_ID&gt; [OPTIONS]\n</code></pre> <p>Update a registry.</p> <p>Arguments</p> <p><code>REGISTRY_ID</code> ID of registry to update.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--name</code> <code>&lt;NAME&gt;</code> The registry name.Type: <code>text</code> </p> <p><code>--url</code> <code>&lt;URL&gt;</code> The registry URL.Type: <code>text</code> </p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> Description of the registry.Type: <code>text</code> </p> <p><code>--credential-type</code> <code>&lt;CREDENTIAL_TYPE&gt;</code> Credential type of the registry, e.g. 'basic'.Type: <code>text</code> </p> <p><code>--access-key</code> <code>&lt;ACCESS_KEY&gt;</code> The registry access key.Type: <code>text</code> </p> <p><code>--access-secret</code> <code>&lt;ACCESS_SECRET&gt;</code> The registry access secret.Type: <code>text</code> </p> <p><code>--insecure</code>Whether or not the certificate will be verified when Harbor tries to access the server.Type: <code>boolean</code> (flag)</p>"},{"location":"commands/repl/","title":"repl","text":""},{"location":"commands/repl/#repl_1","title":"repl","text":"<pre><code>repl [OPTIONS]\n</code></pre> <p>Start an interactive REPL.</p> <p>Options</p> <p><code>--repl-history</code>/<code>--no-repl-history</code>Enable REPL history. Overrides config option <code>repl.history</code>.Type: <code>boolean</code> (flag)</p> <p><code>--repl-history-file</code> <code>&lt;REPL_HISTORY_FILE&gt;</code> Custom location of REPL history file (default: <code>'/home/runner/.local/share/harbor-cli/history'</code>). Overrides config option <code>repl.history_file</code>.Type: <code>path</code> </p>"},{"location":"commands/replication/","title":"replication","text":""},{"location":"commands/replication/#replication-get","title":"replication get","text":"<pre><code>replication get &lt;EXECUTION_ID&gt;\n</code></pre> <p>Get information about a replication execution.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The ID of the replication execution.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/replication/#replication-list","title":"replication list","text":"<pre><code>replication list [OPTIONS]\n</code></pre> <p>List replication executions.</p> <p>Options</p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--policy-id</code> <code>&lt;POLICY_ID&gt;</code> The ID of the policy to list executions for.Type: <code>integer</code> </p> <p><code>--status</code> <code>&lt;STATUS&gt;</code> The status of the executions to list.Type: <code>text</code> </p> <p><code>--trigger</code> <code>&lt;TRIGGER&gt;</code> The trigger of the executions to list.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/replication/#replication-start","title":"replication start","text":"<pre><code>replication start &lt;POLICY_ID&gt;\n</code></pre> <p>Start a replication execution.</p> <p>Arguments</p> <p><code>POLICY_ID</code> The ID of the policy to start a execution for.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/replication/#replication-stop","title":"replication stop","text":"<pre><code>replication stop &lt;EXECUTION_ID&gt;\n</code></pre> <p>Stop a replication execution.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The ID of the replication execution.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/replication_policy/","title":"replication policy","text":""},{"location":"commands/replication_policy/#replication-policy-create","title":"replication policy create","text":"<pre><code>replication policy create &lt;NAME&gt; &lt;SRC_REGISTRY_ID&gt; &lt;DEST_REGISTRY_ID&gt; [OPTIONS]\n</code></pre> <p>Create a replication policy.</p> <p>Arguments</p> <p><code>NAME</code> The policy name.Type: <code>text</code> Required: \u2705</p> <p><code>SRC_REGISTRY_ID</code> The ID of registry to replicate from. Typically an external registry such as <code>'hub.docker.com'</code>, <code>'ghcr.io'</code>, etc.Type: <code>integer</code> Required: \u2705</p> <p><code>DEST_REGISTRY_ID</code> The ID of the registry to replicate to.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> The description of the policy.Type: <code>text</code> </p> <p><code>--dest-namespace</code> <code>&lt;DEST_NAMESPACE&gt;</code> The destination namespace.Type: <code>text</code> </p> <p><code>--dest-namespace-replace-count</code> <code>&lt;DEST_NAMESPACE_REPLACE_COUNT&gt;</code> Specify how many path components will be replaced by the provided destination namespace. The default value is -1 in which case the legacy mode will be applied.Type: <code>integer</code> </p> <p><code>--trigger-type</code> <code>&lt;REPLICATION_TRIGGER_TYPE&gt;</code> The replication policy trigger type. The valid values are manual, event_based and scheduled.Type: <code>text</code> </p> <p><code>--trigger-cron</code> <code>&lt;REPLICATION_TRIGGER_CRON&gt;</code> The cron string for scheduled triggerType: <code>text</code> </p> <p><code>--filter-name</code> <code>&lt;FILTER_NAME&gt;</code> Filter the name of the resource. Leave empty or use <code>'**'</code> to match all. <code>'library/**'</code> only matches resources under 'library'. For more patterns, please refer to the offical Harbor user guide.Type: <code>text</code> </p> <p><code>--filter-tag</code> <code>&lt;FILTER_TAG&gt;</code> Filter the tag of the resource. Type: <code>text</code> </p> <p><code>--filter-tag-mode</code> <code>&lt;FILTER_TAG_MODE&gt;</code> Match or exclude the given tagType: <code>choice</code> Choices: <code>matches</code>, <code>excludes</code>Default: <code>matches</code></p> <p><code>--filter-label</code> <code>&lt;FILTER_LABEL&gt;</code> Filter the label of the resource. Type: <code>text</code> </p> <p><code>--filter-label-mode</code> <code>&lt;FILTER_LABEL_MODE&gt;</code> Match or exclude the given labelType: <code>choice</code> Choices: <code>matches</code>, <code>excludes</code>Default: <code>matches</code></p> <p><code>--filter-resource</code> <code>&lt;FILTER_RESOURCE&gt;</code> Filter the resource type to replicate.Type: <code>choice</code> Choices: <code>all</code>, <code>image</code>, <code>artifact</code>Default: <code>all</code></p> <p><code>--replicate-deletion</code> <code>&lt;REPLICATE_DELETION&gt;</code> Whether to replicate the deletion operation.Type: <code>boolean</code> </p> <p><code>--override</code> <code>&lt;OVERRIDE&gt;</code> Whether to override the resources on the destination registry.Type: <code>boolean</code> </p> <p><code>--enabled</code> <code>&lt;ENABLED&gt;</code> Whether the policy is enabled or not.Type: <code>boolean</code> </p> <p><code>--speed-limit</code> <code>&lt;SPEED&gt;</code> speed limit for each taskType: <code>integer</code> </p>"},{"location":"commands/replication_policy/#replication-policy-delete","title":"replication policy delete","text":"<pre><code>replication policy delete &lt;POLICY_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a replication policy.</p> <p>Arguments</p> <p><code>POLICY_ID</code> The ID of the replication policy.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/replication_policy/#replication-policy-get","title":"replication policy get","text":"<pre><code>replication policy get &lt;POLICY_ID&gt;\n</code></pre> <p>Get information about a replication policy.</p> <p>Arguments</p> <p><code>POLICY_ID</code> The ID of the replication policy.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/replication_policy/#replication-policy-list","title":"replication policy list","text":"<pre><code>replication policy list [OPTIONS]\n</code></pre> <p>List replication policies.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/replication_task/","title":"replication task","text":""},{"location":"commands/replication_task/#replication-task-list","title":"replication task list","text":"<pre><code>replication task list &lt;EXECUTION_ID&gt; [OPTIONS]\n</code></pre> <p>List replication tasks.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The ID of the replication execution to list tasks for.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--status</code> <code>&lt;STATUS&gt;</code> Task status to filter by.Type: <code>text</code> </p> <p><code>--resource-type</code> <code>&lt;RESOURCE_TYPE&gt;</code> Task resource type to filter by.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p>"},{"location":"commands/replication_task/#replication-task-log","title":"replication task log","text":"<pre><code>replication task log &lt;EXECUTION_ID&gt; &lt;TASK_ID&gt;\n</code></pre> <p>Get the log for a replication task.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The ID of the execution the task belongs to.Type: <code>integer</code> Required: \u2705</p> <p><code>TASK_ID</code> The ID of the task to get the log for.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/repository/","title":"repository","text":""},{"location":"commands/repository/#repository-delete","title":"repository delete","text":"<pre><code>repository delete &lt;PROJECT&gt; &lt;REPOSITORY&gt; [OPTIONS]\n</code></pre> <p>Delete a repository.</p> <p>Arguments</p> <p><code>PROJECT</code> Name of the project the repository belongs to.Type: <code>text</code> Required: \u2705</p> <p><code>REPOSITORY</code> Name of the repository to get.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/repository/#repository-get","title":"repository get","text":"<pre><code>repository get &lt;PROJECT&gt; &lt;REPOSITORY&gt;\n</code></pre> <p>Fetch a repository.</p> <p>Arguments</p> <p><code>PROJECT</code> Name of the project the repository belongs to.Type: <code>text</code> Required: \u2705</p> <p><code>REPOSITORY</code> Name of the repository to get.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/repository/#repository-list","title":"repository list","text":"<pre><code>repository list &lt;PROJECT&gt; [OPTIONS]\n</code></pre> <p>List repositories in all projects or a specific project.</p> <p>Arguments</p> <p><code>PROJECT</code> Name of project to fetch repositories from. If not specified, all projects will be searched.Type: <code>text</code> </p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/repository/#repository-update","title":"repository update","text":"<pre><code>repository update &lt;PROJECT&gt; &lt;REPOSITORY&gt; [OPTIONS]\n</code></pre> <p>Update a repository.</p> <p>As of now, only the description can be updated (if the Web UI is to be trusted).</p> <p>Arguments</p> <p><code>PROJECT</code> Project name of repository to update.Type: <code>text</code> Required: \u2705</p> <p><code>REPOSITORY</code> Name of the repository to update.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> The description of the repositoryType: <code>text</code> </p>"},{"location":"commands/retention/","title":"retention","text":""},{"location":"commands/retention/#retention-metadata","title":"retention metadata","text":"<pre><code>retention metadata\n</code></pre> <p>Get the metadata for retentions.</p>"},{"location":"commands/retention_job/","title":"retention job","text":""},{"location":"commands/retention_job/#retention-job-list","title":"retention job list","text":"<pre><code>retention job list &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>List retention jobs.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/retention_job/#retention-job-start","title":"retention job start","text":"<pre><code>retention job start &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Start a retention job.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p> <p><code>--dry-run</code>Run job in dry run mode.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/retention_job/#retention-job-stop","title":"retention job stop","text":"<pre><code>retention job stop &lt;PROJECT_NAME_OR_ID&gt; &lt;JOB_ID&gt; [OPTIONS]\n</code></pre> <p>Stop a retention job.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p><code>JOB_ID</code> ID of the job to stop.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p>"},{"location":"commands/retention_job_task/","title":"retention job task","text":""},{"location":"commands/retention_job_task/#retention-job-task-list","title":"retention job task list","text":"<pre><code>retention job task list &lt;PROJECT_NAME_OR_ID&gt; &lt;JOB_ID&gt; [OPTIONS]\n</code></pre> <p>List retention tasks.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p><code>JOB_ID</code> ID of the job to list tasks for.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/retention_job_task/#retention-job-task-log","title":"retention job task log","text":"<pre><code>retention job task log &lt;PROJECT_NAME_OR_ID&gt; &lt;JOB_ID&gt; &lt;TASK_ID&gt; [OPTIONS]\n</code></pre> <p>Get the log for a retention job task.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p><code>JOB_ID</code> ID of job.Type: <code>integer</code> Required: \u2705</p> <p><code>TASK_ID</code> ID of job task.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p>"},{"location":"commands/retention_policy/","title":"retention policy","text":""},{"location":"commands/retention_policy/#retention-policy-delete","title":"retention policy delete","text":"<pre><code>retention policy delete &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a retention policy.</p> <p>Warning</p> <p>The user needs permission to update the project metadata in addition to managing its retention policy, due to a critical API bug that will break a project if the project metadata is not updated after its retention policy is deleted.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/retention_policy/#retention-policy-get","title":"retention policy get","text":"<pre><code>retention policy get &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Fetch a retention policy.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p> <p>Options</p> <p><code>--id</code> <code>&lt;POLICY_ID&gt;</code> Retention policy ID. Overrides positional argument.Type: <code>integer</code> </p>"},{"location":"commands/retention_policy/#retention-policy-id","title":"retention policy id","text":"<pre><code>retention policy id &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Get the retention policy ID for a project.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> </p>"},{"location":"commands/sample-config/","title":"sample-config","text":""},{"location":"commands/sample-config/#sample-config_1","title":"sample-config","text":"<pre><code>sample-config\n</code></pre> <p>Print a sample config file to stdout.</p>"},{"location":"commands/scan-all/","title":"scan-all","text":""},{"location":"commands/scan-all/#scan-all-metrics","title":"scan-all metrics","text":"<pre><code>scan-all metrics\n</code></pre> <p>Get metrics for all 'Scan All' jobs.</p>"},{"location":"commands/scan-all/#scan-all-stop","title":"scan-all stop","text":"<pre><code>scan-all stop\n</code></pre> <p>Stop the currently running 'Scan All' job.</p>"},{"location":"commands/scan-all_schedule/","title":"scan-all schedule","text":""},{"location":"commands/scan-all_schedule/#scan-all-schedule-create","title":"scan-all schedule create","text":"<pre><code>scan-all schedule create [OPTIONS]\n</code></pre> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.Type: <code>text</code> </p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> A cron expression, a time-based job scheduler.Type: <code>text</code> </p>"},{"location":"commands/scan-all_schedule/#scan-all-schedule-get","title":"scan-all schedule get","text":"<pre><code>scan-all schedule get\n</code></pre> <p>Get the current 'Scan All' schedule.</p>"},{"location":"commands/scan-all_schedule/#scan-all-schedule-update","title":"scan-all schedule update","text":"<pre><code>scan-all schedule update [OPTIONS]\n</code></pre> <p>Options</p> <p><code>--type</code> <code>&lt;TYPE&gt;</code> The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.Type: <code>text</code> </p> <p><code>--cron</code> <code>&lt;CRON&gt;</code> A cron expression, a time-based job scheduler.Type: <code>text</code> </p>"},{"location":"commands/scan/","title":"scan","text":""},{"location":"commands/scan/#scan-log","title":"scan log","text":"<pre><code>scan log &lt;ARTIFACT&gt; &lt;REPORT_ID&gt;\n</code></pre> <p>Get the log for a specific scan report.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p> <p><code>REPORT_ID</code> ID of the report to retrieve logs of.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/scan/#scan-start","title":"scan start","text":"<pre><code>scan start &lt;ARTIFACT&gt;\n</code></pre> <p>Start scanning an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/scan/#scan-stop","title":"scan stop","text":"<pre><code>scan stop &lt;ARTIFACT&gt;\n</code></pre> <p>Stop scanning an artifact.</p> <p>Arguments</p> <p><code>ARTIFACT</code> Name of the artifact in the format <code>'PROJECT/REPOSITORY{:tag,@sha256:digest}'</code>. Example: <code>'library/nginx:latest'</code> or <code>'library/nginx@sha256:1234'</code>.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/scan_export/","title":"scan export","text":""},{"location":"commands/scan_export/#scan-export-download","title":"scan export download","text":"<pre><code>scan export download &lt;EXECUTION_ID&gt; &lt;DESTINATION&gt;\n</code></pre> <p>Download the results of a scan export job as a CSV file.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The execution ID of the scan job to download.Type: <code>integer</code> Required: \u2705</p> <p><code>DESTINATION</code> Destination to download the export to.Type: <code>path</code> Required: \u2705</p>"},{"location":"commands/scan_export/#scan-export-get","title":"scan export get","text":"<pre><code>scan export get &lt;EXECUTION_ID&gt;\n</code></pre> <p>Get a specific scan export.</p> <p>Arguments</p> <p><code>EXECUTION_ID</code> The execution ID of the scan job to retrieve.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/scan_export/#scan-export-list","title":"scan export list","text":"<pre><code>scan export list\n</code></pre> <p>List all scan exports for the current user.</p>"},{"location":"commands/scan_export/#scan-export-start","title":"scan export start","text":"<pre><code>scan export start [OPTIONS]\n</code></pre> <p>Start a scan export job.</p> <p>Returns an execution ID that can be used to download the export once it is finished using <code>harbor scan export download</code></p> <p>Warning</p> <p>The official documentation for this endpoint is poor, and as such, this command might not work as intended.</p> <p>Options</p> <p><code>--name</code> <code>&lt;JOB_NAME&gt;</code> Custom name for export job.Type: <code>text</code> </p> <p><code>--cve</code> <code>&lt;CVE,[CVE...]&gt;</code> CVE(s) to exportSeparate multiple values with commas, or use <code>--cve</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--tag</code> <code>&lt;TAG,[TAG...]&gt;</code> Names of tag(s) to include in the export. Supports wildcards (<code>'tag*'</code>, <code>'**'</code>). Defaults to all tags (<code>'**'</code>)Separate multiple values with commas, or use <code>--tag</code> multiple times.Type: <code>text</code> Default: <code>['**']</code></p> <p><code>--label</code> <code>&lt;LABEL,[LABEL...]&gt;</code> IDs of specific label(s) to include in the export.Separate multiple values with commas, or use <code>--label</code> multiple times.Type: <code>text</code> Default: <code>[]</code></p> <p><code>--repo</code> <code>&lt;REPO,[REPO...]&gt;</code> Names of repo(s) to include in the export. Supports wildcards (<code>'repo*'</code>, <code>'**'</code>). Defaults to all repos (<code>'**'</code>)Separate multiple values with commas, or use <code>--repo</code> multiple times.Type: <code>text</code> Default: <code>['**']</code></p> <p><code>--project</code> <code>&lt;PROJECT&gt;</code> Name or ID of project to include in the export.Type: <code>text</code> </p> <p><code>--scan-type</code> <code>&lt;SCAN_TYPE&gt;</code> The type of scan to export. Should not be changed unless you know what you are doing.Type: <code>text</code> Default: <code>application/vnd.security.vulnerability.report; version=1.1</code></p>"},{"location":"commands/scanner/","title":"scanner","text":""},{"location":"commands/scanner/#scanner-create","title":"scanner create","text":"<pre><code>scanner create &lt;NAME&gt; &lt;URL&gt; [OPTIONS]\n</code></pre> <p>Create a new scanner.</p> <p>Arguments</p> <p><code>NAME</code> The name of this registrationType: <code>text</code> Required: \u2705</p> <p><code>URL</code> A base URL of the scanner adapter.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> An optional description of this registration.Type: <code>text</code> </p> <p><code>--auth</code> <code>&lt;AUTH&gt;</code> Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"Type: <code>text</code> </p> <p><code>--access-credential</code> <code>&lt;ACCESS_CREDENTIAL&gt;</code> An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.Type: <code>text</code> </p> <p><code>--skip-cert-verify</code> <code>&lt;SKIP_CERT_VERIFY&gt;</code> Indicate if skip the certificate verification when sending HTTP requestsType: <code>boolean</code> </p> <p><code>--use-internal-addr</code> <code>&lt;USE_INTERNAL_ADDR&gt;</code> Indicate whether use internal registry addr for the scanner to pull content or notType: <code>boolean</code> </p> <p><code>--disabled</code> <code>&lt;DISABLED&gt;</code> Indicate whether the registration is enabled or notType: <code>boolean</code> </p>"},{"location":"commands/scanner/#scanner-default","title":"scanner default","text":"<pre><code>scanner default &lt;SCANNER_ID&gt; [OPTIONS]\n</code></pre> <p>Set/unset default scanner.</p> <p>Arguments</p> <p><code>SCANNER_ID</code> ID of the scanner to set as default.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--unset</code>Unset the given scanner as default.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/scanner/#scanner-delete","title":"scanner delete","text":"<pre><code>scanner delete &lt;SCANNER_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a scanner.</p> <p>Arguments</p> <p><code>SCANNER_ID</code> ID of the scanner to delete.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/scanner/#scanner-get","title":"scanner get","text":"<pre><code>scanner get &lt;SCANNER_ID&gt;\n</code></pre> <p>Get a specific scanner.</p> <p>Arguments</p> <p><code>SCANNER_ID</code> ID of the scanner to retrieve.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/scanner/#scanner-list","title":"scanner list","text":"<pre><code>scanner list [OPTIONS]\n</code></pre> <p>List scanners.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/scanner/#scanner-update","title":"scanner update","text":"<pre><code>scanner update &lt;SCANNER_ID&gt; [OPTIONS]\n</code></pre> <p>Update a scanner.</p> <p>Arguments</p> <p><code>SCANNER_ID</code> ID of the scanner to update.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--name</code> <code>&lt;NAME&gt;</code> The name of this registrationType: <code>text</code> </p> <p><code>--url</code> <code>&lt;URL&gt;</code> A base URL of the scanner adapter.Type: <code>text</code> </p> <p><code>--description</code> <code>&lt;DESCRIPTION&gt;</code> An optional description of this registration.Type: <code>text</code> </p> <p><code>--auth</code> <code>&lt;AUTH&gt;</code> Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"Type: <code>text</code> </p> <p><code>--access-credential</code> <code>&lt;ACCESS_CREDENTIAL&gt;</code> An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.Type: <code>text</code> </p> <p><code>--skip-cert-verify</code> <code>&lt;SKIP_CERT_VERIFY&gt;</code> Indicate if skip the certificate verification when sending HTTP requestsType: <code>boolean</code> </p> <p><code>--use-internal-addr</code> <code>&lt;USE_INTERNAL_ADDR&gt;</code> Indicate whether use internal registry addr for the scanner to pull content or notType: <code>boolean</code> </p> <p><code>--disabled</code> <code>&lt;DISABLED&gt;</code> Indicate whether the registration is enabled or notType: <code>boolean</code> Default: <code>False</code></p>"},{"location":"commands/search/","title":"search","text":""},{"location":"commands/search/#search_1","title":"search","text":"<pre><code>search &lt;QUERY&gt;\n</code></pre> <p>Search for projects and repositories.</p> <p>Provides the same functionality as the search bar in the header of Web UI.</p> <p>Arguments</p> <p><code>QUERY</code> The search query.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/self_config/","title":"self config","text":""},{"location":"commands/self_config/#self-config-env","title":"self config env","text":"<pre><code>self config env [OPTIONS]\n</code></pre> <p>Show active Harbor CLI environment variables.</p> <p>Options</p> <p><code>-a</code>,  <code>--all</code>List all environment variables.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/self_config/#self-config-get","title":"self config get","text":"<pre><code>self config get &lt;KEY&gt; [OPTIONS]\n</code></pre> <p>Show the current CLI configuration.</p> <p>Arguments</p> <p><code>KEY</code> Specific config key to get value of.Type: <code>text</code> </p> <p>Options</p> <p><code>--toml</code>/<code>--no-toml</code>Show the current configuration in TOML format after setting the value. Overrides --format.Type: <code>boolean</code> (flag)Default: <code>True</code></p>"},{"location":"commands/self_config/#self-config-keys","title":"self config keys","text":"<pre><code>self config keys\n</code></pre> <p>Show all config keys that can be modified with <code>set</code>.</p>"},{"location":"commands/self_config/#self-config-path","title":"self config path","text":"<pre><code>self config path\n</code></pre> <p>Show the path to the current configuration file, or default path if no config is loaded.</p>"},{"location":"commands/self_config/#self-config-set","title":"self config set","text":"<pre><code>self config set &lt;KEY&gt; &lt;VALUE&gt; [OPTIONS]\n</code></pre> <p>Modify a CLI configuration value. Use <code>keys</code> to see all available keys.</p> <p>Arguments</p> <p><code>KEY</code> Key to set. Subkeys can be specified using dot notation. e.g. <code>'harbor.url'</code>Type: <code>text</code> Required: \u2705</p> <p><code>VALUE</code> Value to set.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--path</code> <code>&lt;PATH&gt;</code> Path to save configuration file.Type: <code>path</code> </p> <p><code>--session</code>Set the value in the current session only. The value will not be saved to disk. Only useful in REPL mode.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--show</code>/<code>--no-show</code>Show the current configuration after setting the value.Type: <code>boolean</code> (flag)Default: <code>False</code></p> <p><code>--toml</code>/<code>--no-toml</code>Render updated config as TOML in terminal if <code>--show</code> is set. Overrides global option <code>--format</code>.Type: <code>boolean</code> (flag)Default: <code>True</code></p>"},{"location":"commands/self_config/#self-config-write","title":"self config write","text":"<pre><code>self config write [OPTIONS]\n</code></pre> <p>Write the current session configuration to disk. Used to save changes made with <code>set --session</code> in REPL mode.</p> <p>Options</p> <p><code>--path</code> <code>&lt;PATH&gt;</code> Path to save configuration file. Uses current config file path if not specified.Type: <code>path</code> </p>"},{"location":"commands/self_keyring/","title":"self keyring","text":""},{"location":"commands/self_keyring/#self-keyring-status","title":"self keyring status","text":"<pre><code>self keyring status\n</code></pre> <p>Show the current keyring backend and its status.</p>"},{"location":"commands/system/","title":"system","text":""},{"location":"commands/system/#system-health","title":"system health","text":"<pre><code>system health\n</code></pre> <p>Get system health.</p>"},{"location":"commands/system/#system-info","title":"system info","text":"<pre><code>system info\n</code></pre> <p>Get information about the system.</p>"},{"location":"commands/system/#system-ping","title":"system ping","text":"<pre><code>system ping\n</code></pre> <p>Ping the harbor server. Returns the time it took to ping the server in milliseconds.</p>"},{"location":"commands/system/#system-statistics","title":"system statistics","text":"<pre><code>system statistics\n</code></pre> <p>Get statistics about the system.</p>"},{"location":"commands/system/#system-volumes","title":"system volumes","text":"<pre><code>system volumes\n</code></pre> <p>Get information about the system volumes.</p>"},{"location":"commands/tui/","title":"tui","text":""},{"location":"commands/tui/#tui_1","title":"tui","text":"<pre><code>tui\n</code></pre> <p>Start a TUI (text-based user interface).</p>"},{"location":"commands/user/","title":"user","text":""},{"location":"commands/user/#user-create","title":"user create","text":"<pre><code>user create &lt;USERNAME&gt; [OPTIONS]\n</code></pre> <p>Create a new user.</p> <p>Arguments</p> <p><code>USERNAME</code> Username of the user to create.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--password</code> <code>&lt;PASSWORD&gt;</code> Password for user.Type: <code>text</code> </p> <p><code>--email</code> <code>&lt;EMAIL&gt;</code> Email for user.Type: <code>text</code> </p> <p><code>--realname</code> <code>&lt;REALNAME&gt;</code> Real name of user. Enclose multiple names in quotes.Type: <code>text</code> </p> <p><code>--comment</code> <code>&lt;COMMENT&gt;</code> Comment for user.Type: <code>text</code> </p>"},{"location":"commands/user/#user-delete","title":"user delete","text":"<pre><code>user delete &lt;USERNAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a user.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/user/#user-get","title":"user get","text":"<pre><code>user get &lt;USERNAME_OR_ID&gt;\n</code></pre> <p>Get information about a specific user.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/user/#user-get-current","title":"user get-current","text":"<pre><code>user get-current\n</code></pre> <p>Get information about the currently authenticated user.</p>"},{"location":"commands/user/#user-get-current-permissions","title":"user get-current-permissions","text":"<pre><code>user get-current-permissions [OPTIONS]\n</code></pre> <p>Get permissions for the currently authenticated user.</p> <p>Options</p> <p><code>--scope</code> <code>&lt;SCOPE&gt;</code> Scope to get permissions for.Type: <code>text</code> </p> <p><code>--relative</code>Show permissions relative to scope.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/user/#user-list","title":"user list","text":"<pre><code>user list [OPTIONS]\n</code></pre> <p>List all users in the system.</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sort by field.Type: <code>choice</code> Choices: <code>id</code>, <code>username</code>, <code>name</code></p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/user/#user-search","title":"user search","text":"<pre><code>user search &lt;USERNAME&gt; [OPTIONS]\n</code></pre> <p>Search for users by username.</p> <p>Arguments</p> <p><code>USERNAME</code> Username or partial username to search for.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/user/#user-set-admin","title":"user set-admin","text":"<pre><code>user set-admin &lt;USERNAME_OR_ID&gt;\n</code></pre> <p>Sets a user as admin.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/user/#user-set-cli-secret","title":"user set-cli-secret","text":"<pre><code>user set-cli-secret &lt;USERNAME_OR_ID&gt; --secret &lt;SECRET&gt;\n</code></pre> <p>Set a user's CLI secret.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--secret</code> <code>&lt;SECRET&gt;</code> CLI secret to set for user. If omitted, a prompt will be shown.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/user/#user-set-password","title":"user set-password","text":"<pre><code>user set-password &lt;USERNAME_OR_ID&gt; --old-password &lt;OLD_PASSWORD&gt; --new-password &lt;NEW_PASSWORD&gt;\n</code></pre> <p>Set a user's password.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--old-password</code> <code>&lt;OLD_PASSWORD&gt;</code> Old password for user. Prompted if not provided.Type: <code>text</code> Required: \u2705</p> <p><code>--new-password</code> <code>&lt;NEW_PASSWORD&gt;</code> New password for user. Prompted if not provided.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/user/#user-unset-admin","title":"user unset-admin","text":"<pre><code>user unset-admin &lt;USERNAME_OR_ID&gt;\n</code></pre> <p>Unsets a user as admin.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/user/#user-update","title":"user update","text":"<pre><code>user update &lt;USERNAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>Update an existing user.</p> <p>Arguments</p> <p><code>USERNAME_OR_ID</code> Username or ID of the user to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--email</code> <code>&lt;EMAIL&gt;</code> New email for the user.Type: <code>text</code> </p> <p><code>--realname</code> <code>&lt;REALNAME&gt;</code> New real name for the user.Type: <code>text</code> </p> <p><code>--comment</code> <code>&lt;COMMENT&gt;</code> New comment for the user.Type: <code>text</code> </p>"},{"location":"commands/usergroup/","title":"usergroup","text":""},{"location":"commands/usergroup/#usergroup-create","title":"usergroup create","text":"<pre><code>usergroup create &lt;GROUP_NAME&gt; &lt;GROUP_TYPE&gt; [OPTIONS]\n</code></pre> <p>Create a user group.</p> <p>Arguments</p> <p><code>GROUP_NAME</code> Name of the group to create.Type: <code>text</code> Required: \u2705</p> <p><code>GROUP_TYPE</code> The type of user group to create.Type: <code>choice</code> Choices: <code>LDAP</code>, <code>HTTP</code>, <code>OIDC</code>Required: \u2705</p> <p>Options</p> <p><code>--ldap-group-dn</code> <code>&lt;LDAP_GROUP_DN&gt;</code> The DN of the LDAP group if group type is LDAPType: <code>text</code> </p>"},{"location":"commands/usergroup/#usergroup-delete","title":"usergroup delete","text":"<pre><code>usergroup delete &lt;GROUP_ID&gt; [OPTIONS]\n</code></pre> <p>Delete a user group.</p> <p>Arguments</p> <p><code>GROUP_ID</code> ID of the user group to delete.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--force</code>Force deletion without confirmation.Type: <code>boolean</code> (flag)Default: <code>False</code></p>"},{"location":"commands/usergroup/#usergroup-get","title":"usergroup get","text":"<pre><code>usergroup get &lt;GROUP_ID&gt;\n</code></pre> <p>Get a user group.</p> <p>Arguments</p> <p><code>GROUP_ID</code> ID of the group to fetch.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/usergroup/#usergroup-list","title":"usergroup list","text":"<pre><code>usergroup list [OPTIONS]\n</code></pre> <p>List user groups.</p> <p>Options</p> <p><code>--ldap-group-dn</code> <code>&lt;LDAP_GROUP_DN&gt;</code> LDAP group DN to filter by.Type: <code>text</code> </p> <p><code>--group-name</code> <code>&lt;GROUP_NAME&gt;</code> Group name to filter by (fuzzy matching).Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/usergroup/#usergroup-search","title":"usergroup search","text":"<pre><code>usergroup search &lt;GROUP_NAME&gt; [OPTIONS]\n</code></pre> <p>Search for user groups by name.</p> <p>Arguments</p> <p><code>GROUP_NAME</code> Name of group to search for.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p>"},{"location":"commands/usergroup/#usergroup-update","title":"usergroup update","text":"<pre><code>usergroup update &lt;GROUP_ID&gt; --name &lt;GROUP_NAME&gt;\n</code></pre> <p>Update a user group. Only the name can be updated currently.</p> <p>Arguments</p> <p><code>GROUP_ID</code> ID of the user group to update.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--name</code> <code>&lt;GROUP_NAME&gt;</code> New name for the user group.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/webhook/","title":"webhook","text":""},{"location":"commands/webhook/#webhook-events","title":"webhook events","text":"<pre><code>webhook events &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Get the supported webhook event types.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/webhook/#webhook-jobs","title":"webhook jobs","text":"<pre><code>webhook jobs &lt;PROJECT_NAME_OR_ID&gt; &lt;POLICY_ID&gt; [OPTIONS]\n</code></pre> <p>Get project webhook jobs for a given policy.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p><code>POLICY_ID</code> ID of the webhook policy to list jobs for.Type: <code>integer</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"commands/webhook/#webhook-triggers","title":"webhook triggers","text":"<pre><code>webhook triggers &lt;PROJECT_NAME_OR_ID&gt;\n</code></pre> <p>Get the last triggers for a webhook policy.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p>"},{"location":"commands/webhook_policy/","title":"webhook policy","text":""},{"location":"commands/webhook_policy/#webhook-policy-delete","title":"webhook policy delete","text":"<pre><code>webhook policy delete &lt;PROJECT_NAME_OR_ID&gt; --policy-id &lt;POLICY_ID&gt;\n</code></pre> <p>Delete a webhook policy.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--policy-id</code> <code>&lt;POLICY_ID&gt;</code> ID of the webhook policy to delete.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/webhook_policy/#webhook-policy-get","title":"webhook policy get","text":"<pre><code>webhook policy get &lt;PROJECT_NAME_OR_ID&gt; --policy-id &lt;POLICY_ID&gt;\n</code></pre> <p>Get a webhook policy.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--policy-id</code> <code>&lt;POLICY_ID&gt;</code> ID of the webhook policy to get.Type: <code>integer</code> Required: \u2705</p>"},{"location":"commands/webhook_policy/#webhook-policy-list","title":"webhook policy list","text":"<pre><code>webhook policy list &lt;PROJECT_NAME_OR_ID&gt; [OPTIONS]\n</code></pre> <p>List webhook policies.</p> <p>Arguments</p> <p><code>PROJECT_NAME_OR_ID</code> Name or ID of the project to use. Prefix with <code>'id:'</code> to specify an ID.Type: <code>text</code> Required: \u2705</p> <p>Options</p> <p><code>--query</code> <code>&lt;QUERY&gt;</code> Query parameters to filter the results.See harborapi docs for more information.Type: <code>text</code> </p> <p><code>--sort</code> <code>&lt;SORT&gt;</code> Sorting order of the results. Example: <code>'name,-id'</code> to sort by name ascending and id descending.Type: <code>text</code> </p> <p><code>--page</code> <code>&lt;PAGE&gt;</code> (Advanced) Page to begin fetching from.Type: <code>integer</code> Default: <code>1</code></p> <p><code>--page-size</code> <code>&lt;PAGE_SIZE&gt;</code> (Advanced) Results to fetch per API call.Type: <code>integer</code> Default: <code>10</code></p> <p><code>--limit</code> <code>&lt;LIMIT&gt;</code> Maximum number of results to fetch.Type: <code>integer</code> </p>"},{"location":"configuration/auth/","title":"Authentication","text":"<p>Harbor CLI supports multiple authentication methods. The application will try to authenticate using the first method that is available. These methods are:</p> <ul> <li>Username and password</li> <li>Robot Credentials File</li> <li>Basicauth (deprecated)</li> </ul>"},{"location":"configuration/auth/#username-and-password","title":"Username and password","text":"<p>User password is looked up in the following order:</p> <ol> <li><code>--secret</code> option</li> <li>Environment variable</li> <li>Keyring</li> <li>Configuration file</li> </ol> <p>If the user password is not found in any of these locations and no other authentication methods have been provided, the application will prompt for username and password when executing commands that require authentication.</p>"},{"location":"configuration/auth/#-secret-option","title":"<code>--secret</code> option","text":"<p>A password can be passed in using the <code>--secret</code> option:</p> <pre><code>harbor --secret &lt;password&gt; &lt;command&gt;\n</code></pre>"},{"location":"configuration/auth/#environment-variable","title":"Environment variable","text":"<p>The password can also be provided by setting the environment variable <code>HARBOR_CLI_SECRET</code>:</p> <pre><code>HARBOR_CLI_SECRET=&lt;secret&gt; harbor &lt;command&gt;\n</code></pre>"},{"location":"configuration/auth/#keyring","title":"Keyring","text":"<p>Harbor CLI has ability to store credentials in your system's keyring via the keyring library.</p> <p>Running <code>harbor init</code> will prompt you for your credentials and store the password in your system's keyring if it is available. The username is always stored in the configuration file.</p> <pre><code>% harbor init\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2728 Harbor CLI Configuration Wizard \ud83e\uddd9 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n? Configure harbor settings? [y/n] (n): y\n\n\ud83d\udea2 Harbor Settings\n? Harbor API URL (e.g. https://harbor.example.com/api/v2.0): https://demo.goharbor.io/api/v2.0\n? Authentication method ([u]sername/password, [b]asic auth, [f]ile, [s]kip) (s): u\n? Harbor username: test-user\n? Harbor secret:\n! Added password to keyring.\n</code></pre> <p>Multiple passwords can be stored in the keyring. Changing the username in the configuration file will cause the application to retrieve the password for the given username from the keyring, or prompt for a new one if it's not found.</p> <p>Note</p> <p>In order to store the credentials in your system's keyring, extra configuration might be required. See the installation instructions for your platform to configure keyring.</p>"},{"location":"configuration/auth/#configuration-file","title":"Configuration file","text":"<p>If the keyring cannot be used, the credentials will be stored in the configuration file. Similar to the keyring setup, running <code>harbor init</code> will prompt you for your credentials and store them in the configuration file.</p> <pre><code>% harbor init\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2728 Harbor CLI Configuration Wizard \ud83e\uddd9 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n? Configure harbor settings? [y/n] (n): y\n\n\ud83d\udea2 Harbor Settings\n? Harbor API URL (e.g. https://harbor.example.com/api/v2.0): https://demo.goharbor.io/api/v2.0\n? Authentication method ([u]sername/password, [b]asic auth, [f]ile, [s]kip) (u): u\n? Harbor username: test-user\n? Harbor secret:\n</code></pre>"},{"location":"configuration/auth/#robot-credentials-file","title":"Robot credentials file","text":"<p>Instead of using a personal Harbor account, a Robot account can be used instead. Robot accounts come in two flavors: Project Robot Accounts and System Robot Accounts. After creating your robot account, you will be prompted to download a JSON file containing the credentials for the account. This file can be specified when launching Harbor CLI by using the  <code>--credentials-file</code> option:</p> <pre><code>harbor --credentials-file /path/to/robot/credentials.json &lt;command&gt;\n</code></pre> <p>Or by setting the environment variable <code>HARBOR_CLI_CREDENTIALS_FILE</code>:</p> <pre><code>HARBOR_CLI_CREDENTIALS_FILE=/path/to/robot/credentials.json harbor &lt;command&gt;\n</code></pre> <p>Or configured in the configuration file:</p> <pre><code>[harbor]\ncredentials_file = \"/path/to/robot/credentials.json\"\n</code></pre> <p>Warning</p> <p>Ensure that the <code>username</code> and <code>secret</code> config keys and <code>HARBOR_CLI_USERNAME</code> and <code>HARBOR_CLI_SECRET</code> environment variables are empty or unset, otherwise the application will try to use username/password authentication instead of the credentials file.</p>"},{"location":"configuration/auth/#basicauth-deprecated","title":"Basicauth (deprecated)","text":"<p>The application also supports supplying credentials as a BASE64-encoded string of <code>username:secret</code> using the <code>--basicauth</code> option:</p> <pre><code>harbor --basicauth &lt;basicauth&gt; &lt;command&gt;\n</code></pre> <p>Or by setting the environment variable <code>HARBOR_CLI_BASICAUTH</code>:</p> <pre><code>HARBOR_CLI_BASICAUTH=&lt;basicauth&gt; harbor &lt;command&gt;\n</code></pre> <p>Or by setting the <code>harbor.basicauth</code> config key in the configuration file:</p> <pre><code>[harbor]\nbasicauth = \"ZG9udDp1c2V0aGlz\"\n</code></pre> <p>Warning</p> <p>This method is deprecated and will be removed in a future release. It does not improve security in any way over username/password authentication, and is only provided as an implementation detail for the Harbor API.</p>"},{"location":"configuration/config-file/","title":"Configuration file","text":"<p>This section goes over every config category in detail. It is not meant to be read from start to finish, but rather to be used as a reference when configuring the application.</p>"},{"location":"configuration/config-file/#sample-configuration-file","title":"Sample configuration file","text":"<pre><code>[harbor]\nurl = \"https://demo.goharbor.io/api/v2.0\"\nusername = \"admin\"\nsecret = \"password\"\nbasicauth = \"\"\ncredentials_file = \"\"\nvalidate_data = true\nraw_mode = false\nverify_ssl = true\nkeyring = false\n\n[harbor.retry]\nenabled = true\nmax_tries = 5\nmax_time = 10.0\n\n[general]\nconfirm_deletion = true\nconfirm_enumeration = true\nwarnings = true\n\n[output]\nformat = \"table\"\npaging = false\npager = \"\"\n\n[output.table]\ndescription = false\nmax_depth = 0\ncompact = true\n\n[output.table.style]\ntitle = \"\"\nheader = \"bold green\"\nrows = \"\"\nborder = \"\"\nfooter = \"\"\ncaption = \"\"\nexpand = true\nshow_header = true\nbool_emoji = false\n\n[output.JSON]\nindent = 2\nsort_keys = false\n\n[repl]\nhistory = true\nhistory_file = \"/path/to/history/file\"\n\n[cache]\nenabled = false\nttl = 300\n\n[logging]\nenabled = true\nlevel = \"WARNING\"\ndirectory = \"/path/to/logdir\"\nfilename = \"harbor-cli.log\"\ndatetime_format = \"%Y-%m-%d\"\nretention = 30\n</code></pre> <p>Warning</p> <p>The name of the <code>output.JSON</code> table is case-sensitive. The reason this name is upper-case is due to a conflict with the built-in Pydantic <code>json</code> method. This will hopefully be fixed in a future release.</p>"},{"location":"configuration/config-file/#configuration-file-structure","title":"Configuration file structure","text":"<p>The configuration file is structured as a TOML file. The TOML file is divided into tables, which are defined by square brackets. The tables are then divided into key-value pairs, where the key is the name of the setting, and the value is the value of the setting.</p> <p>The configuration file is divided into the following tables:</p> <ul> <li>harbor</li> <li>harbor.retry</li> <li>general</li> <li>output</li> <li>output.table</li> <li>output.table.style</li> <li>output.JSON</li> <li>repl</li> <li>logging</li> </ul>"},{"location":"configuration/config-file/#harbor","title":"<code>harbor</code>","text":"<p>The <code>harbor</code> table contains settings related to your Harbor instance. There are 3 main ways of authenticating with Harbor:</p> <ol> <li>Using a username and password</li> <li>Using Base64-encoded basic access credentials (<code>username:password</code> in Base64). This is not safer than using a username and password, as it only obscures the credentials, but does not encrypt them.</li> <li>Using a Harbor robot account with a JSON credentials file. See Create Project Robot Accounts and Create System Robot Accounts for more information on how to create robot accounts. Robot accounts can also be created through the API with the help of <code>harborapi</code>, as described in this guide.</li> </ol> <p>The order in which they are specified here is also the order they are evaluated. If multiple methods are specified, the first one that is valid will be used.</p>"},{"location":"configuration/config-file/#harborurl","title":"<code>harbor.url</code>","text":"<p>Fully qualified domain name of the Harbor instance. Must include the full API path (e.g. <code>/api/v2.0</code>). <pre><code>```toml\n[harbor]\nurl = \"https://demo.goharbor.io/api/v2.0\"\n</code></pre></p>"},{"location":"configuration/config-file/#harborusername","title":"<code>harbor.username</code>","text":"<p>The username to use when authenticating with Harbor. When <code>username</code> is specified, <code>secret</code> must also be specified.</p> <pre><code>[harbor]\nusername = \"admin\"\n</code></pre>"},{"location":"configuration/config-file/#harborsecret","title":"<code>harbor.secret</code>","text":"<p>The secret (password) to use when authentication with a username. When <code>secret</code> is specified, <code>username</code> must also be specified.</p> <pre><code>[harbor]\nsecret = \"password\"\n</code></pre>"},{"location":"configuration/config-file/#harborbasicauth","title":"<code>harbor.basicauth</code>","text":"<p>The Base64-encoded basic access credentials to use when authenticating with Harbor. When <code>basicauth</code> is specified, <code>username</code> and <code>secret</code> must not be specified.</p> <pre><code>[harbor]\nbasicauth=\"dXNlcm5hbWU6cGFzc3dvcmQ=\"\n</code></pre>"},{"location":"configuration/config-file/#harborcredentials_file","title":"<code>harbor.credentials_file</code>","text":"<p>The path to the JSON credentials file to use when authenticating. Typically obtained when creating a Robot Account. When <code>credentials_file</code> is specified, <code>username</code> and <code>secret</code> and <code>basicauth</code> must not be specified.</p> <pre><code>[harbor]\ncredentials_file = \"/path/to/credentials.json\"\n</code></pre>"},{"location":"configuration/config-file/#harborvalidate_data","title":"<code>harbor.validate_data</code>","text":"<p>Controls whether or not the harborapi library  validates the data returned by the Harbor API.  Forces the output format to <code>json</code> if <code>false</code>. Not guaranteed to work with all commands. The default is <code>true</code>.</p> <pre><code>[harbor]\nvalidate_data = true\n</code></pre>"},{"location":"configuration/config-file/#harborraw_mode","title":"<code>harbor.raw_mode</code>","text":"<p>Controls whether or not the data from the API should be processed by the harborapi library before being returned. Overrides <code>harbor.validate_data</code>. Ignores output mode. Not guaranteed to work with all commands. The default is <code>false</code>.</p> <pre><code>[harbor]\nraw_mode = false\n</code></pre>"},{"location":"configuration/config-file/#harborverify_ssl","title":"<code>harbor.verify_ssl</code>","text":"<p>Control verification of the SSL certificate of the Harbor instance. The default is <code>true</code>.</p> <pre><code>[harbor]\nverify_ssl = true\n</code></pre> <p>Info</p> <p>In the future, this option might be expanded to allow for more fine-grained control of the SSL verification.</p>"},{"location":"configuration/config-file/#harborkeyring","title":"<code>harbor.keyring</code>","text":"<p>Retrieve password from keyring. This value is automatically set by the configuration wizard. See Authentication for more information. The default is <code>false</code>.</p> <pre><code>[harbor]\nkeyring = true\n</code></pre>"},{"location":"configuration/config-file/#harborretry","title":"<code>harbor.retry</code>","text":"<p>The <code>harbor.retry</code> table contains settings related to retrying failed HTTP requests to the Harbor API.</p>"},{"location":"configuration/config-file/#harborretryenabled","title":"<code>harbor.retry.enabled</code>","text":"<p>Enable retrying of failed requests. By default <code>true</code>.</p> <pre><code>[harbor.retry]\nenabled = true\n</code></pre>"},{"location":"configuration/config-file/#harborretrymax_tries","title":"<code>harbor.retry.max_tries</code>","text":"<p>Maximum number of times to retry failed requests. By default <code>5</code>.</p> <pre><code>[harbor.retry]\nmax_tries = 5\n</code></pre>"},{"location":"configuration/config-file/#harborretrymax_time","title":"<code>harbor.retry.max_time</code>","text":"<p>Maximum time in seconds to retry failed requests. By default <code>10</code>.</p> <pre><code>[harbor.retry]\nmax_time = 10\n</code></pre>"},{"location":"configuration/config-file/#general","title":"<code>general</code>","text":"<p>The <code>general</code> table contains general CLI settings that don't fit into any other categories.</p>"},{"location":"configuration/config-file/#generalconfirm_enumeration","title":"<code>general.confirm_enumeration</code>","text":"<p>Show a confirmation prompt when enumerating resources (e.g. <code>harbor auditlog list</code>) without a limit and/or query. The default is <code>true</code>.</p> <p>Only affects the following commands:</p> <ul> <li><code>artifact list</code></li> <li><code>auditlog list</code></li> <li><code>replication list</code></li> <li><code>gc jobs</code></li> <li><code>project logs</code></li> </ul> <pre><code>[general]\nconfirm_enumeration = true\n</code></pre>"},{"location":"configuration/config-file/#generalconfirm_deletion","title":"<code>general.confirm_deletion</code>","text":"<p>Whether or not to show a confirmation prompt when deleting resources unless <code>--force</code> is passed in. The default is <code>true</code>.</p> <pre><code>[general]\nconfirm_deletion = true\n</code></pre>"},{"location":"configuration/config-file/#generalwarnings","title":"<code>general.warnings</code>","text":"<p>Show warning messages in terminal. Warnings are always logged regardless of this option. The default is <code>true</code>.</p> <pre><code>[general]\nwarnings = true\n</code></pre>"},{"location":"configuration/config-file/#output","title":"<code>output</code>","text":"<p>The <code>output</code> table contains settings related to the output of Harbor CLI.</p>"},{"location":"configuration/config-file/#outputformat","title":"<code>output.format</code>","text":"<p>Harbor CLI currently supports 2 different output formats:</p> <ul> <li> <p><code>table</code></p> </li> <li> <p><code>json</code></p> </li> </ul> <p>See Formats for more information on the different output formats.</p> <pre><code>[output]\nformat = \"table\"\n</code></pre>"},{"location":"configuration/config-file/#outputpaging","title":"<code>output.paging</code>","text":"<p>Show the output in a pager (less, etc.). The default is <code>false</code>.</p> <pre><code>[output]\npaging = false\n</code></pre>"},{"location":"configuration/config-file/#outputpager","title":"<code>output.pager</code>","text":"<p>The pager to use. No value means that the default Rich pager will be used. Has no effect if <code>output.paging</code> is <code>false</code>. Equivalent to setting the <code>MANPAGER</code> and/or <code>PAGER</code> environment variables.</p> <p>Can be used to redirect output to any application you want, not just pagers, for example: <code>output.pager = \"code -\"</code> to redirect printing of results to VS Code.</p> <pre><code>[output]\npager = \"less -r\" # omit to use default\n</code></pre>"},{"location":"configuration/config-file/#outputtable","title":"<code>output.table</code>","text":"<p>The <code>output.table</code> table contains settings related to the <code>table</code> output format.</p> <p>See Formats: Table for more information.</p>"},{"location":"configuration/config-file/#outputtabledescription","title":"<code>output.table.description</code>","text":"<p>Whether or not to include the descriptions of each value in the output tables. Mutually exclusive with <code>output.table.compact</code>. The default is <code>false</code>.</p> <pre><code>[output.table]\ndescription = false\n</code></pre>"},{"location":"configuration/config-file/#outputtablecompact","title":"<code>output.table.compact</code>","text":"<p>Whether or not to use compact output tables. Mutually exclusive with <code>output.table.description</code>. The default is <code>True</code>. Takes precedence over <code>output.table.description</code> if both are enabled.</p> <pre><code>[output.table]\ncompact = false\n</code></pre> <p>See Formats: Compact Tables for more information.</p>"},{"location":"configuration/config-file/#outputtablestyle","title":"<code>output.table.style</code>","text":"<p>Configuration for styling of Rich tables. Largely follows style options of Rich tables. Styles are specified as Rich styles. A list of colors can be found here.</p>"},{"location":"configuration/config-file/#outputtablestyletitle","title":"<code>output.table.style.title</code>","text":"<p>Style of table titles.</p> <pre><code>[output.table.style]\ntitle = \"bold green\"\n</code></pre>"},{"location":"configuration/config-file/#outputtablestyleheader","title":"<code>output.table.style.header</code>","text":"<p>Style of table headers.</p> <pre><code>[output.table.style]\nheader = \"bold green\"\n</code></pre>"},{"location":"configuration/config-file/#outputtablestylerows","title":"<code>output.table.style.rows</code>","text":"<p>Style of table rows. Can be a list of two different styles, one for even rows and one for odd rows, or a string specifying a single style for all rows.</p> <p>To style alternating rows only, provide a list where one of the elements is an empty string. First element for odd rows, second element for even rows.</p> <pre><code>[output.table.style]\nrows = \"black on white\"\n# or (same as above)\nrows = [\"black on white\", \"white on black\"]\n# or (odd rows only)\nrows = [\"black on white\", \"\"]\n# or (even rows only)\nrows = [\"\", \"black on white\"]\n</code></pre>"},{"location":"configuration/config-file/#outputtablestyleborder","title":"<code>output.table.style.border</code>","text":"<p>Styling of border characters.</p> <pre><code>[output.table.style]\nborder = \"bold green\"\n</code></pre>"},{"location":"configuration/config-file/#outputtablestylefooter","title":"<code>output.table.style.footer</code>","text":"<p>Styling of table footers.</p> <pre><code>[output.table.style]\nfooter = \"bold green\"\n</code></pre>"},{"location":"configuration/config-file/#outputtablestylecaption","title":"<code>output.table.style.caption</code>","text":"<p>Styling of table captions.</p> <pre><code>[output.table.style]\ncaption = \"bold green\"\n</code></pre>"},{"location":"configuration/config-file/#outputtablestyleexpand","title":"<code>output.table.style.expand</code>","text":"<p>Expand table to fill terminal width.</p> <pre><code>[output.table.style]\nexpand = true\n</code></pre>"},{"location":"configuration/config-file/#outputtablestyleshow_header","title":"<code>output.table.style.show_header</code>","text":"<p>Display a header over each table. Typically states the type of resource being displayed.</p> <pre><code>[output.table.style]\nshow_header = true\n</code></pre>"},{"location":"configuration/config-file/#outputtablestylebool_emoji","title":"<code>output.table.style.bool_emoji</code>","text":"<p>Render booleans as emojis. The default is <code>false</code>.</p> <pre><code>[output.table.style]\nbool_emoji = false\n</code></pre>"},{"location":"configuration/config-file/#outputjson","title":"<code>output.JSON</code>","text":"<p>The <code>output.JSON</code> table contains settings related to the <code>JSON</code> output format.</p> <p>See Formats: JSON for more information.</p>"},{"location":"configuration/config-file/#outputjsonindent","title":"<code>output.JSON.indent</code>","text":"<p>Number of spaces to use for each level of indentation. The default is <code>2</code>.</p> <pre><code>[output.JSON]\nindent = 2\n</code></pre>"},{"location":"configuration/config-file/#outputjsonsort_keys","title":"<code>output.JSON.sort_keys</code>","text":"<p>Sort JSON keys before printing. The default is <code>false</code>.</p> <pre><code>[output.JSON]\nsort_keys = false\n</code></pre>"},{"location":"configuration/config-file/#repl","title":"<code>repl</code>","text":"<p>The <code>repl</code> table contains settings related to the REPL.</p>"},{"location":"configuration/config-file/#replhistory","title":"<code>repl.history</code>","text":"<p>Whether or not to enable command history in the REPL. The default is <code>true</code>.</p> <pre><code>[repl]\nhistory = true\n</code></pre>"},{"location":"configuration/config-file/#replhistory_file","title":"<code>repl.history_file</code>","text":"<p>Custom path for the command history file. The default path is based on OS, and is determined by platformdirs.user_data_dir.</p> <pre><code>[repl]\nhistory_file = \"/path/to/history_file\"\n</code></pre>"},{"location":"configuration/config-file/#logging","title":"<code>logging</code>","text":"<p>The <code>logging</code> table contains settings related to configuring logging. Logs are exclusively written to a log file and never displayed in the terminal. The default log directory is determined by platformdirs.user_log_dir.</p>"},{"location":"configuration/config-file/#loggingenabled","title":"<code>logging.enabled</code>","text":"<p>Whether or not to enable logging. The default is <code>true</code>.</p> <pre><code>[logging]\nenabled = true\n</code></pre>"},{"location":"configuration/config-file/#logginglevel","title":"<code>logging.level</code>","text":"<p>The logging level to use. The default is <code>WARNING</code>. The available logging levels are: <code>-</code>DEBUG<code>-</code>INFO<code>-</code>WARNING<code>-</code>ERROR<code>-</code>CRITICAL`</p> <pre><code>[logging]\nlevel = \"WARNING\"\n</code></pre>"},{"location":"configuration/config-file/#loggingdirectory","title":"<code>logging.directory</code>","text":"<p>Custom directory to store logs in. Defaults to application log directory determined by platformdirs.user_log_dir.</p> <pre><code>[logging]\ndirectory = \"/path/to/logdir\"\n</code></pre>"},{"location":"configuration/config-file/#loggingfilename","title":"<code>logging.filename</code>","text":"<p>Filename to use for log files. If <code>{dt}</code> is included in the filename, it will be replaced with the current time. The default is <code>harbor_cli.log</code> (no automatic date and/or time).</p> <pre><code>[logging]\nfilename = \"harbor_cli_{dt}.log\"\n</code></pre>"},{"location":"configuration/config-file/#loggingdatetime_format","title":"<code>logging.datetime_format</code>","text":"<p>The datetime format that is used when automatically timing log files. Defaults to <code>\"%Y-%m-%d\"</code>. See Python's strftime documentation for more information on how to format the time.</p> <pre><code>[logging]\ndatetime_format = \"%Y-%m-%d\"\n</code></pre>"},{"location":"configuration/config-file/#loggingretention","title":"<code>logging.retention</code>","text":"<p>Number of days to retain log files. Defaults to 30 days.</p> <pre><code>[logging]\nretention = 30\n</code></pre>"},{"location":"configuration/formats/","title":"Formats","text":""},{"location":"configuration/formats/#table-table","title":"Table: <code>table</code>","text":"<p>By default, the application renders result as tables. These tables try to display the most important information in a concise and readable format. The compact tables use plain English and format data such as size (bytes) to the appropriate units to make the information more easily digestible.</p> config.toml<pre><code>[output]\nformat = \"table\"\n</code></pre> CLI<pre><code>harbor --format table system volumes\n</code></pre> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Total Capacity \u2503 Free Space \u2503 Used Space \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 912.47 GB      \u2502 102.38 GB  \u2502 810.09 GB  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>There are over 150 different data structures in the Harbor API specification, and not all of them have been given a custom compact table representation in the application yet. In these cases, the application falls back on more crude auto-generated tables, which are described in the next section.</p>"},{"location":"configuration/formats/#auto-generated-tables","title":"Auto-generated tables","text":"<p>Not all models in the API have a custom compact table representation, and the application will fall back on creating auto-generated tables for these. The auto-generated tables always reflect the actual JSON structure of the data, and therefore renders each key-value pair as separate rows. Nested models are rendered as separate tables with a reference to the nested model through its name in the parent table. Nesting level is indicated by a table's color-coded, dot-separated title.</p> config.toml<pre><code>[output]\nformat = \"table\"\n\n[output.table]\ncompact = false\n</code></pre> CLI<pre><code>harbor --format table --no-table-compact system volumes\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 SystemInfo                                                                   \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field           \u2503 Value                                                  \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 storage         \u2502 See below (SystemInfo.storage)                         \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 SystemInfo.storage                                                           \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field                   \u2503 Value                                          \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 total                   \u2502 912470835200                                   \u2502 \u2502\n\u2502 \u2502 free                    \u2502 102376894464                                   \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Info</p> <p>The <code>SystemInfo</code> table contains a nested model under the key <code>storage</code>. This name is used as the title of the table representing the nested model.</p> <p>In the future, we aim to have custom compact table representations for all models in the API. However, if you prefer the auto-generated tables, you can always disable the compact tables by setting <code>ouput.table.compact</code> to <code>false</code> in your configuration file or by passing in <code>--no-table-compact</code> to the CLI.</p>"},{"location":"configuration/formats/#json-json","title":"JSON: <code>json</code>","text":"<p>Render the data from the API as JSON. This emulates the presentation of the raw response from the API. The output is formatted with one value per line and has a default indendation of 2 spaces.</p> config.toml<pre><code>[output]\nformat = \"json\"\n\n[output.JSON]\nindent = 2\n</code></pre> CLI<pre><code>harbor --format json system volumes\n</code></pre> <pre><code>{\n  \"storage\": [\n    {\n      \"total\": 912470835200,\n      \"free\": 102376873984\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration/introduction/","title":"Create a config","text":""},{"location":"configuration/introduction/#configuration-wizard","title":"Configuration wizard","text":"<p>Harbor CLI is configured via a TOML configuration file which can be created prior to running for the first time by running the <code>init</code> command:</p> <pre><code>harbor init\n</code></pre> <p>This will create a config file at <code>~/.config/harbor-cli/config.toml</code><sup>1</sup>, and then run the interactive configuration wizard. Use the <code>--no-wizard</code> flag to skip the configuration wizard.</p> <p>You can always find the location of the current configuration file by running the <code>cli-config path</code> command:</p> <pre><code>harbor cli-config path\n</code></pre> <p>Info</p> <p><code>cli-config path</code> will show the default config file location if no config file is found.</p>"},{"location":"configuration/introduction/#alternative-config-location","title":"Alternative config location","text":"<p>To create a configuration file at a location different than the default one, use the <code>--path</code> option:</p> <pre><code>harbor init --path /path/to/config.toml\n</code></pre> <p>The custom file path can then be used when running the application with the <code>--config</code> option:</p> <pre><code>harbor --config /path/to/config.toml &lt;command&gt;\n</code></pre>"},{"location":"configuration/introduction/#sample-config","title":"Sample config","text":"<p>To print a sample configuration file, use the <code>sample-config</code> command:</p> <pre><code>harbor sample-config &gt; /path/to/config.toml\n</code></pre> <p>You can combine <code>sample-config</code> with <code>cli-config path</code> to create a config file at the default location with the sample configuration. This is a non-interactive alternative to using the <code>init</code> command:</p> <pre><code>harbor sample-config &gt; $(harbor cli-config path)\n</code></pre> <p>Edit the file to suit your needs:</p> <pre><code>code $(harbor cli-config path)\n</code></pre> <p>In general, it's better to use <code>init</code> to create and (re-)configure a configuration file, as it will ensure that the file is valid and that all required fields are present.</p> <ol> <li> <p>This project uses platformdirs. See the <code>user_config_dir</code> example in the official platformdirs examples for up-to-date information on what this resolves to. At the time of writing, this is <code>~/.config/harbor-cli/config.toml</code> on Linux, <code>~/Library/Preferences/harbor-cli/config.toml</code> on macOS, and <code>%LOCALAPPDATA%\\harbor-cli\\config.toml</code> on Windows.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/","title":"Reference","text":"<ul> <li>harbor_cli.config</li> <li>harbor_cli.dirs</li> <li>harbor_cli.exceptions</li> <li>harbor_cli.format</li> <li>harbor_cli.harbor</li> <li>harbor_cli.logs</li> <li>harbor_cli.main</li> <li>harbor_cli.state</li> <li>harbor_cli.utils</li> </ul>"},{"location":"reference/config/","title":"Config","text":""},{"location":"reference/config/#harbor_cli.config","title":"<code>harbor_cli.config</code>","text":""},{"location":"reference/config/#harbor_cli.config-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.DEFAULT_CONFIG_FILE","title":"<code>DEFAULT_CONFIG_FILE = CONFIG_DIR / 'config.toml'</code>  <code>module-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.DEFAULT_HISTORY_FILE","title":"<code>DEFAULT_HISTORY_FILE = DATA_DIR / 'history'</code>  <code>module-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.ENV_VAR_PREFIX","title":"<code>ENV_VAR_PREFIX = 'HARBOR_CLI_'</code>  <code>module-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config-classes","title":"Classes","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar","title":"<code>EnvVar</code>","text":"<p>               Bases: <code>StrEnum</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class EnvVar(StrEnum):\n    CONFIG = env_var(\"config\")\n    URL = env_var(\"url\")\n    USERNAME = env_var(\"username\")\n    SECRET = env_var(\"secret\")\n    BASICAUTH = env_var(\"basicauth\")\n    CREDENTIALS_FILE = env_var(\"credentials_file\")\n    HARBOR_VALIDATE_DATA = env_var(\"harbor_validate_data\")\n    HARBOR_RAW_MODE = env_var(\"harbor_raw_mode\")\n    HARBOR_VERIFY_SSL = env_var(\"harbor_verify_ssl\")\n    HARBOR_RETRY_ENABLED = env_var(\"harbor_retry_enabled\")\n    HARBOR_RETRY_MAX_TRIES = env_var(\"harbor_retry_max_tries\")\n    HARBOR_RETRY_MAX_TIME = env_var(\"harbor_retry_max_time\")\n    TABLE_DESCRIPTION = env_var(\"table_description\")\n    TABLE_MAX_DEPTH = env_var(\"table_max_depth\")\n    TABLE_COMPACT = env_var(\"table_compact\")\n    JSON_INDENT = env_var(\"json_indent\")\n    JSON_SORT_KEYS = env_var(\"json_sort_keys\")\n    OUTPUT_FORMAT = env_var(\"output_format\")\n    PAGING = env_var(\"paging\")\n    PAGER = env_var(\"pager\")\n    CONFIRM_DELETION = env_var(\"confirm_deletion\")\n    CONFIRM_ENUMERATION = env_var(\"confirm_enumeration\")\n    WARNINGS = env_var(\"warnings\")\n\n    def __str__(self) -&gt; str:\n        return self.value\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.EnvVar-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.CONFIG","title":"<code>CONFIG = env_var('config')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.URL","title":"<code>URL = env_var('url')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.USERNAME","title":"<code>USERNAME = env_var('username')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.SECRET","title":"<code>SECRET = env_var('secret')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.BASICAUTH","title":"<code>BASICAUTH = env_var('basicauth')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.CREDENTIALS_FILE","title":"<code>CREDENTIALS_FILE = env_var('credentials_file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_VALIDATE_DATA","title":"<code>HARBOR_VALIDATE_DATA = env_var('harbor_validate_data')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_RAW_MODE","title":"<code>HARBOR_RAW_MODE = env_var('harbor_raw_mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_VERIFY_SSL","title":"<code>HARBOR_VERIFY_SSL = env_var('harbor_verify_ssl')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_RETRY_ENABLED","title":"<code>HARBOR_RETRY_ENABLED = env_var('harbor_retry_enabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_RETRY_MAX_TRIES","title":"<code>HARBOR_RETRY_MAX_TRIES = env_var('harbor_retry_max_tries')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.HARBOR_RETRY_MAX_TIME","title":"<code>HARBOR_RETRY_MAX_TIME = env_var('harbor_retry_max_time')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.TABLE_DESCRIPTION","title":"<code>TABLE_DESCRIPTION = env_var('table_description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.TABLE_MAX_DEPTH","title":"<code>TABLE_MAX_DEPTH = env_var('table_max_depth')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.TABLE_COMPACT","title":"<code>TABLE_COMPACT = env_var('table_compact')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.JSON_INDENT","title":"<code>JSON_INDENT = env_var('json_indent')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.JSON_SORT_KEYS","title":"<code>JSON_SORT_KEYS = env_var('json_sort_keys')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.OUTPUT_FORMAT","title":"<code>OUTPUT_FORMAT = env_var('output_format')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.PAGING","title":"<code>PAGING = env_var('paging')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.PAGER","title":"<code>PAGER = env_var('pager')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.CONFIRM_DELETION","title":"<code>CONFIRM_DELETION = env_var('confirm_deletion')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.CONFIRM_ENUMERATION","title":"<code>CONFIRM_ENUMERATION = env_var('confirm_enumeration')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.WARNINGS","title":"<code>WARNINGS = env_var('warnings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.EnvVar.__str__","title":"<code>__str__() -&gt; str</code>","text":"Source code in <code>harbor_cli/config.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.BaseModel","title":"<code>BaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model shared by all config models.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>class BaseModel(HarborBaseModel):\n    \"\"\"Base model shared by all config models.\"\"\"\n\n    # https://pydantic-docs.helpmanual.io/usage/model_config/#change-behaviour-globally\n\n    @model_validator(mode=\"before\")\n    @classmethod\n    def _pre_root_validator(cls, values: dict[str, Any]) -&gt; dict[str, Any]:\n        \"\"\"Checks for unknown fields and logs a warning if any are found.\n\n        Since we use `extra = \"allow\"`, it can be useful to check for unknown\n        fields and log a warning if any are found, otherwise they will be\n        silently ignored.\n\n        See: Config class below.\n        \"\"\"\n        for key in values:\n            if key not in cls.model_fields:\n                logger.warning(\n                    \"%s: Got unknown config key '%s'.\",\n                    getattr(cls, \"__name__\", str(cls)),\n                    key,\n                )\n        return values\n\n    model_config = ConfigDict(extra=\"allow\", validate_assignment=True)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.BaseModel-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.BaseModel.model_config","title":"<code>model_config = ConfigDict(extra='allow', validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs","title":"<code>HarborCredentialsKwargs</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class HarborCredentialsKwargs(TypedDict):\n    url: str\n    username: str\n    secret: str\n    basicauth: str\n    credentials_file: Optional[Path]\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs.username","title":"<code>username: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs.secret","title":"<code>secret: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs.basicauth","title":"<code>basicauth: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCredentialsKwargs.credentials_file","title":"<code>credentials_file: Optional[Path]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.RetrySettings","title":"<code>RetrySettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Retry settings for API requests.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>class RetrySettings(BaseModel):\n    \"\"\"Retry settings for API requests.\"\"\"\n\n    enabled: bool = True\n    max_tries: int = 5\n    max_time: float = 10.0\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.RetrySettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.RetrySettings.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.RetrySettings.max_tries","title":"<code>max_tries: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.RetrySettings.max_time","title":"<code>max_time: float = 10.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings","title":"<code>HarborSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class HarborSettings(BaseModel):\n    url: str = \"\"\n    username: str = \"\"\n    secret: SecretStr = SecretStr(\"\")\n    basicauth: SecretStr = SecretStr(\"\")\n    credentials_file: Optional[Path] = None\n    validate_data: bool = Field(default=True, alias=\"validate\")\n    raw_mode: bool = False\n    verify_ssl: bool = True\n    retry: RetrySettings = RetrySettings()\n    keyring: bool = False\n\n    @field_validator(\"credentials_file\", mode=\"before\")\n    @classmethod\n    def _empty_string_is_none(cls, v: Any) -&gt; Any:\n        \"\"\"We can't serialize None to TOML, so we convert it to an empty string.\n        However, passing an empty string to Path() will return the current working\n        directory, so we need to convert it back to None.\n        \"\"\"\n        # I really wish TOML had a None type...\n        if v == \"\":\n            return None\n        return v\n\n    @field_validator(\"credentials_file\", mode=\"after\")\n    @classmethod\n    def _validate_credentials_file(cls, v: Path | None) -&gt; Path | None:\n        if v is not None:\n            if not v.exists():\n                raise ValueError(f\"Credentials file {v} does not exist\")\n            elif not v.is_file():\n                raise ValueError(f\"Credentials file {v} is not a file\")\n        return v\n\n    @field_serializer(\"secret\", \"basicauth\")\n    def _serialize_secret_str(self, v: SecretStr) -&gt; str:\n        return v.get_secret_value()\n\n    @property\n    def secret_value(self) -&gt; str:\n        \"\"\"Returns the secret value from the keyring if enabled, otherwise\n        returns the secret value from the config file.\n        \"\"\"\n        if self.keyring:\n            try:\n                password = get_password(self.username)\n                if password:\n                    return password\n                warning(\n                    f\"Keyring is enabled, but no password was found for user {self.username}\"\n                )\n            except KeyringUnsupportedError:\n                warning(\n                    \"Keyring is not supported on this platform. \"\n                    \"Using secret from config file.\"\n                )\n                self.keyring = False  # patch it so we don't try again\n                return self.secret.get_secret_value()\n        return self.secret.get_secret_value()\n\n    @property\n    def has_auth_method(self) -&gt; bool:\n        \"\"\"Returns True if any of the auth methods are set.\"\"\"\n        return bool(\n            (self.username and self.secret_value)\n            or self.basicauth\n            or self.credentials_file\n        )\n\n    @property\n    def credentials(self) -&gt; HarborCredentialsKwargs:\n        \"\"\"Fetches kwargs that can be passed to HarborAsyncClient for\n        user authentication.\n\n        Returns\n        -------\n        HarborCredentialsKwargs\n            A dictionary with either base64 credentials, username and password\n            or a path to a credentials file.\n        \"\"\"\n        return HarborCredentialsKwargs(\n            url=self.url,\n            username=self.username,\n            secret=self.secret_value,\n            basicauth=self.basicauth.get_secret_value(),\n            credentials_file=self.credentials_file,\n        )\n\n    def ensure_authable(self) -&gt; bool:\n        \"\"\"Ensures that the credentials are sufficient to authenticate with the Habror API.\n        Raises CredentialsError if not.\n        \"\"\"\n        if not self.url:\n            raise CredentialsError(\"A Harbor API URL is required\")\n\n        # require one of the auth methods to be set\n        if not self.has_auth_method:\n            raise CredentialsError(\n                \"A harbor authentication method must be specified. \"\n                \"One of 'username'+'secret', 'basicauth', or 'credentials_file' must be specified. \"\n                \"See the documentation for more information.\"\n            )\n        return True\n\n    def clear_credentials(self) -&gt; None:\n        \"\"\"Clears the credentials from the current configuration.\"\"\"\n        self.username = \"\"\n        self.secret = \"\"  # type: ignore # pydantic.SecretStr\n        self.basicauth = \"\"  # type: ignore # pydantic.SecretStr\n        self.credentials_file = None\n\n    def set_username_secret(self, current_username: str, current_secret: str) -&gt; None:\n        username, secret = prompt_username_secret(current_username, current_secret)\n        if keyring_supported():\n            self._set_username_secret_keyring(username, secret)\n        else:\n            self._set_username_secret_config(username, secret)\n\n    def _set_username_secret_config(self, username: str, secret: str) -&gt; None:\n        \"\"\"Stores both username and config in config file.\n        Insecure fallback in case keyring is not supported.\n        \"\"\"\n        self.username = username\n        self.secret = secret  # type: ignore # pydantic.SecretStr\n        self.keyring = False\n\n    def _set_username_secret_keyring(self, username: str, secret: str) -&gt; None:\n        \"\"\"Set username and secret using keyring.\n        Stores the secret in the keyring and the username in the config file.\n        \"\"\"\n        self.username = username\n        set_password(username, secret)\n        self.keyring = True\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.url","title":"<code>url: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.username","title":"<code>username: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.secret","title":"<code>secret: SecretStr = SecretStr('')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.basicauth","title":"<code>basicauth: SecretStr = SecretStr('')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.credentials_file","title":"<code>credentials_file: Optional[Path] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.validate_data","title":"<code>validate_data: bool = Field(default=True, alias='validate')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.raw_mode","title":"<code>raw_mode: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.verify_ssl","title":"<code>verify_ssl: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.retry","title":"<code>retry: RetrySettings = RetrySettings()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.keyring","title":"<code>keyring: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.secret_value","title":"<code>secret_value: str</code>  <code>property</code>","text":"<p>Returns the secret value from the keyring if enabled, otherwise returns the secret value from the config file.</p>"},{"location":"reference/config/#harbor_cli.config.HarborSettings.has_auth_method","title":"<code>has_auth_method: bool</code>  <code>property</code>","text":"<p>Returns True if any of the auth methods are set.</p>"},{"location":"reference/config/#harbor_cli.config.HarborSettings.credentials","title":"<code>credentials: HarborCredentialsKwargs</code>  <code>property</code>","text":"<p>Fetches kwargs that can be passed to HarborAsyncClient for user authentication.</p> <p>Returns:</p> Type Description <code>HarborCredentialsKwargs</code> <p>A dictionary with either base64 credentials, username and password or a path to a credentials file.</p>"},{"location":"reference/config/#harbor_cli.config.HarborSettings-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.HarborSettings.ensure_authable","title":"<code>ensure_authable() -&gt; bool</code>","text":"<p>Ensures that the credentials are sufficient to authenticate with the Habror API. Raises CredentialsError if not.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def ensure_authable(self) -&gt; bool:\n    \"\"\"Ensures that the credentials are sufficient to authenticate with the Habror API.\n    Raises CredentialsError if not.\n    \"\"\"\n    if not self.url:\n        raise CredentialsError(\"A Harbor API URL is required\")\n\n    # require one of the auth methods to be set\n    if not self.has_auth_method:\n        raise CredentialsError(\n            \"A harbor authentication method must be specified. \"\n            \"One of 'username'+'secret', 'basicauth', or 'credentials_file' must be specified. \"\n            \"See the documentation for more information.\"\n        )\n    return True\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborSettings.clear_credentials","title":"<code>clear_credentials() -&gt; None</code>","text":"<p>Clears the credentials from the current configuration.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def clear_credentials(self) -&gt; None:\n    \"\"\"Clears the credentials from the current configuration.\"\"\"\n    self.username = \"\"\n    self.secret = \"\"  # type: ignore # pydantic.SecretStr\n    self.basicauth = \"\"  # type: ignore # pydantic.SecretStr\n    self.credentials_file = None\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborSettings.set_username_secret","title":"<code>set_username_secret(current_username: str, current_secret: str) -&gt; None</code>","text":"Source code in <code>harbor_cli/config.py</code> <pre><code>def set_username_secret(self, current_username: str, current_secret: str) -&gt; None:\n    username, secret = prompt_username_secret(current_username, current_secret)\n    if keyring_supported():\n        self._set_username_secret_keyring(username, secret)\n    else:\n        self._set_username_secret_config(username, secret)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.LoggingSettings","title":"<code>LoggingSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class LoggingSettings(BaseModel):\n    enabled: bool = True\n    level: LogLevel = LogLevel.WARNING\n    directory: Path = LOGS_DIR\n    filename: str = \"harbor-cli.log\"\n    datetime_format: str = Field(\n        default=\"%Y-%m-%d\",\n        validation_alias=AliasChoices(\n            \"datetime_format\",\n            \"timeformat\",  # Old name (deprecated)\n        ),\n    )\n    retention: int = 30\n\n    @property\n    def path(self) -&gt; Path:\n        \"\"\"Full time-formatted path to log file.\"\"\"\n        return self.directory / self.filename.format(\n            dt=datetime.now().strftime(self.datetime_format),\n            # Deprecated format placeholder:\n            time=datetime.now().strftime(self.datetime_format),\n        )\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.LoggingSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.level","title":"<code>level: LogLevel = LogLevel.WARNING</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.directory","title":"<code>directory: Path = LOGS_DIR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.filename","title":"<code>filename: str = 'harbor-cli.log'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.datetime_format","title":"<code>datetime_format: str = Field(default='%Y-%m-%d', validation_alias=AliasChoices('datetime_format', 'timeformat'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.retention","title":"<code>retention: int = 30</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.LoggingSettings.path","title":"<code>path: Path</code>  <code>property</code>","text":"<p>Full time-formatted path to log file.</p>"},{"location":"reference/config/#harbor_cli.config.TableStyleSettings","title":"<code>TableStyleSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class TableStyleSettings(BaseModel):\n    title: Optional[str] = None\n    header: Optional[str] = STYLE_TABLE_HEADER\n    rows: Optional[Tuple[str, str]] = None\n    border: Optional[str] = None\n    footer: Optional[str] = None\n    caption: Optional[str] = None\n    expand: bool = True\n    show_header: bool = True\n    bool_emoji: bool = False\n    # TODO: box\n\n    @field_validator(\"rows\", mode=\"before\")\n    @classmethod\n    def _validate_rows(cls, v: Any) -&gt; Optional[Tuple[str, ...]]:\n        \"\"\"Validates the rows field.\n\n        Strings are turned into tuples of length 2 where both elements\n        are the string value. e.g. \"black\" becomes (\"black\", \"black\").\n\n        Sequences are truncated to length 2. If the sequence is length 1,\n        the first element is repeated. e.g. (\"black\",) becomes (\"black\", \"black\"),\n        and (\"black\", \"white\", \"red\") becomes (\"black\", \"white\").\n\n        None, empty strings, and empty sequences are converted to None.\n        \"\"\"\n        # TODO: refactor this to separate function so it can be used by other\n        # validators, and so that we can have one central set of tests,\n        # that covers all validators using the function.\n\n        if not v:  # catches None, \"\", and empty sequence\n            return None\n        if isinstance(v, str):\n            return (v, v)\n        if not isinstance(v, Sequence):\n            raise TypeError(\"TableStyleSettings.rows must be a sequence.\")\n        else:\n            v = cast(Sequence[Any], v)\n        vv = tuple(v)\n\n        # If all elements are None or empty, return None\n        if all(not x for x in vv):\n            return None\n\n        # vv is guaranteed to be a non-empty tuple at this point\n        if len(vv) &gt; 2:\n            vv = vv[:2]\n        elif len(vv) == 1:\n            vv = (vv[0], v[0])\n        return vv\n\n    # TODO add * validator that turns empty strings into None?\n    @field_validator(\"*\")\n    @classmethod\n    def _empty_string_is_none(cls, v: Any) -&gt; Any:\n        \"\"\"TOML has no None support, but we need to pass these kwargs to\n        Rich's Table constructor, which does uses None. So we convert\n        empty strings to None.\n        \"\"\"\n        if v == \"\":\n            return None\n        return v\n\n    def as_rich_kwargs(self) -&gt; RichTableKwargs:\n        \"\"\"Converts the TableStyleSettings to a dictionary that can be passed\n        to Rich's Table constructor.\n\n        Returns\n        -------\n        RichTableKwargs\n            A dictionary of Rich Table style settings.\n        \"\"\"\n        return {\n            \"border_style\": self.border,\n            \"caption_style\": self.caption,\n            \"expand\": self.expand,\n            \"footer_style\": self.footer,\n            \"header_style\": self.header,\n            \"row_styles\": self.rows,\n            \"show_header\": self.show_header,\n            \"title_style\": self.title,\n        }\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.TableStyleSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.title","title":"<code>title: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.header","title":"<code>header: Optional[str] = STYLE_TABLE_HEADER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.rows","title":"<code>rows: Optional[Tuple[str, str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.border","title":"<code>border: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.footer","title":"<code>footer: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.caption","title":"<code>caption: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.expand","title":"<code>expand: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.show_header","title":"<code>show_header: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.bool_emoji","title":"<code>bool_emoji: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.TableStyleSettings.as_rich_kwargs","title":"<code>as_rich_kwargs() -&gt; RichTableKwargs</code>","text":"<p>Converts the TableStyleSettings to a dictionary that can be passed to Rich's Table constructor.</p> <p>Returns:</p> Type Description <code>RichTableKwargs</code> <p>A dictionary of Rich Table style settings.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def as_rich_kwargs(self) -&gt; RichTableKwargs:\n    \"\"\"Converts the TableStyleSettings to a dictionary that can be passed\n    to Rich's Table constructor.\n\n    Returns\n    -------\n    RichTableKwargs\n        A dictionary of Rich Table style settings.\n    \"\"\"\n    return {\n        \"border_style\": self.border,\n        \"caption_style\": self.caption,\n        \"expand\": self.expand,\n        \"footer_style\": self.footer,\n        \"header_style\": self.header,\n        \"row_styles\": self.rows,\n        \"show_header\": self.show_header,\n        \"title_style\": self.title,\n    }\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.TableSettings","title":"<code>TableSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Settings for the table output format.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>class TableSettings(BaseModel):\n    \"\"\"Settings for the table output format.\"\"\"\n\n    description: bool = False\n    max_depth: int = 0\n    compact: bool = True\n    style: TableStyleSettings = TableStyleSettings()\n    # max_width: Optional[int] = None\n    # max_lines: Optional[int] = None\n\n    @field_validator(\"max_depth\", mode=\"before\")\n    @classmethod\n    def check_max_depth(cls, v: Any) -&gt; Any:\n        \"\"\"Converts max_depth to an integer, and checks that it is not negative.\"\"\"\n        if v is None:\n            return 0\n        try:\n            v = int(v)\n        except ValueError:\n            raise ValueError(\"max_depth must be an integer\")\n        # We used to accept negative integers, and to avoid breaking\n        # existing configs immediately, we just check if the value is negative,\n        # and if so, return 0.\n        # In the future, we will use Field(..., ge=0) to enforce it.\n        if v &lt; 0:\n            warning(\n                \"max_depth will stop accepting negative values in a future version. Use 0 instead.\"\n            )\n            return 0\n        return v\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.TableSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings.description","title":"<code>description: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings.max_depth","title":"<code>max_depth: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings.compact","title":"<code>compact: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings.style","title":"<code>style: TableStyleSettings = TableStyleSettings()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.TableSettings.check_max_depth","title":"<code>check_max_depth(v: Any) -&gt; Any</code>  <code>classmethod</code>","text":"<p>Converts max_depth to an integer, and checks that it is not negative.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>@field_validator(\"max_depth\", mode=\"before\")\n@classmethod\ndef check_max_depth(cls, v: Any) -&gt; Any:\n    \"\"\"Converts max_depth to an integer, and checks that it is not negative.\"\"\"\n    if v is None:\n        return 0\n    try:\n        v = int(v)\n    except ValueError:\n        raise ValueError(\"max_depth must be an integer\")\n    # We used to accept negative integers, and to avoid breaking\n    # existing configs immediately, we just check if the value is negative,\n    # and if so, return 0.\n    # In the future, we will use Field(..., ge=0) to enforce it.\n    if v &lt; 0:\n        warning(\n            \"max_depth will stop accepting negative values in a future version. Use 0 instead.\"\n        )\n        return 0\n    return v\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.JSONSettings","title":"<code>JSONSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class JSONSettings(BaseModel):\n    indent: int = 2\n    sort_keys: bool = False\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.JSONSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.JSONSettings.indent","title":"<code>indent: int = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.JSONSettings.sort_keys","title":"<code>sort_keys: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings","title":"<code>OutputSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class OutputSettings(BaseModel):\n    format: OutputFormat = OutputFormat.TABLE\n    paging: bool = Field(\n        default=False,\n        description=\"Show output in pager (if supported). Default pager does not support color output currently.\",\n    )\n    pager: str = Field(default=\"\", description=\"Pager to use if paging is enabled.\")\n    # Naming: Don't shadow the built-in .json() method\n    # The config file can still use the key \"json\" because of the alias\n    table: TableSettings = Field(default_factory=TableSettings)\n    JSON: JSONSettings = Field(default_factory=JSONSettings, alias=\"json\")\n\n    @field_validator(\"pager\")\n    @classmethod\n    def set_pager(cls, v: Optional[str]) -&gt; Optional[str]:\n        \"\"\"Validator that sets the MANPAGER environment variable if a pager is set.\n        https://rich.readthedocs.io/en/stable/console.html#paging\n        \"\"\"\n        if not v:\n            return v\n        os.environ[\"MANPAGER\"] = v\n        os.environ[\"PAGER\"] = v\n        return v\n\n    model_config = ConfigDict(populate_by_name=True)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.OutputSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.format","title":"<code>format: OutputFormat = OutputFormat.TABLE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.paging","title":"<code>paging: bool = Field(default=False, description='Show output in pager (if supported). Default pager does not support color output currently.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.pager","title":"<code>pager: str = Field(default='', description='Pager to use if paging is enabled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.table","title":"<code>table: TableSettings = Field(default_factory=TableSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.JSON","title":"<code>JSON: JSONSettings = Field(default_factory=JSONSettings, alias='json')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.model_config","title":"<code>model_config = ConfigDict(populate_by_name=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.OutputSettings.set_pager","title":"<code>set_pager(v: Optional[str]) -&gt; Optional[str]</code>  <code>classmethod</code>","text":"<p>Validator that sets the MANPAGER environment variable if a pager is set. https://rich.readthedocs.io/en/stable/console.html#paging</p> Source code in <code>harbor_cli/config.py</code> <pre><code>@field_validator(\"pager\")\n@classmethod\ndef set_pager(cls, v: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Validator that sets the MANPAGER environment variable if a pager is set.\n    https://rich.readthedocs.io/en/stable/console.html#paging\n    \"\"\"\n    if not v:\n        return v\n    os.environ[\"MANPAGER\"] = v\n    os.environ[\"PAGER\"] = v\n    return v\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.GeneralSettings","title":"<code>GeneralSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>General settings for Harbor CLI.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>class GeneralSettings(BaseModel):\n    \"\"\"General settings for Harbor CLI.\"\"\"\n\n    confirm_deletion: bool = Field(\n        default=True,\n        description=(\n            \"Show confirmation prompt for resource deletion \"\n            \"commands. E.g. `project delete`\"\n        ),\n    )\n    confirm_enumeration: bool = Field(\n        default=True,\n        description=(\n            \"Show confirmation prompt for certain resource enumeration \"\n            \"commands when invoked without a limit or filter. E.g. `auditlog list`\"\n        ),\n    )\n    warnings: bool = Field(\n        default=True,\n        description=\"Show warning messages in terminal. Warnings are always logged regardless of this option.\",\n    )\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.GeneralSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.GeneralSettings.confirm_deletion","title":"<code>confirm_deletion: bool = Field(default=True, description='Show confirmation prompt for resource deletion commands. E.g. `project delete`')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.GeneralSettings.confirm_enumeration","title":"<code>confirm_enumeration: bool = Field(default=True, description='Show confirmation prompt for certain resource enumeration commands when invoked without a limit or filter. E.g. `auditlog list`')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.GeneralSettings.warnings","title":"<code>warnings: bool = Field(default=True, description='Show warning messages in terminal. Warnings are always logged regardless of this option.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.REPLSettings","title":"<code>REPLSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class REPLSettings(BaseModel):\n    history: bool = Field(\n        default=True, description=\"Enable persistent history in the REPL.\"\n    )\n    history_file: Path = Field(\n        default=DEFAULT_HISTORY_FILE,\n        description=\"Path to custom location of history file.\",\n    )\n\n    @model_validator(mode=\"after\")\n    def _create_history_file_if_not_exists(self) -&gt; Self:\n        if not self.history:\n            return self\n        if not self.history_file.exists():\n            self.history_file.parent.mkdir(parents=True, exist_ok=True)\n            self.history_file.touch()\n        return self\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.REPLSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.REPLSettings.history","title":"<code>history: bool = Field(default=True, description='Enable persistent history in the REPL.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.REPLSettings.history_file","title":"<code>history_file: Path = Field(default=DEFAULT_HISTORY_FILE, description='Path to custom location of history file.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.CacheSettings","title":"<code>CacheSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>DEPRECATED: Caching was removed in 0.2.0. This class is left here for compatibility.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>class CacheSettings(BaseModel):\n    \"\"\"DEPRECATED: Caching was removed in 0.2.0. This class is left here for compatibility.\"\"\"\n\n    enabled: bool = Field(\n        default=False,\n        description=\"Enable in-memory caching of API responses. This can significantly speed up Harbor CLI, but should be considered experimental for now.\",\n    )\n    ttl: int = Field(\n        default=300,\n        description=\"Time to live for cached responses, in seconds.\",\n    )\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.CacheSettings-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.CacheSettings.enabled","title":"<code>enabled: bool = Field(default=False, description='Enable in-memory caching of API responses. This can significantly speed up Harbor CLI, but should be considered experimental for now.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.CacheSettings.ttl","title":"<code>ttl: int = Field(default=300, description='Time to live for cached responses, in seconds.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig","title":"<code>HarborCLIConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/config.py</code> <pre><code>class HarborCLIConfig(BaseModel):\n    harbor: HarborSettings = Field(default_factory=HarborSettings)\n    general: GeneralSettings = Field(default_factory=GeneralSettings)\n    output: OutputSettings = Field(default_factory=OutputSettings)\n    repl: REPLSettings = Field(default_factory=REPLSettings)\n    cache: CacheSettings = Field(default_factory=CacheSettings)\n    logging: LoggingSettings = Field(default_factory=LoggingSettings)\n    config_file: Optional[Path] = Field(\n        default=None, exclude=True, description=\"Path to config file (if any).\"\n    )  # populated by CLI if loaded from file\n\n    @classmethod\n    def from_file(\n        cls, config_file: Path | None = DEFAULT_CONFIG_FILE, create: bool = False\n    ) -&gt; HarborCLIConfig:\n        \"\"\"Create a Config object from a TOML file.\n\n        Parameters\n        ----------\n        config_file : Path\n            Path to the TOML file.\n            If `None`, the default configuration file is used.\n        create : bool\n            If `True`, the config file will be created if it does not exist.\n\n        Returns\n        -------\n        Config\n            A Config object.\n        \"\"\"\n        if config_file is None:\n            config_file = DEFAULT_CONFIG_FILE\n\n        if not config_file.exists():\n            if create:\n                create_config(config_file)\n            else:\n                raise ConfigFileNotFoundError(\n                    f\"Config file {config_file} does not exist.\"\n                )\n        elif not config_file.is_file():\n            raise ConfigError(f\"Config file {config_file} is not a file.\")\n\n        try:\n            config = load_toml_file(config_file)\n        except Exception as e:\n            raise ConfigError(f\"Could not load config file {config_file}: {e}\") from e\n        return cls(**config, config_file=config_file)\n\n    def save(self, path: Path | None = None) -&gt; None:\n        if not path and not self.config_file:\n            raise ValueError(\"Cannot save config: no config file specified\")\n        p = path or self.config_file\n        assert p is not None  # p shouldn't be None here! am i dumb???\n        save_config(self, p)\n\n    def toml(\n        self,\n        expose_secrets: bool = True,\n        tomli_kwargs: dict[str, Any] | None = {},\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"Return a TOML representation of the config object.\n        None values are replaced with empty strings (bad?)\n\n        Parameters\n        ----------\n        expose_secrets : bool\n            If `True`, secrets will be included in the TOML output.\n            If `False`, secrets will be replaced with strings of asterisks.\n            By default, secrets are included.\n        tomli_kwargs : dict\n            Dict of keyword arguments passed to `tomli_w.dumps()`.\n        **kwargs\n            Keyword arguments passed to `BaseModel.json()`.\n\n        Returns\n        -------\n        str\n            TOML representation of the config as a string.\n        \"\"\"\n        tomli_kwargs = tomli_kwargs or {}\n        dict_basic_types = replace_none(self.model_dump(mode=\"json\", **kwargs))\n\n        if not expose_secrets:\n            for key in [\"secret\", \"basicauth\", \"credentials_file\"]:\n                if (\n                    key in dict_basic_types[\"harbor\"]\n                    and dict_basic_types[\"harbor\"][key]  # ignore empty values\n                ):\n                    dict_basic_types[\"harbor\"][key] = \"********\"\n\n        return tomli_w.dumps(dict_basic_types)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig-attributes","title":"Attributes","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.harbor","title":"<code>harbor: HarborSettings = Field(default_factory=HarborSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.general","title":"<code>general: GeneralSettings = Field(default_factory=GeneralSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.output","title":"<code>output: OutputSettings = Field(default_factory=OutputSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.repl","title":"<code>repl: REPLSettings = Field(default_factory=REPLSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.cache","title":"<code>cache: CacheSettings = Field(default_factory=CacheSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.logging","title":"<code>logging: LoggingSettings = Field(default_factory=LoggingSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.config_file","title":"<code>config_file: Optional[Path] = Field(default=None, exclude=True, description='Path to config file (if any).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.from_file","title":"<code>from_file(config_file: Path | None = DEFAULT_CONFIG_FILE, create: bool = False) -&gt; HarborCLIConfig</code>  <code>classmethod</code>","text":"<p>Create a Config object from a TOML file.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>Path</code> <p>Path to the TOML file. If <code>None</code>, the default configuration file is used.</p> <code>DEFAULT_CONFIG_FILE</code> <code>create</code> <code>bool</code> <p>If <code>True</code>, the config file will be created if it does not exist.</p> <code>False</code> <p>Returns:</p> Type Description <code>Config</code> <p>A Config object.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>@classmethod\ndef from_file(\n    cls, config_file: Path | None = DEFAULT_CONFIG_FILE, create: bool = False\n) -&gt; HarborCLIConfig:\n    \"\"\"Create a Config object from a TOML file.\n\n    Parameters\n    ----------\n    config_file : Path\n        Path to the TOML file.\n        If `None`, the default configuration file is used.\n    create : bool\n        If `True`, the config file will be created if it does not exist.\n\n    Returns\n    -------\n    Config\n        A Config object.\n    \"\"\"\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n\n    if not config_file.exists():\n        if create:\n            create_config(config_file)\n        else:\n            raise ConfigFileNotFoundError(\n                f\"Config file {config_file} does not exist.\"\n            )\n    elif not config_file.is_file():\n        raise ConfigError(f\"Config file {config_file} is not a file.\")\n\n    try:\n        config = load_toml_file(config_file)\n    except Exception as e:\n        raise ConfigError(f\"Could not load config file {config_file}: {e}\") from e\n    return cls(**config, config_file=config_file)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.save","title":"<code>save(path: Path | None = None) -&gt; None</code>","text":"Source code in <code>harbor_cli/config.py</code> <pre><code>def save(self, path: Path | None = None) -&gt; None:\n    if not path and not self.config_file:\n        raise ValueError(\"Cannot save config: no config file specified\")\n    p = path or self.config_file\n    assert p is not None  # p shouldn't be None here! am i dumb???\n    save_config(self, p)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.HarborCLIConfig.toml","title":"<code>toml(expose_secrets: bool = True, tomli_kwargs: dict[str, Any] | None = {}, **kwargs: Any) -&gt; str</code>","text":"<p>Return a TOML representation of the config object. None values are replaced with empty strings (bad?)</p> <p>Parameters:</p> Name Type Description Default <code>expose_secrets</code> <code>bool</code> <p>If <code>True</code>, secrets will be included in the TOML output. If <code>False</code>, secrets will be replaced with strings of asterisks. By default, secrets are included.</p> <code>True</code> <code>tomli_kwargs</code> <code>dict</code> <p>Dict of keyword arguments passed to <code>tomli_w.dumps()</code>.</p> <code>{}</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments passed to <code>BaseModel.json()</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>TOML representation of the config as a string.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def toml(\n    self,\n    expose_secrets: bool = True,\n    tomli_kwargs: dict[str, Any] | None = {},\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Return a TOML representation of the config object.\n    None values are replaced with empty strings (bad?)\n\n    Parameters\n    ----------\n    expose_secrets : bool\n        If `True`, secrets will be included in the TOML output.\n        If `False`, secrets will be replaced with strings of asterisks.\n        By default, secrets are included.\n    tomli_kwargs : dict\n        Dict of keyword arguments passed to `tomli_w.dumps()`.\n    **kwargs\n        Keyword arguments passed to `BaseModel.json()`.\n\n    Returns\n    -------\n    str\n        TOML representation of the config as a string.\n    \"\"\"\n    tomli_kwargs = tomli_kwargs or {}\n    dict_basic_types = replace_none(self.model_dump(mode=\"json\", **kwargs))\n\n    if not expose_secrets:\n        for key in [\"secret\", \"basicauth\", \"credentials_file\"]:\n            if (\n                key in dict_basic_types[\"harbor\"]\n                and dict_basic_types[\"harbor\"][key]  # ignore empty values\n            ):\n                dict_basic_types[\"harbor\"][key] = \"********\"\n\n    return tomli_w.dumps(dict_basic_types)\n</code></pre>"},{"location":"reference/config/#harbor_cli.config-functions","title":"Functions","text":""},{"location":"reference/config/#harbor_cli.config.config_env_var","title":"<code>config_env_var(key: str) -&gt; str</code>","text":"<p>Return the environment variable name for a config key.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def config_env_var(key: str) -&gt; str:\n    \"\"\"Return the environment variable name for a config key.\"\"\"\n    return ENV_VAR_PREFIX + key.upper().replace(\".\", \"_\")\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.env_var","title":"<code>env_var(option: str) -&gt; str</code>","text":"<p>Return the environment variable name for a CLI option.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def env_var(option: str) -&gt; str:\n    \"\"\"Return the environment variable name for a CLI option.\"\"\"\n    return ENV_VAR_PREFIX + option.upper().replace(\"-\", \"_\")\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.load_toml_file","title":"<code>load_toml_file(config_file: Path) -&gt; dict[str, Any]</code>","text":"<p>Load a TOML file and return the contents as a dict.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>(Path)</code> <p>Path to the TOML file to load.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A TOML file as a dictionary</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def load_toml_file(config_file: Path) -&gt; dict[str, Any]:\n    \"\"\"Load a TOML file and return the contents as a dict.\n\n    Parameters\n    ----------\n    config_file : Path,\n        Path to the TOML file to load.\n\n    Returns\n    -------\n    Dict[str, Any]\n        A TOML file as a dictionary\n    \"\"\"\n    conf = tomli.loads(config_file.read_text())\n    return conf\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.create_config","title":"<code>create_config(config_path: Path | None, overwrite: bool = False) -&gt; Path</code>","text":"Source code in <code>harbor_cli/config.py</code> <pre><code>def create_config(config_path: Path | None, overwrite: bool = False) -&gt; Path:\n    if config_path is None:\n        config_path = DEFAULT_CONFIG_FILE\n\n    try:\n        config_path.parent.mkdir(parents=True, exist_ok=True)\n        config_path.touch(exist_ok=overwrite)\n    except FileExistsError as e:\n        raise OverwriteError(f\"Config file {config_path} already exists.\") from e\n    except Exception as e:\n        raise ConfigError(f\"Could not create config file {config_path}: {e}\") from e\n\n    # Write sample config to the created file\n    config_path.write_text(sample_config())\n\n    return config_path\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.load_config","title":"<code>load_config(config_path: Path | None = None) -&gt; HarborCLIConfig</code>","text":"<p>Load the config file.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def load_config(config_path: Path | None = None) -&gt; HarborCLIConfig:\n    \"\"\"Load the config file.\"\"\"\n    try:\n        return HarborCLIConfig.from_file(config_path)\n    except HarborCLIError:\n        raise\n    except Exception as e:\n        raise ConfigError(f\"Could not load config file {config_path}: {e}\") from e\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.save_config","title":"<code>save_config(config: HarborCLIConfig, config_path: Path) -&gt; None</code>","text":"<p>Save the config file.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def save_config(config: HarborCLIConfig, config_path: Path) -&gt; None:\n    \"\"\"Save the config file.\"\"\"\n    try:\n        config_path.write_text(config.toml(exclude_none=True))\n    except Exception as e:\n        raise ConfigError(f\"Could not save config file {config_path}: {e}\") from e\n</code></pre>"},{"location":"reference/config/#harbor_cli.config.sample_config","title":"<code>sample_config(exclude_none: bool = False) -&gt; str</code>","text":"<p>Returns the contents of a sample config file as a TOML string.</p> <p>Parameters:</p> Name Type Description Default <code>exclude_none</code> <code>bool</code> <p>If <code>True</code>, fields with <code>None</code> values will be excluded from the sample config, otherwise they will be included with empty strings as field values. Defaults to <code>False</code> - all fields will be included.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Sample config file contents in TOML format.</p> Source code in <code>harbor_cli/config.py</code> <pre><code>def sample_config(exclude_none: bool = False) -&gt; str:\n    \"\"\"Returns the contents of a sample config file as a TOML string.\n\n    Parameters\n    ----------\n    exclude_none : bool\n        If `True`, fields with `None` values will be excluded from the sample\n        config, otherwise they will be included with empty strings as field values.\n        Defaults to `False` - all fields will be included.\n\n    Returns\n    -------\n    str\n        Sample config file contents in TOML format.\n    \"\"\"\n    config = HarborCLIConfig()\n    return config.toml(exclude_none=exclude_none)\n</code></pre>"},{"location":"reference/dirs/","title":"Dirs","text":""},{"location":"reference/dirs/#harbor_cli.dirs","title":"<code>harbor_cli.dirs</code>","text":""},{"location":"reference/dirs/#harbor_cli.dirs-attributes","title":"Attributes","text":""},{"location":"reference/dirs/#harbor_cli.dirs.CONFIG_DIR","title":"<code>CONFIG_DIR = _PLATFORM_DIR.user_config_path</code>  <code>module-attribute</code>","text":""},{"location":"reference/dirs/#harbor_cli.dirs.DATA_DIR","title":"<code>DATA_DIR = _PLATFORM_DIR.user_data_path</code>  <code>module-attribute</code>","text":""},{"location":"reference/dirs/#harbor_cli.dirs.LOGS_DIR","title":"<code>LOGS_DIR = _PLATFORM_DIR.user_log_path</code>  <code>module-attribute</code>","text":""},{"location":"reference/dirs/#harbor_cli.dirs.SITE_CONFIG_DIR","title":"<code>SITE_CONFIG_DIR = _PLATFORM_DIR.site_config_path</code>  <code>module-attribute</code>","text":""},{"location":"reference/dirs/#harbor_cli.dirs-functions","title":"Functions","text":""},{"location":"reference/dirs/#harbor_cli.dirs.init_directories","title":"<code>init_directories() -&gt; None</code>","text":"Source code in <code>harbor_cli/dirs.py</code> <pre><code>def init_directories() -&gt; None:\n    for directory in [CONFIG_DIR, LOGS_DIR]:\n        try:\n            directory.mkdir(parents=True, exist_ok=True)\n        except Exception as e:\n            from .output.console import error\n\n            # TODO: deduplicate these messages\n            error(\n                f\"Unable to create directory {directory}: {e}\",\n                exc_info=True,\n            )\n            continue\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions","title":"<code>harbor_cli.exceptions</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions-attributes","title":"Attributes","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_BADREQUEST","title":"<code>MESSAGE_BADREQUEST = '400 Bad request: {method} {url}. Check your input. If you think this is a bug, please report it.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_UNAUTHORIZED","title":"<code>MESSAGE_UNAUTHORIZED = '401 Unauthorized: {method} {url}. Check your credentials.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_FORBIDDEN","title":"<code>MESSAGE_FORBIDDEN = '403 Forbidden: {method} {url}. Make sure you have permissions to access the resource.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_NOTFOUND","title":"<code>MESSAGE_NOTFOUND = '404 Not Found: {method} {url}. Resource not found.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_METHODNOTALLOWED","title":"<code>MESSAGE_METHODNOTALLOWED = '405 Method Not Allowed: {method} {url}. This is either a bug, or a problem with your server or credentials.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_CONFLICT","title":"<code>MESSAGE_CONFLICT = '409 Conflict: {method} {url}. Resource already exists.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_PRECONDITIONFAILED","title":"<code>MESSAGE_PRECONDITIONFAILED = '412 Precondition Failed: {method} {url} Check your input. If you think this is a bug, please report it.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_UNSUPPORTEDMEDIATYPE","title":"<code>MESSAGE_UNSUPPORTEDMEDIATYPE = '415 Unsupported Media Type: {method} {url}. Check your input. If you think this is a bug, please report it.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_INTERNALSERVERERROR","title":"<code>MESSAGE_INTERNALSERVERERROR = '500 Internal Server Error: {method} {url}. Check your input. If you think this is a bug, please report it.'</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.MESSAGE_MAPPING","title":"<code>MESSAGE_MAPPING: Dict[Type[Exception], str] = {BadRequest: MESSAGE_BADREQUEST, Unauthorized: MESSAGE_UNAUTHORIZED, Forbidden: MESSAGE_FORBIDDEN, NotFound: MESSAGE_NOTFOUND, MethodNotAllowed: MESSAGE_METHODNOTALLOWED, Conflict: MESSAGE_CONFLICT, PreconditionFailed: MESSAGE_PRECONDITIONFAILED, UnsupportedMediaType: MESSAGE_UNSUPPORTEDMEDIATYPE, InternalServerError: MESSAGE_INTERNALSERVERERROR}</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.EXC_HANDLERS","title":"<code>EXC_HANDLERS: Mapping[Type[Exception], HandleFunc] = {ValidationError: handle_validationerror, StatusError: handle_status_error, HarborCLIError: handle_notraceback, HTTPError: handle_notraceback, InvalidURL: handle_notraceback, CookieConflict: handle_notraceback, StreamError: handle_notraceback, KeyringError: handle_keyring_error}</code>  <code>module-attribute</code>","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions-classes","title":"Classes","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.HarborCLIError","title":"<code>HarborCLIError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class HarborCLIError(Exception):\n    \"\"\"Base class for all exceptions.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.ConfigError","title":"<code>ConfigError</code>","text":"<p>               Bases: <code>HarborCLIError</code></p> <p>Error loading the configuration file.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class ConfigError(HarborCLIError):\n    \"\"\"Error loading the configuration file.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.ConfigFileNotFoundError","title":"<code>ConfigFileNotFoundError</code>","text":"<p>               Bases: <code>ConfigError</code>, <code>FileNotFoundError</code></p> <p>Configuration file not found.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class ConfigFileNotFoundError(ConfigError, FileNotFoundError):\n    \"\"\"Configuration file not found.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.DirectoryCreateError","title":"<code>DirectoryCreateError</code>","text":"<p>               Bases: <code>HarborCLIError</code>, <code>OSError</code></p> <p>Error creating a required program directory.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class DirectoryCreateError(HarborCLIError, OSError):\n    \"\"\"Error creating a required program directory.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.CredentialsError","title":"<code>CredentialsError</code>","text":"<p>               Bases: <code>HarborCLIError</code></p> <p>Error loading credentials.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class CredentialsError(HarborCLIError):\n    \"\"\"Error loading credentials.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.OverwriteError","title":"<code>OverwriteError</code>","text":"<p>               Bases: <code>HarborCLIError</code>, <code>FileExistsError</code></p> <p>Error overwriting an existing file.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class OverwriteError(HarborCLIError, FileExistsError):\n    \"\"\"Error overwriting an existing file.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.KeyringUnsupportedError","title":"<code>KeyringUnsupportedError</code>","text":"<p>               Bases: <code>HarborCLIError</code></p> <p>Keyring is not supported on this system.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class KeyringUnsupportedError(HarborCLIError):\n    \"\"\"Keyring is not supported on this system.\"\"\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.ArtifactNameFormatError","title":"<code>ArtifactNameFormatError</code>","text":"<p>               Bases: <code>HarborCLIError</code></p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class ArtifactNameFormatError(HarborCLIError):\n    def __init__(self, s: str) -&gt; None:\n        super().__init__(\n            f\"Artifact string {s} is not in the correct format. \"\n            \"Expected 'project/repo:tag' OR 'project/repo@sha256:digest'\",\n        )\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.ArtifactNameFormatError-functions","title":"Functions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.ArtifactNameFormatError.__init__","title":"<code>__init__(s: str) -&gt; None</code>","text":"Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def __init__(self, s: str) -&gt; None:\n    super().__init__(\n        f\"Artifact string {s} is not in the correct format. \"\n        \"Expected 'project/repo:tag' OR 'project/repo@sha256:digest'\",\n    )\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.Exiter","title":"<code>Exiter</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol class for exit function that can be passed to an exception handler function.</p> See Also <p>harbor_cli.exceptions.HandleFunc</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class Exiter(Protocol):\n    \"\"\"Protocol class for exit function that can be passed to an\n    exception handler function.\n\n    See Also\n    --------\n    [harbor_cli.exceptions.HandleFunc][]\n    \"\"\"\n\n    def __call__(\n        self, msg: str, code: int = ..., prefix: str = ..., **extra: Any\n    ) -&gt; NoReturn: ...\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.Exiter-functions","title":"Functions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.Exiter.__call__","title":"<code>__call__(msg: str, code: int = ..., prefix: str = ..., **extra: Any) -&gt; NoReturn</code>","text":"Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def __call__(\n    self, msg: str, code: int = ..., prefix: str = ..., **extra: Any\n) -&gt; NoReturn: ...\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.HandleFunc","title":"<code>HandleFunc</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Interface for exception handler functions.</p> <p>They take any exception and an Exiter function as the arguments and exit with the appropriate message after running any necessary cleanup and/or logging.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>@runtime_checkable\nclass HandleFunc(Protocol):\n    \"\"\"Interface for exception handler functions.\n\n    They take any exception and an Exiter function as the arguments\n    and exit with the appropriate message after running any necessary\n    cleanup and/or logging.\n    \"\"\"\n\n    def __call__(self, e: Any, exiter: Exiter) -&gt; NoReturn: ...\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.HandleFunc-functions","title":"Functions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.HandleFunc.__call__","title":"<code>__call__(e: Any, exiter: Exiter) -&gt; NoReturn</code>","text":"Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def __call__(self, e: Any, exiter: Exiter) -&gt; NoReturn: ...\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.Default","title":"<code>Default</code>","text":"<p>               Bases: <code>Dict[str, Any]</code></p> <p>Dict subclass used for str.format_map() to provide default. Missing keys are replaced with the key surrounded by curly braces.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class Default(Dict[str, Any]):\n    \"\"\"Dict subclass used for str.format_map() to provide default.\n    Missing keys are replaced with the key surrounded by curly braces.\n    \"\"\"\n\n    def __missing__(self, key: str) -&gt; str:\n        return \"{\" + key + \"}\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.Default-functions","title":"Functions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.Default.__missing__","title":"<code>__missing__(key: str) -&gt; str</code>","text":"Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def __missing__(self, key: str) -&gt; str:\n    return \"{\" + key + \"}\"\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions-functions","title":"Functions","text":""},{"location":"reference/exceptions/#harbor_cli.exceptions.handle_status_error","title":"<code>handle_status_error(e: StatusError, exiter: Exiter) -&gt; NoReturn</code>","text":"<p>Handles an HTTP status error from the Harbor API and exits with the appropriate message.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def handle_status_error(e: StatusError, exiter: Exiter) -&gt; NoReturn:\n    \"\"\"Handles an HTTP status error from the Harbor API and exits with\n    the appropriate message.\n    \"\"\"\n    from .logs import logger\n    from .output.console import exit_err  # avoid circular import\n\n    # It's not _guaranteed_ that the StatusError has a __cause__, but\n    # in practice it should always have one. It is up to harborapi to\n    # ensure that this is the case, but it's currently not guaranteed.\n    # In the cases where it's not, we just exit with the default message.\n    if not e.__cause__:\n        exit_err(str(e))\n\n    url = e.__cause__.request.url\n    method = e.__cause__.request.method\n    httpx_message = e.__cause__.args[0]\n\n    # Log all errors from the API\n    for error in e.errors:\n        logger.error(f\"{error.code}: {error.message}\")\n\n    # Exception has custom message if its message is different from the\n    # underlying HTTPX exception's message\n    msg = e.args[0]\n    has_default_message = httpx_message == msg\n\n    # Use custom message from our mapping if the exception has default HTTPX msg\n    # and we have a custom message for the exception type\n    # The default HTTPX messages are not very helpful.\n    if has_default_message:\n        template = MESSAGE_MAPPING.get(type(e), None)\n        if template:\n            msg = template.format_map(Default(url=url, method=method))\n    exit_err(msg)\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.handle_keyring_error","title":"<code>handle_keyring_error(e: KeyringError, exiter: Exiter) -&gt; NoReturn</code>","text":"<p>Handles a keyring error and exits with the appropriate message.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def handle_keyring_error(e: KeyringError, exiter: Exiter) -&gt; NoReturn:\n    \"\"\"Handles a keyring error and exits with the appropriate message.\"\"\"\n    if sys.platform == \"darwin\":\n        if (\n            isinstance(e, (PasswordSetError, PasswordDeleteError))\n            and e.__context__\n            and e.__context__.args\n            and e.__context__.args[0] == -25244\n        ):\n            _handle_keyring_error_25244_macos(e, exiter)\n    exiter(f\"A keyring error occurred: {e}\", exc_info=True)\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.handle_validationerror","title":"<code>handle_validationerror(e: ValidationError, exiter: Exiter) -&gt; NoReturn</code>","text":"<p>Handles a pydantic ValidationError and exits with the appropriate message.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def handle_validationerror(e: ValidationError, exiter: Exiter) -&gt; NoReturn:\n    \"\"\"Handles a pydantic ValidationError and exits with the appropriate message.\"\"\"\n    exiter(f\"Failed to validate data from API: {e}\", errors=e.errors(), exc_info=True)\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.handle_notraceback","title":"<code>handle_notraceback(e: HarborCLIError, exiter: Exiter) -&gt; NoReturn</code>","text":"<p>Handles an exception (no traceback).</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def handle_notraceback(e: HarborCLIError, exiter: Exiter) -&gt; NoReturn:\n    \"\"\"Handles an exception (no traceback).\"\"\"\n    exiter(str(e), exc_info=True)\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.get_exception_handler","title":"<code>get_exception_handler(type_: Type[Exception]) -&gt; Optional[HandleFunc]</code>","text":"<p>Returns the exception handler for the given exception type.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def get_exception_handler(type_: Type[Exception]) -&gt; Optional[HandleFunc]:\n    \"\"\"Returns the exception handler for the given exception type.\"\"\"\n    handler = EXC_HANDLERS.get(type_, None)\n    if handler:\n        return handler\n    if type_.__bases__:\n        for base in type_.__bases__:\n            handler = get_exception_handler(base)\n            if handler:\n                return handler\n    return None\n</code></pre>"},{"location":"reference/exceptions/#harbor_cli.exceptions.handle_exception","title":"<code>handle_exception(e: Exception) -&gt; NoReturn</code>","text":"<p>Handles an exception and exits with the appropriate message.</p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def handle_exception(e: Exception) -&gt; NoReturn:\n    \"\"\"Handles an exception and exits with the appropriate message.\"\"\"\n    from .output.console import exit_err  # avoid circular import\n\n    # TODO: resolve circular imports by lazy-importing OverwriteError in output.render\n\n    exiter = cast(Exiter, exit_err)\n\n    handler = get_exception_handler(type(e))\n    if not handler:\n        raise e\n    handler(e, exiter)\n</code></pre>"},{"location":"reference/format/","title":"Format","text":""},{"location":"reference/format/#harbor_cli.format","title":"<code>harbor_cli.format</code>","text":"<p>Output format of command results.</p> <p>Not a part of the output module to avoid circular imports caused by the instantiation of the global state object, which imports other modules that rely on output formats.</p>"},{"location":"reference/format/#harbor_cli.format-attributes","title":"Attributes","text":""},{"location":"reference/format/#harbor_cli.format.OUTPUTFORMAT_REPR","title":"<code>OUTPUTFORMAT_REPR = {OutputFormat.TABLE: 'table', OutputFormat.JSON: 'JSON'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/format/#harbor_cli.format.OUTPUTFORMAT_EMOJI","title":"<code>OUTPUTFORMAT_EMOJI = {OutputFormat.TABLE: ':page_facing_up:', OutputFormat.JSON: ':package:'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/format/#harbor_cli.format-classes","title":"Classes","text":""},{"location":"reference/format/#harbor_cli.format.OutputFormat","title":"<code>OutputFormat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Output format of the command result.</p> Source code in <code>harbor_cli/format.py</code> <pre><code>class OutputFormat(Enum):\n    \"\"\"Output format of the command result.\"\"\"\n\n    TABLE = \"table\"\n    JSON = \"json\"\n</code></pre>"},{"location":"reference/format/#harbor_cli.format.OutputFormat-attributes","title":"Attributes","text":""},{"location":"reference/format/#harbor_cli.format.OutputFormat.TABLE","title":"<code>TABLE = 'table'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/format/#harbor_cli.format.OutputFormat.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/format/#harbor_cli.format-functions","title":"Functions","text":""},{"location":"reference/format/#harbor_cli.format.output_format_repr","title":"<code>output_format_repr(fmt: OutputFormat) -&gt; str</code>","text":"<p>Return a human-readable representation of an output format.</p> Source code in <code>harbor_cli/format.py</code> <pre><code>def output_format_repr(fmt: OutputFormat) -&gt; str:\n    \"\"\"Return a human-readable representation of an output format.\"\"\"\n    f = OUTPUTFORMAT_REPR.get(fmt)\n    if f is None:\n        warning(f\"Unknown output format: {fmt}\")\n        f = \"Unknown\"\n    return f\n</code></pre>"},{"location":"reference/format/#harbor_cli.format.output_format_emoji","title":"<code>output_format_emoji(fmt: OutputFormat) -&gt; str</code>","text":"<p>Return an emoji for an output format.</p> Source code in <code>harbor_cli/format.py</code> <pre><code>def output_format_emoji(fmt: OutputFormat) -&gt; str:\n    \"\"\"Return an emoji for an output format.\"\"\"\n    f = OUTPUTFORMAT_EMOJI.get(fmt)\n    if f is None:\n        warning(f\"Unknown output format: {fmt}\")\n        f = \":question:\"\n    return f\n</code></pre>"},{"location":"reference/logs/","title":"Logs","text":""},{"location":"reference/logs/#harbor_cli.logs","title":"<code>harbor_cli.logs</code>","text":""},{"location":"reference/logs/#harbor_cli.logs-attributes","title":"Attributes","text":""},{"location":"reference/logs/#harbor_cli.logs.logger","title":"<code>logger = logging.getLogger('harbor-cli')</code>  <code>module-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs-classes","title":"Classes","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel","title":"<code>LogLevel</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for log levels.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>class LogLevel(Enum):\n    \"\"\"Enum for log levels.\"\"\"\n\n    NOTSET = \"NOTSET\"\n    DEBUG = \"DEBUG\"\n    INFO = \"INFO\"\n    WARN = \"WARN\"\n    WARNING = \"WARNING\"\n    ERROR = \"ERROR\"\n    FATAL = \"FATAL\"\n    CRITICAL = \"CRITICAL\"\n\n    @classmethod\n    def _missing_(cls, value: object) -&gt; LogLevel:\n        \"\"\"Convert string to enum value.\n\n        Raises\n        ------\n        ValueError\n            If the value is not a valid log level.\n        \"\"\"\n        if not isinstance(value, str):\n            raise TypeError(f\"Expected str, got {type(value)}\")\n        for member in cls:\n            if member.value == value.upper():\n                return member\n        raise ValueError(f\"{value} is not a valid log level.\")\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return the enum value as a string.\"\"\"\n        return self.value\n\n    def as_int(self) -&gt; int:\n        \"\"\"Return the stdlib log level int corresponding to the level.\"\"\"\n        res = logging.getLevelName(self.value)\n        if not isinstance(res, int):\n            return logging.NOTSET\n        return res\n\n    @classmethod\n    def levels(cls) -&gt; dict[LogLevel, int]:\n        \"\"\"Return a dict of all log levels and their corresponding int values.\"\"\"\n        return {level: level.as_int() for level in cls}\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.LogLevel-attributes","title":"Attributes","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.NOTSET","title":"<code>NOTSET = 'NOTSET'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.DEBUG","title":"<code>DEBUG = 'DEBUG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.INFO","title":"<code>INFO = 'INFO'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.WARN","title":"<code>WARN = 'WARN'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.WARNING","title":"<code>WARNING = 'WARNING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.ERROR","title":"<code>ERROR = 'ERROR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.FATAL","title":"<code>FATAL = 'FATAL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.CRITICAL","title":"<code>CRITICAL = 'CRITICAL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel-functions","title":"Functions","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLevel.__str__","title":"<code>__str__() -&gt; str</code>","text":"<p>Return the enum value as a string.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the enum value as a string.\"\"\"\n    return self.value\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.LogLevel.as_int","title":"<code>as_int() -&gt; int</code>","text":"<p>Return the stdlib log level int corresponding to the level.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def as_int(self) -&gt; int:\n    \"\"\"Return the stdlib log level int corresponding to the level.\"\"\"\n    res = logging.getLevelName(self.value)\n    if not isinstance(res, int):\n        return logging.NOTSET\n    return res\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.LogLevel.levels","title":"<code>levels() -&gt; dict[LogLevel, int]</code>  <code>classmethod</code>","text":"<p>Return a dict of all log levels and their corresponding int values.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>@classmethod\ndef levels(cls) -&gt; dict[LogLevel, int]:\n    \"\"\"Return a dict of all log levels and their corresponding int values.\"\"\"\n    return {level: level.as_int() for level in cls}\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.LogLineFormatter","title":"<code>LogLineFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>Replaces newlines in log messages with spaces.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>class LogLineFormatter(logging.Formatter):\n    \"\"\"Replaces newlines in log messages with spaces.\"\"\"\n\n    def format(self, record: logging.LogRecord) -&gt; str:\n        \"\"\"Format the log message.\"\"\"\n        record.msg = record.msg.replace(\"\\n\", \" \")\n        return super().format(record)\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.LogLineFormatter-functions","title":"Functions","text":""},{"location":"reference/logs/#harbor_cli.logs.LogLineFormatter.format","title":"<code>format(record: logging.LogRecord) -&gt; str</code>","text":"<p>Format the log message.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def format(self, record: logging.LogRecord) -&gt; str:\n    \"\"\"Format the log message.\"\"\"\n    record.msg = record.msg.replace(\"\\n\", \" \")\n    return super().format(record)\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs-functions","title":"Functions","text":""},{"location":"reference/logs/#harbor_cli.logs.setup_logging","title":"<code>setup_logging(config: LoggingSettings) -&gt; None</code>","text":"<p>Set up file logging.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def setup_logging(config: LoggingSettings) -&gt; None:\n    \"\"\"Set up file logging.\"\"\"\n    if not logger.disabled:  # prevent re-configuring in REPL\n        return\n    file_handler = _get_file_handler(config)\n    logger.addHandler(file_handler)\n    logger.disabled = False\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.update_logging","title":"<code>update_logging(config: LoggingSettings) -&gt; None</code>","text":"<p>Update logging configuration.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def update_logging(config: LoggingSettings) -&gt; None:\n    \"\"\"Update logging configuration.\"\"\"\n    if logger.handlers:\n        if not config.enabled:\n            disable_logging()\n        else:\n            file_handler = _get_file_handler(config)\n            replace_handler(file_handler)\n    else:\n        setup_logging(config)\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.replace_handler","title":"<code>replace_handler(handler: logging.Handler) -&gt; None</code>","text":"<p>Replace the file handler with the given handler.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def replace_handler(handler: logging.Handler) -&gt; None:\n    \"\"\"Replace the file handler with the given handler.\"\"\"\n    logger.removeHandler(logger.handlers[0])\n    logger.addHandler(handler)\n</code></pre>"},{"location":"reference/logs/#harbor_cli.logs.disable_logging","title":"<code>disable_logging() -&gt; None</code>","text":"<p>Disable logging.</p> Source code in <code>harbor_cli/logs.py</code> <pre><code>def disable_logging() -&gt; None:\n    \"\"\"Disable logging.\"\"\"\n    logger.handlers.clear()\n    logger.disabled = True\n</code></pre>"},{"location":"reference/main/","title":"Main","text":""},{"location":"reference/main/#harbor_cli.main","title":"<code>harbor_cli.main</code>","text":""},{"location":"reference/main/#harbor_cli.main-attributes","title":"Attributes","text":""},{"location":"reference/main/#harbor_cli.main.CONFIG_EXEMPT_GROUPS","title":"<code>CONFIG_EXEMPT_GROUPS = {'cli-config', 'find', 'sample-config', 'version'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#harbor_cli.main-classes","title":"Classes","text":""},{"location":"reference/main/#harbor_cli.main-functions","title":"Functions","text":""},{"location":"reference/main/#harbor_cli.main.is_config_exempt","title":"<code>is_config_exempt(ctx: typer.Context)</code>","text":"<p>Check if the command is exempt from requiring a config.</p> Source code in <code>harbor_cli/main.py</code> <pre><code>def is_config_exempt(ctx: typer.Context):\n    \"\"\"Check if the command is exempt from requiring a config.\"\"\"\n    if not ctx.invoked_subcommand:  # no subcommand might require a config?\n        return False\n    if ctx.invoked_subcommand in CONFIG_EXEMPT_GROUPS:\n        return True\n    return False\n</code></pre>"},{"location":"reference/main/#harbor_cli.main.check_version_param","title":"<code>check_version_param(ctx: typer.Context, version: bool) -&gt; None</code>","text":"<p>Check if --version was passed, and if so, print version and exit.</p> Source code in <code>harbor_cli/main.py</code> <pre><code>def check_version_param(ctx: typer.Context, version: bool) -&gt; None:\n    \"\"\"Check if --version was passed, and if so, print version and exit.\"\"\"\n    # Print version and exit if --version\n    if version:\n        exit_ok(f\"{APP_NAME} version {__version__}\")\n    # Show error if no command and no version option\n    if not version and not ctx.invoked_subcommand:\n        raise click.UsageError(\"Missing command.\")\n</code></pre>"},{"location":"reference/main/#harbor_cli.main.main_callback","title":"<code>main_callback(ctx: typer.Context, config_file: Optional[Path] = Option(None, '--config', '-c', help='Path to config file.', envvar=EnvVar.CONFIG), harbor_url: Optional[str] = Option(None, '--url', '-u', Deprecated('--harbor-url', replacement='--url'), help=f'Harbor API URL.', envvar=EnvVar.URL, config_override='harbor.url', rich_help_panel='Harbor'), harbor_username: Optional[str] = Option(None, '--username', '-U', Deprecated('--harbor-username', replacement='--username'), help=f'Harbor username.', envvar=EnvVar.USERNAME, config_override='harbor.username', rich_help_panel='Harbor'), harbor_secret: Optional[str] = Option(None, '--secret', '-S', Deprecated('--harbor-secret', replacement='--secret'), help=f'Harbor secret (password).', envvar=EnvVar.SECRET, config_override='harbor.secret', rich_help_panel='Harbor'), harbor_basicauth: Optional[str] = Option(None, Deprecated('--basicauth'), Deprecated('-B'), help=f'Harbor basic access credentials (base64).', envvar=EnvVar.BASICAUTH, config_override='harbor.basicauth', rich_help_panel='Harbor'), harbor_credentials_file: Optional[Path] = Option(None, '--credentials-file', '-F', help=f'Path to Harbor JSON credentials file.', envvar=EnvVar.CREDENTIALS_FILE, config_override='harbor.credentials_file', rich_help_panel='Harbor'), harbor_validate: Optional[bool] = Option(None, '--validate/--no-validate', help=f'Validate Harbor API response data. Forces JSON output format if disabled.', envvar=EnvVar.HARBOR_VALIDATE_DATA, config_override='harbor.validate_data', rich_help_panel='Harbor'), harbor_raw_mode: Optional[bool] = Option(None, '--raw/--no-raw', help=f'Return raw data from Harbor API. Overrides all output formatting options.', envvar=EnvVar.HARBOR_RAW_MODE, config_override='harbor.raw_mode', rich_help_panel='Harbor'), harbor_verify_ssl: Optional[bool] = Option(None, '--verify-ssl/--no-verify-ssl', help=f'Verify SSL certificates when connecting to Harbor.', envvar=EnvVar.HARBOR_VERIFY_SSL, config_override='harbor.verify_ssl', rich_help_panel='Harbor'), harbor_retry_enabled: Optional[bool] = Option(None, '--retry/--no-retry', help=f'Retry failed HTTP requests.', envvar=EnvVar.HARBOR_RETRY_ENABLED, config_override='harbor.retry.enabled', rich_help_panel='Harbor'), harbor_retry_max_tries: Optional[int] = Option(None, '--retry-max-tries', help=f'Number of times to retry failed HTTP requests.', envvar=EnvVar.HARBOR_RETRY_MAX_TRIES, config_override='harbor.retry.max_tries', rich_help_panel='Harbor'), harbor_retry_max_time: Optional[float] = Option(None, '--retry-max-time', help=f'Maximum number of seconds to retry failed HTTP requests.', envvar=EnvVar.HARBOR_RETRY_MAX_TIME, config_override='harbor.retry.max_time', rich_help_panel='Harbor'), show_description: Optional[bool] = Option(None, '--table-description/--no-table-description', help='Include field descriptions in tables.', envvar=EnvVar.TABLE_DESCRIPTION, config_override='output.table.description', rich_help_panel='Output'), max_depth: Optional[int] = Option(None, '--table-max-depth', help='Maximum depth to print nested objects in tables.', envvar=EnvVar.TABLE_MAX_DEPTH, config_override='output.table.max_depth', rich_help_panel='Output'), compact: Optional[bool] = Option(None, '--table-compact/--no-table-compact', help='Compact table output. Has no effect on other formats. ', envvar=EnvVar.TABLE_COMPACT, config_override='output.table.compact', rich_help_panel='Output'), json_indent: Optional[int] = Option(None, '--json-indent', help='Indentation level for JSON output.', envvar=EnvVar.JSON_INDENT, config_override='output.json.indent', rich_help_panel='Output'), json_sort_keys: Optional[bool] = Option(None, '--json-sort-keys/--no-json-sort-keys', help='Sort keys in JSON output.', envvar=EnvVar.JSON_SORT_KEYS, config_override='output.json.sort_keys', rich_help_panel='Output'), output_format: Optional[OutputFormat] = Option(None, '--format', '-f', help=f'Specifies the output format to use.', envvar=EnvVar.OUTPUT_FORMAT, case_sensitive=False, config_override='output.format', rich_help_panel='Output'), paging: Optional[bool] = Option(None, '--paging/--no-paging', help='Display output in a pager (less, etc.).', envvar=EnvVar.PAGING, config_override='output.paging', rich_help_panel='Output'), pager: Optional[str] = Option(None, '--pager', help='Pager command to use. The default Rich pager will be used.', envvar=EnvVar.PAGER, config_override='output.pager', rich_help_panel='Output'), confirm_deletion: Optional[bool] = Option(None, '--confirm-deletion/--no-confirm-deletion', help='Confirm before deleting resources.', envvar=EnvVar.CONFIRM_DELETION, config_override='general.confirm_deletion', rich_help_panel='Confirmation &amp; Alerts'), confirm_enumeration: Optional[bool] = Option(None, '--confirm-enumeration/--no-confirm-enumeration', help='Confirm before enumerating all resources without a limit or query.', envvar=EnvVar.CONFIRM_ENUMERATION, config_override='general.confirm_enumeration', rich_help_panel='Confirmation &amp; Alerts'), warnings: Optional[bool] = Option(None, '--warnings/--no-warnings', help='Show/hide warnings.', envvar=EnvVar.WARNINGS, config_override='general.warnings', rich_help_panel='Confirmation &amp; Alerts'), cache_enabled: Optional[bool] = Option(None, Deprecated('--cache/--no-cache'), help='Enable caching of API responses.', config_override='cache.enabled', hidden=True), cache_ttl: Optional[int] = Option(None, Deprecated('--cache-ttl'), help='Cache TTL in seconds.', config_override='cache.ttl', hidden=True), output_file: Optional[Path] = Option(None, '--output', '-o', help='Output file, by default None, which means output to stdout. If the file already exists, it will be overwritten.', rich_help_panel='Output'), no_overwrite: bool = Option(False, '--no-overwrite', help='Do not overwrite the output file if it already exists.', rich_help_panel='Output'), verbose: bool = Option(False, '--verbose', '-v', help='Enable verbose output.', rich_help_panel='Output'), with_stdout: bool = Option(False, '--with-stdout', help='Output to stdout in addition to the specified output file, if any. Has no effect if no output file is specified.', rich_help_panel='Output'), version: bool = Option(None, '--version', help='Show application version and exit.')) -&gt; None</code>","text":"<p>Global configuration options.</p> <p>Most options passed in to this callback will override specific config file values. If an option is omitted, the config file value will be used.</p> Source code in <code>harbor_cli/main.py</code> <pre><code>@app.callback(no_args_is_help=True, invoke_without_command=True)\ndef main_callback(\n    ctx: typer.Context,\n    # Configuration options\n    config_file: Optional[Path] = Option(\n        None,\n        \"--config\",\n        \"-c\",\n        help=\"Path to config file.\",\n        envvar=EnvVar.CONFIG,\n    ),\n    # Harbor options\n    harbor_url: Optional[str] = Option(\n        None,\n        \"--url\",\n        \"-u\",\n        Deprecated(\"--harbor-url\", replacement=\"--url\"),\n        help=f\"Harbor API URL.\",\n        envvar=EnvVar.URL,\n        config_override=\"harbor.url\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_username: Optional[str] = Option(\n        None,\n        \"--username\",\n        \"-U\",\n        Deprecated(\"--harbor-username\", replacement=\"--username\"),\n        help=f\"Harbor username.\",\n        envvar=EnvVar.USERNAME,\n        config_override=\"harbor.username\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_secret: Optional[str] = Option(\n        None,\n        \"--secret\",\n        \"-S\",\n        Deprecated(\"--harbor-secret\", replacement=\"--secret\"),\n        help=f\"Harbor secret (password).\",\n        envvar=EnvVar.SECRET,\n        config_override=\"harbor.secret\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_basicauth: Optional[str] = Option(\n        None,\n        Deprecated(\"--basicauth\"),\n        Deprecated(\"-B\"),\n        help=f\"Harbor basic access credentials (base64).\",\n        envvar=EnvVar.BASICAUTH,\n        config_override=\"harbor.basicauth\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_credentials_file: Optional[Path] = Option(\n        None,\n        \"--credentials-file\",\n        \"-F\",\n        help=f\"Path to Harbor JSON credentials file.\",\n        envvar=EnvVar.CREDENTIALS_FILE,\n        config_override=\"harbor.credentials_file\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_validate: Optional[bool] = Option(\n        None,\n        \"--validate/--no-validate\",\n        help=f\"Validate Harbor API response data. Forces JSON output format if disabled.\",\n        envvar=EnvVar.HARBOR_VALIDATE_DATA,\n        config_override=\"harbor.validate_data\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_raw_mode: Optional[bool] = Option(\n        None,\n        \"--raw/--no-raw\",\n        help=f\"Return raw data from Harbor API. Overrides all output formatting options.\",\n        envvar=EnvVar.HARBOR_RAW_MODE,\n        config_override=\"harbor.raw_mode\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_verify_ssl: Optional[bool] = Option(\n        None,\n        \"--verify-ssl/--no-verify-ssl\",\n        help=f\"Verify SSL certificates when connecting to Harbor.\",\n        envvar=EnvVar.HARBOR_VERIFY_SSL,\n        config_override=\"harbor.verify_ssl\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_retry_enabled: Optional[bool] = Option(\n        None,\n        \"--retry/--no-retry\",\n        help=f\"Retry failed HTTP requests.\",\n        envvar=EnvVar.HARBOR_RETRY_ENABLED,\n        config_override=\"harbor.retry.enabled\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_retry_max_tries: Optional[int] = Option(\n        None,\n        \"--retry-max-tries\",\n        help=f\"Number of times to retry failed HTTP requests.\",\n        envvar=EnvVar.HARBOR_RETRY_MAX_TRIES,\n        config_override=\"harbor.retry.max_tries\",\n        rich_help_panel=\"Harbor\",\n    ),\n    harbor_retry_max_time: Optional[float] = Option(\n        None,\n        \"--retry-max-time\",\n        help=f\"Maximum number of seconds to retry failed HTTP requests.\",\n        envvar=EnvVar.HARBOR_RETRY_MAX_TIME,\n        config_override=\"harbor.retry.max_time\",\n        rich_help_panel=\"Harbor\",\n    ),\n    # Formatting\n    show_description: Optional[bool] = Option(\n        None,\n        \"--table-description/--no-table-description\",\n        help=\"Include field descriptions in tables.\",\n        envvar=EnvVar.TABLE_DESCRIPTION,\n        config_override=\"output.table.description\",\n        rich_help_panel=\"Output\",\n    ),\n    max_depth: Optional[int] = Option(\n        None,\n        \"--table-max-depth\",\n        help=\"Maximum depth to print nested objects in tables.\",\n        envvar=EnvVar.TABLE_MAX_DEPTH,\n        config_override=\"output.table.max_depth\",\n        rich_help_panel=\"Output\",\n    ),\n    compact: Optional[bool] = Option(\n        None,\n        \"--table-compact/--no-table-compact\",\n        help=\"Compact table output. Has no effect on other formats. \",\n        envvar=EnvVar.TABLE_COMPACT,\n        config_override=\"output.table.compact\",\n        rich_help_panel=\"Output\",\n    ),\n    json_indent: Optional[int] = Option(\n        None,\n        \"--json-indent\",\n        help=\"Indentation level for JSON output.\",\n        envvar=EnvVar.JSON_INDENT,\n        config_override=\"output.json.indent\",\n        rich_help_panel=\"Output\",\n    ),\n    json_sort_keys: Optional[bool] = Option(\n        None,\n        \"--json-sort-keys/--no-json-sort-keys\",\n        help=\"Sort keys in JSON output.\",\n        envvar=EnvVar.JSON_SORT_KEYS,\n        config_override=\"output.json.sort_keys\",\n        rich_help_panel=\"Output\",\n    ),\n    # Output options\n    output_format: Optional[OutputFormat] = Option(\n        None,\n        \"--format\",\n        \"-f\",\n        help=f\"Specifies the output format to use.\",\n        envvar=EnvVar.OUTPUT_FORMAT,\n        case_sensitive=False,\n        config_override=\"output.format\",\n        rich_help_panel=\"Output\",\n    ),\n    paging: Optional[bool] = Option(\n        None,\n        \"--paging/--no-paging\",\n        help=\"Display output in a pager (less, etc.).\",\n        envvar=EnvVar.PAGING,\n        config_override=\"output.paging\",\n        rich_help_panel=\"Output\",\n    ),\n    pager: Optional[str] = Option(\n        None,\n        \"--pager\",\n        help=\"Pager command to use. The default Rich pager will be used.\",\n        envvar=EnvVar.PAGER,\n        config_override=\"output.pager\",\n        rich_help_panel=\"Output\",\n    ),\n    # General options\n    confirm_deletion: Optional[bool] = Option(\n        None,\n        \"--confirm-deletion/--no-confirm-deletion\",\n        help=\"Confirm before deleting resources.\",\n        envvar=EnvVar.CONFIRM_DELETION,\n        config_override=\"general.confirm_deletion\",\n        rich_help_panel=\"Confirmation &amp; Alerts\",\n    ),\n    confirm_enumeration: Optional[bool] = Option(\n        None,\n        \"--confirm-enumeration/--no-confirm-enumeration\",\n        help=\"Confirm before enumerating all resources without a limit or query.\",\n        envvar=EnvVar.CONFIRM_ENUMERATION,\n        config_override=\"general.confirm_enumeration\",\n        rich_help_panel=\"Confirmation &amp; Alerts\",\n    ),\n    warnings: Optional[bool] = Option(\n        None,\n        \"--warnings/--no-warnings\",\n        help=\"Show/hide warnings.\",\n        envvar=EnvVar.WARNINGS,\n        config_override=\"general.warnings\",\n        rich_help_panel=\"Confirmation &amp; Alerts\",\n    ),\n    # Cache options (DEPRECATED)\n    cache_enabled: Optional[bool] = Option(\n        None,\n        Deprecated(\"--cache/--no-cache\"),\n        help=\"Enable caching of API responses.\",\n        config_override=\"cache.enabled\",\n        hidden=True,\n    ),\n    cache_ttl: Optional[int] = Option(\n        None,\n        Deprecated(\"--cache-ttl\"),\n        help=\"Cache TTL in seconds.\",\n        config_override=\"cache.ttl\",\n        hidden=True,\n    ),\n    # Output options that don't belong to the config file\n    output_file: Optional[Path] = Option(\n        None,\n        \"--output\",\n        \"-o\",\n        help=\"Output file, by default None, which means output to stdout. If the file already exists, it will be overwritten.\",\n        rich_help_panel=\"Output\",\n    ),\n    no_overwrite: bool = Option(\n        False,\n        \"--no-overwrite\",\n        help=\"Do not overwrite the output file if it already exists.\",\n        rich_help_panel=\"Output\",\n    ),\n    # stdout/stderr options\n    verbose: bool = Option(\n        False,\n        \"--verbose\",\n        \"-v\",\n        help=\"Enable verbose output.\",\n        rich_help_panel=\"Output\",\n    ),\n    with_stdout: bool = Option(\n        False,\n        \"--with-stdout\",\n        help=\"Output to stdout in addition to the specified output file, if any. Has no effect if no output file is specified.\",\n        rich_help_panel=\"Output\",\n    ),\n    # Version\n    version: bool = Option(\n        None,\n        \"--version\",\n        help=\"Show application version and exit.\",\n    ),\n) -&gt; None:\n    \"\"\"\n    Global configuration options.\n\n    Most options passed in to this callback will override specific config\n    file values. If an option is omitted, the config file value will be used.\n    \"\"\"\n    check_version_param(ctx, version)\n    issue_deprecation_warnings(ctx)\n\n    state = get_state()\n\n    # These commands don't require state management\n    # and can be run without a config file or client.\n    if is_config_exempt(ctx):\n        # try to load the config file, but don't fail if it doesn't exist\n        state.try_load_config(config_file, create=False)\n        return\n\n    # TODO: Can we do this more efficiently?\n    # Abort callback if help is requested.\n    if any(help_arg in sys.argv for help_arg in ctx.help_option_names):\n        return\n\n    # At this point we require an active configuation, be it from a file\n    # loaded from disk or a default configuration.\n    state.try_load_config(config_file, create=True)\n    state.check_keyring_available()\n    _restore_config(state)  # necessary for overrides to to reset in REPL\n\n    # Set config overrides\n    # Harbor\n    if harbor_url is not None:\n        state.config.harbor.url = harbor_url\n    if harbor_username is not None:\n        state.config.harbor.username = harbor_username\n    if harbor_secret is not None:\n        state.config.harbor.secret = harbor_secret  # type: ignore # Pydantic.SecretStr\n        state.config.harbor.keyring = False\n    if harbor_basicauth is not None:\n        state.config.harbor.basicauth = harbor_basicauth  # type: ignore # Pydantic.SecretStr\n    if harbor_credentials_file is not None:\n        state.config.harbor.credentials_file = harbor_credentials_file\n    if harbor_validate is not None:\n        state.config.harbor.validate_data = harbor_validate\n    if harbor_raw_mode is not None:\n        state.config.harbor.raw_mode = harbor_raw_mode\n    if harbor_verify_ssl is not None:\n        state.config.harbor.verify_ssl = harbor_verify_ssl\n    # Harbor retry\n    if harbor_retry_enabled is not None:\n        state.config.harbor.retry.enabled = harbor_retry_enabled\n    if harbor_retry_max_tries is not None:\n        state.config.harbor.retry.max_tries = harbor_retry_max_tries\n    if harbor_retry_max_time is not None:\n        state.config.harbor.retry.max_time = harbor_retry_max_time\n    # Output\n    if compact is not None:\n        state.config.output.table.compact = compact\n    if show_description is not None:\n        state.config.output.table.description = show_description\n    if max_depth is not None:\n        state.config.output.table.max_depth = max_depth\n    if json_indent is not None:\n        state.config.output.JSON.indent = json_indent\n    if json_sort_keys is not None:\n        state.config.output.JSON.sort_keys = json_sort_keys\n    if output_format is not None:\n        state.config.output.format = output_format\n    if paging is not None:\n        state.config.output.paging = paging\n    if pager is not None:\n        state.config.output.pager = pager\n    # General\n    if confirm_enumeration is not None:\n        state.config.general.confirm_enumeration = confirm_enumeration\n    if confirm_deletion is not None:\n        state.config.general.confirm_deletion = confirm_deletion\n    if warnings is not None:\n        state.config.general.warnings = warnings\n\n    # Set global options\n    state.options.verbose = verbose\n    state.options.output_file = output_file\n    state.options.no_overwrite = no_overwrite\n    state.options.with_stdout = with_stdout\n\n    # Run configuration based on config file\n    configure_from_config(state.config)\n</code></pre>"},{"location":"reference/main/#harbor_cli.main.configure_from_config","title":"<code>configure_from_config(config: HarborCLIConfig) -&gt; None</code>","text":"<p>Configure the program from a config file.</p> Source code in <code>harbor_cli/main.py</code> <pre><code>def configure_from_config(config: HarborCLIConfig) -&gt; None:\n    \"\"\"Configure the program from a config file.\"\"\"\n    # TODO: Include more setup here\n    if config.logging.enabled:\n        setup_logging(config.logging)\n    else:\n        disable_logging()\n</code></pre>"},{"location":"reference/main/#harbor_cli.main.main","title":"<code>main() -&gt; None</code>","text":"<p>Main entry point for the CLI.</p> Source code in <code>harbor_cli/main.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main entry point for the CLI.\"\"\"\n    try:\n        app()\n    except HarborCLIError as e:\n        # exceptions of this type are expected, and if they're\n        # not handled internally (i.e. other function calls exit_ok()),\n        # we want to only display their message and exit with a\n        # non-zero status code.\n        exit_err(str(e))\n    except Exception as e:\n        handle_exception(e)\n</code></pre>"},{"location":"reference/models/","title":"Models","text":""},{"location":"reference/models/#harbor_cli.models","title":"<code>harbor_cli.models</code>","text":"<p>Models used by various modules.</p> <p>Defined here to avoid circular imports when using these models in multiple modules that otherwise can't mutually import each other. Refactor to module (directory with init.py) if needed.</p>"},{"location":"reference/models/#harbor_cli.models-classes","title":"Classes","text":""},{"location":"reference/models/#harbor_cli.models.BaseModel","title":"<code>BaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/models.py</code> <pre><code>class BaseModel(HarborAPIBaseModel):\n    pass\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ParamSummary","title":"<code>ParamSummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Serializable representation of a click.Parameter.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class ParamSummary(BaseModel):\n    \"\"\"Serializable representation of a click.Parameter.\"\"\"\n\n    allow_from_autoenv: Optional[bool] = None\n    confirmation_prompt: Optional[bool] = None\n    choices: Optional[List[str]] = None\n    count: Optional[bool] = None\n    default: Optional[Any] = None\n    envvar: Optional[Union[str, Sequence[str]]]\n    expose_value: bool\n    flag_value: Optional[Any] = None\n    help: str\n    hidden: Optional[bool] = None\n    human_readable_name: str\n    is_argument: bool\n    is_eager: bool = False\n    is_bool_flag: Optional[bool] = None\n    is_flag: Optional[bool] = None\n    is_option: Optional[bool]\n    max: Optional[int] = None\n    min: Optional[int] = None\n    metavar: Optional[str]\n    multiple: bool\n    name: Optional[str]\n    nargs: int\n    opts: List[str]\n    prompt: Optional[str] = None\n    prompt_required: Optional[bool] = None\n    required: bool\n    secondary_opts: List[str] = []\n    show_choices: Optional[bool] = None\n    show_default: Optional[bool] = None\n    show_envvar: Optional[bool] = None\n    type: str\n    value_from_envvar: Any\n\n    @classmethod\n    def from_param(cls, param: Parameter) -&gt; ParamSummary:\n        \"\"\"Construct a new ParamSummary from a click.Parameter.\"\"\"\n        try:\n            help_ = str(getattr(param, \"help\", None) or \"\")\n        except AttributeError:\n            help_ = \"\"\n\n        is_argument = isinstance(param, (Argument, TyperArgument))\n        return cls(\n            allow_from_autoenv=get(param, \"allow_from_autoenv\"),\n            confirmation_prompt=get(param, \"confirmation_prompt\"),\n            count=get(param, \"count\"),\n            choices=get(param.type, \"choices\"),\n            default=param.default,\n            envvar=param.envvar,\n            expose_value=param.expose_value,\n            flag_value=get(param, \"flag_value\"),\n            help=help_,\n            hidden=get(param, \"hidden\"),\n            human_readable_name=param.human_readable_name,\n            is_argument=is_argument,\n            is_bool_flag=get(param, \"is_bool_flag\"),\n            is_eager=param.is_eager,\n            is_flag=get(param, \"is_flag\"),\n            is_option=get(param, \"is_option\"),\n            max=get(param.type, \"max\"),\n            min=get(param.type, \"min\"),\n            metavar=param.metavar,\n            multiple=param.multiple,\n            name=param.name,\n            nargs=param.nargs,\n            opts=param.opts,\n            prompt=get(param, \"prompt\"),\n            prompt_required=get(param, \"prompt_required\"),\n            required=param.required,\n            secondary_opts=param.secondary_opts,\n            show_choices=get(param, \"show_choices\"),\n            show_default=get(param, \"show_default\"),\n            show_envvar=get(param, \"show_envvar\"),\n            type=param.type.name,\n            value_from_envvar=param.value_from_envvar,\n        )\n\n    @property\n    def help_plain(self) -&gt; str:\n        return markup_as_plain_text(self.help)\n\n    @property\n    def help_md(self) -&gt; str:\n        return markup_to_markdown(self.help)\n\n    @model_validator(mode=\"before\")\n    def _fmt_metavar(cls, data: dict[str, Any]) -&gt; dict[str, Any]:\n        metavar = data.get(\"metavar\") or data.get(\"human_readable_name\", \"\")\n        assert isinstance(metavar, str)\n        metavar = metavar.upper()\n        if data.get(\"multiple\"):\n            new_metavar = f\"&lt;{metavar},[{metavar}...]&gt;\"\n        else:\n            new_metavar = f\"&lt;{metavar}&gt;\"\n        data[\"metavar\"] = new_metavar\n        return data\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ParamSummary-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.allow_from_autoenv","title":"<code>allow_from_autoenv: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.confirmation_prompt","title":"<code>confirmation_prompt: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.choices","title":"<code>choices: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.count","title":"<code>count: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.default","title":"<code>default: Optional[Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.envvar","title":"<code>envvar: Optional[Union[str, Sequence[str]]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.expose_value","title":"<code>expose_value: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.flag_value","title":"<code>flag_value: Optional[Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.help","title":"<code>help: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.hidden","title":"<code>hidden: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.human_readable_name","title":"<code>human_readable_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.is_argument","title":"<code>is_argument: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.is_eager","title":"<code>is_eager: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.is_bool_flag","title":"<code>is_bool_flag: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.is_flag","title":"<code>is_flag: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.is_option","title":"<code>is_option: Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.max","title":"<code>max: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.min","title":"<code>min: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.metavar","title":"<code>metavar: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.multiple","title":"<code>multiple: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.name","title":"<code>name: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.nargs","title":"<code>nargs: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.opts","title":"<code>opts: List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.prompt","title":"<code>prompt: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.prompt_required","title":"<code>prompt_required: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.required","title":"<code>required: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.secondary_opts","title":"<code>secondary_opts: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.show_choices","title":"<code>show_choices: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.show_default","title":"<code>show_default: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.show_envvar","title":"<code>show_envvar: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.value_from_envvar","title":"<code>value_from_envvar: Any</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.help_plain","title":"<code>help_plain: str</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.help_md","title":"<code>help_md: str</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.ParamSummary.from_param","title":"<code>from_param(param: Parameter) -&gt; ParamSummary</code>  <code>classmethod</code>","text":"<p>Construct a new ParamSummary from a click.Parameter.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_param(cls, param: Parameter) -&gt; ParamSummary:\n    \"\"\"Construct a new ParamSummary from a click.Parameter.\"\"\"\n    try:\n        help_ = str(getattr(param, \"help\", None) or \"\")\n    except AttributeError:\n        help_ = \"\"\n\n    is_argument = isinstance(param, (Argument, TyperArgument))\n    return cls(\n        allow_from_autoenv=get(param, \"allow_from_autoenv\"),\n        confirmation_prompt=get(param, \"confirmation_prompt\"),\n        count=get(param, \"count\"),\n        choices=get(param.type, \"choices\"),\n        default=param.default,\n        envvar=param.envvar,\n        expose_value=param.expose_value,\n        flag_value=get(param, \"flag_value\"),\n        help=help_,\n        hidden=get(param, \"hidden\"),\n        human_readable_name=param.human_readable_name,\n        is_argument=is_argument,\n        is_bool_flag=get(param, \"is_bool_flag\"),\n        is_eager=param.is_eager,\n        is_flag=get(param, \"is_flag\"),\n        is_option=get(param, \"is_option\"),\n        max=get(param.type, \"max\"),\n        min=get(param.type, \"min\"),\n        metavar=param.metavar,\n        multiple=param.multiple,\n        name=param.name,\n        nargs=param.nargs,\n        opts=param.opts,\n        prompt=get(param, \"prompt\"),\n        prompt_required=get(param, \"prompt_required\"),\n        required=param.required,\n        secondary_opts=param.secondary_opts,\n        show_choices=get(param, \"show_choices\"),\n        show_default=get(param, \"show_default\"),\n        show_envvar=get(param, \"show_envvar\"),\n        type=param.type.name,\n        value_from_envvar=param.value_from_envvar,\n    )\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.CommandSummary","title":"<code>CommandSummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Convenience class for accessing information about a command.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class CommandSummary(BaseModel):\n    \"\"\"Convenience class for accessing information about a command.\"\"\"\n\n    category: Optional[str] = None  # not part of TyperCommand\n    deprecated: bool\n    epilog: Optional[str]\n    help: str\n    hidden: bool\n    name: str\n    options_metavar: str\n    params: List[ParamSummary] = []\n    score: int = 0  # match score (not part of TyperCommand)\n    short_help: Optional[str]\n\n    @classmethod\n    def from_command(\n        cls, command: TyperCommand, name: str | None = None, category: str | None = None\n    ) -&gt; CommandSummary:\n        \"\"\"Construct a new CommandSummary from a TyperCommand.\"\"\"\n        return cls(\n            category=category,\n            deprecated=command.deprecated,\n            epilog=command.epilog or \"\",\n            help=command.help or \"\",\n            hidden=command.hidden,\n            name=name or command.name or \"\",\n            options_metavar=command.options_metavar or \"\",\n            params=[ParamSummary.from_param(p) for p in command.params],\n            short_help=command.short_help or \"\",\n        )\n\n    @property\n    def help_plain(self) -&gt; str:\n        return markup_as_plain_text(self.help)\n\n    @property\n    def help_md(self) -&gt; str:\n        return markup_to_markdown(self.help)\n\n    @property\n    def usage(self) -&gt; str:\n        parts = [self.name]\n\n        # Assume arg list is sorted by required/optional\n        # `&lt;POSITIONAL_ARG1&gt; &lt;POSITIONAL_ARG2&gt; [OPTIONAL_ARG1] [OPTIONAL_ARG2]`\n        for arg in self.arguments:\n            metavar = arg.metavar or arg.human_readable_name\n            parts.append(metavar)\n\n        # Command with both required and optional options:\n        # `--option1 &lt;opt1&gt; --option2 &lt;opt2&gt; [OPTIONS]`\n        has_optional = False\n        for option in self.options:\n            if option.required:\n                metavar = option.metavar or option.human_readable_name\n                if option.opts:\n                    s = f\"{max(option.opts)} {metavar}\"\n                else:\n                    # this shouldn't happen, but just in case. A required\n                    # option without any opts is not very useful.\n                    # NOTE: could raise exception here instead\n                    s = metavar\n                parts.append(s)\n            else:\n                has_optional = True\n        if has_optional:\n            parts.append(\"[OPTIONS]\")\n\n        return \" \".join(parts)\n\n    @property\n    def options(self) -&gt; List[ParamSummary]:\n        return [p for p in self.params if not p.is_argument]\n\n    @property\n    def arguments(self) -&gt; List[ParamSummary]:\n        return [p for p in self.params if p.is_argument]\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.CommandSummary-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.category","title":"<code>category: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.deprecated","title":"<code>deprecated: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.epilog","title":"<code>epilog: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.help","title":"<code>help: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.hidden","title":"<code>hidden: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.options_metavar","title":"<code>options_metavar: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.params","title":"<code>params: List[ParamSummary] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.score","title":"<code>score: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.short_help","title":"<code>short_help: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.help_plain","title":"<code>help_plain: str</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.help_md","title":"<code>help_md: str</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.usage","title":"<code>usage: str</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.options","title":"<code>options: List[ParamSummary]</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.arguments","title":"<code>arguments: List[ParamSummary]</code>  <code>property</code>","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.CommandSummary.from_command","title":"<code>from_command(command: TyperCommand, name: str | None = None, category: str | None = None) -&gt; CommandSummary</code>  <code>classmethod</code>","text":"<p>Construct a new CommandSummary from a TyperCommand.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_command(\n    cls, command: TyperCommand, name: str | None = None, category: str | None = None\n) -&gt; CommandSummary:\n    \"\"\"Construct a new CommandSummary from a TyperCommand.\"\"\"\n    return cls(\n        category=category,\n        deprecated=command.deprecated,\n        epilog=command.epilog or \"\",\n        help=command.help or \"\",\n        hidden=command.hidden,\n        name=name or command.name or \"\",\n        options_metavar=command.options_metavar or \"\",\n        params=[ParamSummary.from_param(p) for p in command.params],\n        short_help=command.short_help or \"\",\n    )\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ProjectExtended","title":"<code>ProjectExtended</code>","text":"<p>               Bases: <code>Project</code></p> <p>Signal to the render function that we want to print extended information about a project.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class ProjectExtended(Project):\n    \"\"\"Signal to the render function that we want to print extended information about a project.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.Operator","title":"<code>Operator</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Operator used to detmerine matching of multiple search criteria.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class Operator(Enum):\n    \"\"\"Operator used to detmerine matching of multiple search criteria.\"\"\"\n\n    AND = \"and\"\n    OR = \"or\"\n    XOR = \"xor\"\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.Operator-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.Operator.AND","title":"<code>AND = 'and'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.Operator.OR","title":"<code>OR = 'or'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.Operator.XOR","title":"<code>XOR = 'xor'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType","title":"<code>UserGroupType</code>","text":"<p>               Bases: <code>StrEnum</code></p> Source code in <code>harbor_cli/models.py</code> <pre><code>class UserGroupType(StrEnum):\n    LDAP = \"LDAP\"\n    HTTP = \"HTTP\"\n    OIDC = \"OIDC\"\n\n    @classmethod\n    def from_int(cls, value: int) -&gt; UserGroupType:\n        try:\n            return _USERGROUPTYPE_MAPPING[value]\n        except KeyError:\n            raise ValueError(f\"Invalid user group type: {value}\")\n\n    def as_int(self) -&gt; int:\n        try:\n            return _USERGROUPTYPE_MAPPING_REVERSE[self]\n        except KeyError:\n            raise ValueError(f\"Unknown user group type: {self}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.UserGroupType-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType.LDAP","title":"<code>LDAP = 'LDAP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType.HTTP","title":"<code>HTTP = 'HTTP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType.OIDC","title":"<code>OIDC = 'OIDC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.UserGroupType.from_int","title":"<code>from_int(value: int) -&gt; UserGroupType</code>  <code>classmethod</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_int(cls, value: int) -&gt; UserGroupType:\n    try:\n        return _USERGROUPTYPE_MAPPING[value]\n    except KeyError:\n        raise ValueError(f\"Invalid user group type: {value}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.UserGroupType.as_int","title":"<code>as_int() -&gt; int</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>def as_int(self) -&gt; int:\n    try:\n        return _USERGROUPTYPE_MAPPING_REVERSE[self]\n    except KeyError:\n        raise ValueError(f\"Unknown user group type: {self}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.MemberRoleType","title":"<code>MemberRoleType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>harbor_cli/models.py</code> <pre><code>class MemberRoleType(Enum):\n    ADMIN = \"admin\"\n    DEVELOPER = \"developer\"\n    GUEST = \"guest\"\n    MAINTAINER = \"maintainer\"\n    LIMITED_GUEST = \"limited_guest\"\n\n    @classmethod\n    def from_int(cls, value: int) -&gt; MemberRoleType:\n        try:\n            return _MEMBERROLETYPE_MAPPING[value]\n        except KeyError:\n            raise ValueError(f\"Unknown role type: {value}\")\n\n    def as_int(self) -&gt; int:\n        try:\n            return _MEMBERROLETYPE_MAPPING_REVERSE[self]\n        except KeyError:\n            raise ValueError(f\"Unknown role type: {self}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.MemberRoleType-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.ADMIN","title":"<code>ADMIN = 'admin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.DEVELOPER","title":"<code>DEVELOPER = 'developer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.GUEST","title":"<code>GUEST = 'guest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.MAINTAINER","title":"<code>MAINTAINER = 'maintainer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.LIMITED_GUEST","title":"<code>LIMITED_GUEST = 'limited_guest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.MemberRoleType.from_int","title":"<code>from_int(value: int) -&gt; MemberRoleType</code>  <code>classmethod</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_int(cls, value: int) -&gt; MemberRoleType:\n    try:\n        return _MEMBERROLETYPE_MAPPING[value]\n    except KeyError:\n        raise ValueError(f\"Unknown role type: {value}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.MemberRoleType.as_int","title":"<code>as_int() -&gt; int</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>def as_int(self) -&gt; int:\n    try:\n        return _MEMBERROLETYPE_MAPPING_REVERSE[self]\n    except KeyError:\n        raise ValueError(f\"Unknown role type: {self}\")\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary","title":"<code>ArtifactVulnerabilitySummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/models.py</code> <pre><code>class ArtifactVulnerabilitySummary(BaseModel):\n    artifact: str\n    tags: List[str]\n    summary: Optional[NativeReportSummary]\n    # Not a property since we don't keep the original artifact around\n    artifact_short: str = Field(..., exclude=True)\n\n    @classmethod\n    def from_artifactinfo(cls, artifact: ArtifactInfo) -&gt; ArtifactVulnerabilitySummary:\n        return cls(\n            artifact=artifact.name_with_digest_full,\n            artifact_short=artifact.name_with_digest,\n            tags=artifact.tags,\n            summary=artifact.artifact.scan,\n        )\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary.artifact","title":"<code>artifact: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary.tags","title":"<code>tags: List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary.summary","title":"<code>summary: Optional[NativeReportSummary]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary.artifact_short","title":"<code>artifact_short: str = Field(..., exclude=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.ArtifactVulnerabilitySummary.from_artifactinfo","title":"<code>from_artifactinfo(artifact: ArtifactInfo) -&gt; ArtifactVulnerabilitySummary</code>  <code>classmethod</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_artifactinfo(cls, artifact: ArtifactInfo) -&gt; ArtifactVulnerabilitySummary:\n    return cls(\n        artifact=artifact.name_with_digest_full,\n        artifact_short=artifact.name_with_digest,\n        tags=artifact.tags,\n        summary=artifact.artifact.scan,\n    )\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.MetadataFields","title":"<code>MetadataFields</code>","text":"<p>               Bases: <code>RootModel[Dict[str, Any]]</code></p> <p>Renders a mapping of one or more metadata fields as a table.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class MetadataFields(RootModel[Dict[str, Any]]):\n    \"\"\"Renders a mapping of one or more metadata fields as a table.\"\"\"\n\n    root: Dict[str, Any]\n\n    def as_table(self, **kwargs: Any) -&gt; Iterable[Table]:\n        from .output.table._utils import get_table\n\n        table = get_table(\n            \"Metadata Field\",\n            columns=[\"Field\", \"Value\"],\n            data=list(self.root),\n        )\n        for k, v in self.root.items():\n            table.add_row(k, str(v))\n        yield table\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.MetadataFields-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.MetadataFields.root","title":"<code>root: Dict[str, Any]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.MetadataFields-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.MetadataFields.as_table","title":"<code>as_table(**kwargs: Any) -&gt; Iterable[Table]</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>def as_table(self, **kwargs: Any) -&gt; Iterable[Table]:\n    from .output.table._utils import get_table\n\n    table = get_table(\n        \"Metadata Field\",\n        columns=[\"Field\", \"Value\"],\n        data=list(self.root),\n    )\n    for k, v in self.root.items():\n        table.add_row(k, str(v))\n    yield table\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ProjectCreateResult","title":"<code>ProjectCreateResult</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>harbor_cli/models.py</code> <pre><code>class ProjectCreateResult(BaseModel):\n    location: str\n    project: ProjectReq\n</code></pre>"},{"location":"reference/models/#harbor_cli.models.ProjectCreateResult-attributes","title":"Attributes","text":""},{"location":"reference/models/#harbor_cli.models.ProjectCreateResult.location","title":"<code>location: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models.ProjectCreateResult.project","title":"<code>project: ProjectReq</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#harbor_cli.models-functions","title":"Functions","text":""},{"location":"reference/models/#harbor_cli.models.get","title":"<code>get(param: Any, attr: str) -&gt; Any</code>","text":"Source code in <code>harbor_cli/models.py</code> <pre><code>def get(param: Any, attr: str) -&gt; Any:\n    return getattr(param, attr, None)\n</code></pre>"},{"location":"reference/state/","title":"State","text":""},{"location":"reference/state/#harbor_cli.state","title":"<code>harbor_cli.state</code>","text":""},{"location":"reference/state/#harbor_cli.state-attributes","title":"Attributes","text":""},{"location":"reference/state/#harbor_cli.state.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state-classes","title":"Classes","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions","title":"<code>CommonOptions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Options that can be used with any command.</p> <p>These options are not specific to any particular command.</p> Source code in <code>harbor_cli/state.py</code> <pre><code>class CommonOptions(BaseModel):\n    \"\"\"Options that can be used with any command.\n\n    These options are not specific to any particular command.\n    \"\"\"\n\n    # Output\n    verbose: bool = False\n    with_stdout: bool = False\n    # File\n    output_file: Optional[Path] = None\n    no_overwrite: bool = False\n    model_config = ConfigDict(extra=\"allow\")\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.CommonOptions-attributes","title":"Attributes","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions.verbose","title":"<code>verbose: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions.with_stdout","title":"<code>with_stdout: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions.output_file","title":"<code>output_file: Optional[Path] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions.no_overwrite","title":"<code>no_overwrite: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.CommonOptions.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.State","title":"<code>State</code>","text":"<p>Object that encapsulates the current state of the application. Holds the current configuration, harbor client, and other stateful objects that we want access to inside commands.</p> Source code in <code>harbor_cli/state.py</code> <pre><code>class State:\n    \"\"\"Object that encapsulates the current state of the application.\n    Holds the current configuration, harbor client, and other stateful objects\n    that we want access to inside commands.\n    \"\"\"\n\n    _instance = None\n\n    def __new__(cls, *args: Any, **kwargs: Any):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls, *args, **kwargs)\n            cls._initialized = False\n        return cls._instance\n\n    options: CommonOptions = CommonOptions()\n    loop: asyncio.AbstractEventLoop\n    repl: bool = False\n\n    # Attributes (exposed as properties)\n    _config: Optional[HarborCLIConfig] = None\n    _client: Optional[HarborAsyncClient] = None\n    _console: Optional[Console] = None\n\n    # Flags to determine if the config or client have been loaded\n    _config_loaded: bool = False\n    _client_loaded: bool = False\n\n    def __init__(\n        self,\n        config: HarborCLIConfig | None = None,\n        client: HarborAsyncClient | None = None,\n    ) -&gt; None:\n        \"\"\"Initialize the state object.\n\n        Parameters\n        ----------\n        config : HarborCLIConfig | None\n            Config to override default config with.\n        client : HarborAsyncClient | None\n            Harbor client to override the default client with.\n        \"\"\"\n        if self._initialized:  # prevent __init__ from running more than once\n            return\n\n        # NOTE: these overrides are used mainly for testing\n        if config:\n            self.config = config\n        if client:\n            self.client = client\n        try:\n            self.loop = asyncio.get_running_loop()\n        except RuntimeError:\n            self.loop = asyncio.new_event_loop()\n        self.options = CommonOptions()\n\n        self._initialized = True\n\n    @property\n    def client(self) -&gt; HarborAsyncClient:\n        \"\"\"Harbor async client object.\n\n        Returns a client with bogus defaults if the client is not configured.\n        \"\"\"\n        # NOTE: we use this pattern so users can invoke commands without\n        # first having provided authentication info. Only when we try to\n        # use the client, will we detect that no authentication info is provided,\n        # and then we can prompt the user for it.\n        # We have to keep re-using this client object, because it's directly\n        # referenced by the various commands, so we have to patch it in-place\n        # when we receive new authentication info.\n        if self._client is None:\n            # Direct assignment to avoid triggering the setter\n            self._client = HarborAsyncClient(\n                url=\"http://example.com\",\n                username=\"username\",\n                secret=\"password\",\n            )\n        return self._client\n\n    @client.setter\n    def client(self, client: HarborAsyncClient) -&gt; None:\n        self._client = client\n        self._client_loaded = True\n\n    @property\n    def config(self) -&gt; HarborCLIConfig:\n        \"\"\"The current program configuration.\n\n        Returns a default config if no config is loaded.\n        The default config is just a placeholder that is expected\n        to be replaced with a custom config loaded from a config file.\n        \"\"\"\n        # fmt: off\n        if self._config is None:\n            from .config import HarborCLIConfig\n            self._config = HarborCLIConfig()\n        return self._config\n        # fmt: on\n\n    @config.setter\n    def config(self, config: HarborCLIConfig) -&gt; None:\n        self._config = config\n        self._config_loaded = True\n\n    @property\n    def is_config_loaded(self) -&gt; bool:\n        \"\"\"Whether or not the the config has been loaded.\"\"\"\n        # If we have assigned a custom config, it's loaded\n        return self._config_loaded\n\n    @property\n    def is_client_loaded(self) -&gt; bool:\n        return self._client_loaded\n\n    @property\n    def console(self) -&gt; Console:\n        \"\"\"Rich console object.\"\"\"\n        # fmt: off\n        if not self._console:\n            from .output.console import console\n            self._console = console\n        return self._console\n        # fmt: on\n\n    @cached_property\n    def logger(self) -&gt; Logger:\n        \"\"\"Logger object.\"\"\"\n        from .logs import logger\n\n        return logger\n\n    def authenticate_harbor(self) -&gt; None:\n        self.client.authenticate(\n            **self.config.harbor.credentials, verify=self.config.harbor.verify_ssl\n        )\n\n    def _init_client(self) -&gt; None:\n        \"\"\"Configures Harbor client if it hasn't been configured yet.\n\n        Prompts for necessary authentication info if it's missing from the config.\n        \"\"\"\n        from .harbor.common import prompt_url\n        from .output.console import warning\n\n        if not self.config.harbor.url:\n            warning(\"Harbor API URL missing from configuration file.\")\n            self.config.harbor.url = prompt_url()\n\n        # We need one of the available auth methods to be specified\n        # If not, prompt for username and password\n        if not self.config.harbor.has_auth_method:\n            warning(\n                \"Harbor authentication method is missing or incomplete in configuration file.\"\n            )\n            self.config.harbor.set_username_secret(\n                current_username=self.config.harbor.username,\n                current_secret=self.config.harbor.secret_value,\n            )\n\n        self.authenticate_harbor()\n\n        # Raw + validate modes\n        self.client.raw = self.config.harbor.raw_mode\n        self.client.validate = self.config.harbor.validate_data\n\n        # Retry settings\n        if self.client.retry is not None:\n            self.client.retry.enabled = self.config.harbor.retry.enabled\n            self.client.retry.max_tries = self.config.harbor.retry.max_tries\n            self.client.retry.max_time = self.config.harbor.retry.max_time\n\n        self._client_loaded = True\n\n    def try_load_config(self, config_file: Optional[Path], create: bool = True) -&gt; None:\n        \"\"\"Attempts to load the config given a config file path.\n        Assigns the loaded config to the state object.\n\n        Parameters\n        ----------\n        config_file : Optional[Path]\n            The path to the config file.\n        create : bool, optional\n            Whether to create a new config file if one is not found, by default True\n        \"\"\"\n        from harbor_cli.commands.cli.init import run_config_wizard\n        from harbor_cli.config import HarborCLIConfig\n        from harbor_cli.exceptions import ConfigError\n        from harbor_cli.output.console import error\n        from harbor_cli.output.console import exit_err\n        from harbor_cli.output.console import info\n        from harbor_cli.output.formatting.path import path_link\n\n        # Don't load the config if it's already loaded (e.g. in REPL)\n        if not self.is_config_loaded:\n            try:\n                conf = HarborCLIConfig.from_file(config_file)\n            except FileNotFoundError:\n                if not create:\n                    return\n                # Create a new config file and run wizard\n                info(\"Config file not found. Creating new config file.\")\n                conf = HarborCLIConfig.from_file(config_file, create=create)\n                if conf.config_file is None:\n                    exit_err(\"Unable to create config file.\")\n                info(f\"Created config file: {path_link(conf.config_file)}\")\n                info(\"Running configuration wizard...\")\n                conf = run_config_wizard(conf.config_file)\n            except ConfigError as e:\n                error(f\"Unable to load config: {str(e)}\", exc_info=True)\n                return\n\n            self.config = conf\n\n    def check_keyring_available(self) -&gt; None:\n        \"\"\"Checks if the keyring is available if it's enabled in the config file.\n\n        Important to call this method BEFORE saving a snapshot of the config!\n        Otherwise, we risk enabling and disabling the keyring over and over again.\n        \"\"\"\n        if self.config.harbor.keyring:\n            from harbor_cli.output.console import warning\n            from harbor_cli.utils.keyring import keyring_supported\n\n            if not keyring_supported():\n                warning(\n                    \"Keyring is not available on this platform. Set [i default]keyring = false[/] in config to suppress this warning.\"\n                )\n                self.config.harbor.keyring = False\n\n    def run(\n        self,\n        coro: Coroutine[None, None, T],\n        status: Optional[str] = None,\n        no_handle: type[Exception] | tuple[type[Exception], ...] | None = None,\n    ) -&gt; T:\n        \"\"\"Run a coroutine in the event loop.\n\n        Parameters\n        ----------\n        coro : Coroutine[None, None, T]\n            The coroutine to run, which returns type T.\n        status : str, optional\n            The status message to display while the coroutine is running.\n        no_handle : type[Exception] | tuple[type[Exception], ...] | None\n            One or more Exception types to not pass to the default\n            exception handler. All other exceptions will be handled.\n            If None, all exceptions will be handled.\n\n        Returns\n        -------\n        T\n            The return value of the coroutine.\n\n        See Also\n        --------\n        [harbor_cli.exceptions.handle_exception][]\n        \"\"\"\n        try:\n            # Make sure client is loaded and configured\n            if not self.is_client_loaded:\n                self._init_client()\n            else:\n                self.authenticate_harbor()  # ensure we use newest credentials\n\n            if not status:\n                status = \"Working...\"\n            elif not status.endswith(\"...\"):  # aesthetic :)\n                status += \"...\"\n\n            # show spinner when running a coroutine\n            try:\n                with self.console.status(status):\n                    resp = self.loop.run_until_complete(coro)\n            except Exception as e:\n                if no_handle and isinstance(e, no_handle):\n                    raise e\n                # fmt: off\n                from .exceptions import handle_exception\n                handle_exception(e)\n                # fmt: on\n            return resp\n        finally:\n            # Close coro in case we never got to run it\n            # Unawaited coros emit warnings which we ideally want to know about\n            # But if we error before getting to run it, we don't need a warning\n            try:\n                coro.close()\n            except Exception:\n                self.logger.debug(\"Failed to close coroutine.\", exc_info=True)\n                pass\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State-attributes","title":"Attributes","text":""},{"location":"reference/state/#harbor_cli.state.State.repl","title":"<code>repl: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.State.loop","title":"<code>loop: asyncio.AbstractEventLoop = asyncio.get_running_loop()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.State.options","title":"<code>options: CommonOptions = CommonOptions()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/state/#harbor_cli.state.State.client","title":"<code>client: HarborAsyncClient</code>  <code>property</code> <code>writable</code>","text":"<p>Harbor async client object.</p> <p>Returns a client with bogus defaults if the client is not configured.</p>"},{"location":"reference/state/#harbor_cli.state.State.config","title":"<code>config: HarborCLIConfig</code>  <code>property</code> <code>writable</code>","text":"<p>The current program configuration.</p> <p>Returns a default config if no config is loaded. The default config is just a placeholder that is expected to be replaced with a custom config loaded from a config file.</p>"},{"location":"reference/state/#harbor_cli.state.State.is_config_loaded","title":"<code>is_config_loaded: bool</code>  <code>property</code>","text":"<p>Whether or not the the config has been loaded.</p>"},{"location":"reference/state/#harbor_cli.state.State.is_client_loaded","title":"<code>is_client_loaded: bool</code>  <code>property</code>","text":""},{"location":"reference/state/#harbor_cli.state.State.console","title":"<code>console: Console</code>  <code>property</code>","text":"<p>Rich console object.</p>"},{"location":"reference/state/#harbor_cli.state.State.logger","title":"<code>logger: Logger</code>  <code>cached</code> <code>property</code>","text":"<p>Logger object.</p>"},{"location":"reference/state/#harbor_cli.state.State-functions","title":"Functions","text":""},{"location":"reference/state/#harbor_cli.state.State.__new__","title":"<code>__new__(*args: Any, **kwargs: Any)</code>","text":"Source code in <code>harbor_cli/state.py</code> <pre><code>def __new__(cls, *args: Any, **kwargs: Any):\n    if cls._instance is None:\n        cls._instance = super().__new__(cls, *args, **kwargs)\n        cls._initialized = False\n    return cls._instance\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State.__init__","title":"<code>__init__(config: HarborCLIConfig | None = None, client: HarborAsyncClient | None = None) -&gt; None</code>","text":"<p>Initialize the state object.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>HarborCLIConfig | None</code> <p>Config to override default config with.</p> <code>None</code> <code>client</code> <code>HarborAsyncClient | None</code> <p>Harbor client to override the default client with.</p> <code>None</code> Source code in <code>harbor_cli/state.py</code> <pre><code>def __init__(\n    self,\n    config: HarborCLIConfig | None = None,\n    client: HarborAsyncClient | None = None,\n) -&gt; None:\n    \"\"\"Initialize the state object.\n\n    Parameters\n    ----------\n    config : HarborCLIConfig | None\n        Config to override default config with.\n    client : HarborAsyncClient | None\n        Harbor client to override the default client with.\n    \"\"\"\n    if self._initialized:  # prevent __init__ from running more than once\n        return\n\n    # NOTE: these overrides are used mainly for testing\n    if config:\n        self.config = config\n    if client:\n        self.client = client\n    try:\n        self.loop = asyncio.get_running_loop()\n    except RuntimeError:\n        self.loop = asyncio.new_event_loop()\n    self.options = CommonOptions()\n\n    self._initialized = True\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State.authenticate_harbor","title":"<code>authenticate_harbor() -&gt; None</code>","text":"Source code in <code>harbor_cli/state.py</code> <pre><code>def authenticate_harbor(self) -&gt; None:\n    self.client.authenticate(\n        **self.config.harbor.credentials, verify=self.config.harbor.verify_ssl\n    )\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State.try_load_config","title":"<code>try_load_config(config_file: Optional[Path], create: bool = True) -&gt; None</code>","text":"<p>Attempts to load the config given a config file path. Assigns the loaded config to the state object.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>Optional[Path]</code> <p>The path to the config file.</p> required <code>create</code> <code>bool</code> <p>Whether to create a new config file if one is not found, by default True</p> <code>True</code> Source code in <code>harbor_cli/state.py</code> <pre><code>def try_load_config(self, config_file: Optional[Path], create: bool = True) -&gt; None:\n    \"\"\"Attempts to load the config given a config file path.\n    Assigns the loaded config to the state object.\n\n    Parameters\n    ----------\n    config_file : Optional[Path]\n        The path to the config file.\n    create : bool, optional\n        Whether to create a new config file if one is not found, by default True\n    \"\"\"\n    from harbor_cli.commands.cli.init import run_config_wizard\n    from harbor_cli.config import HarborCLIConfig\n    from harbor_cli.exceptions import ConfigError\n    from harbor_cli.output.console import error\n    from harbor_cli.output.console import exit_err\n    from harbor_cli.output.console import info\n    from harbor_cli.output.formatting.path import path_link\n\n    # Don't load the config if it's already loaded (e.g. in REPL)\n    if not self.is_config_loaded:\n        try:\n            conf = HarborCLIConfig.from_file(config_file)\n        except FileNotFoundError:\n            if not create:\n                return\n            # Create a new config file and run wizard\n            info(\"Config file not found. Creating new config file.\")\n            conf = HarborCLIConfig.from_file(config_file, create=create)\n            if conf.config_file is None:\n                exit_err(\"Unable to create config file.\")\n            info(f\"Created config file: {path_link(conf.config_file)}\")\n            info(\"Running configuration wizard...\")\n            conf = run_config_wizard(conf.config_file)\n        except ConfigError as e:\n            error(f\"Unable to load config: {str(e)}\", exc_info=True)\n            return\n\n        self.config = conf\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State.check_keyring_available","title":"<code>check_keyring_available() -&gt; None</code>","text":"<p>Checks if the keyring is available if it's enabled in the config file.</p> <p>Important to call this method BEFORE saving a snapshot of the config! Otherwise, we risk enabling and disabling the keyring over and over again.</p> Source code in <code>harbor_cli/state.py</code> <pre><code>def check_keyring_available(self) -&gt; None:\n    \"\"\"Checks if the keyring is available if it's enabled in the config file.\n\n    Important to call this method BEFORE saving a snapshot of the config!\n    Otherwise, we risk enabling and disabling the keyring over and over again.\n    \"\"\"\n    if self.config.harbor.keyring:\n        from harbor_cli.output.console import warning\n        from harbor_cli.utils.keyring import keyring_supported\n\n        if not keyring_supported():\n            warning(\n                \"Keyring is not available on this platform. Set [i default]keyring = false[/] in config to suppress this warning.\"\n            )\n            self.config.harbor.keyring = False\n</code></pre>"},{"location":"reference/state/#harbor_cli.state.State.run","title":"<code>run(coro: Coroutine[None, None, T], status: Optional[str] = None, no_handle: type[Exception] | tuple[type[Exception], ...] | None = None) -&gt; T</code>","text":"<p>Run a coroutine in the event loop.</p> <p>Parameters:</p> Name Type Description Default <code>coro</code> <code>Coroutine[None, None, T]</code> <p>The coroutine to run, which returns type T.</p> required <code>status</code> <code>str</code> <p>The status message to display while the coroutine is running.</p> <code>None</code> <code>no_handle</code> <code>type[Exception] | tuple[type[Exception], ...] | None</code> <p>One or more Exception types to not pass to the default exception handler. All other exceptions will be handled. If None, all exceptions will be handled.</p> <code>None</code> <p>Returns:</p> Type Description <code>T</code> <p>The return value of the coroutine.</p> See Also <p>harbor_cli.exceptions.handle_exception</p> Source code in <code>harbor_cli/state.py</code> <pre><code>def run(\n    self,\n    coro: Coroutine[None, None, T],\n    status: Optional[str] = None,\n    no_handle: type[Exception] | tuple[type[Exception], ...] | None = None,\n) -&gt; T:\n    \"\"\"Run a coroutine in the event loop.\n\n    Parameters\n    ----------\n    coro : Coroutine[None, None, T]\n        The coroutine to run, which returns type T.\n    status : str, optional\n        The status message to display while the coroutine is running.\n    no_handle : type[Exception] | tuple[type[Exception], ...] | None\n        One or more Exception types to not pass to the default\n        exception handler. All other exceptions will be handled.\n        If None, all exceptions will be handled.\n\n    Returns\n    -------\n    T\n        The return value of the coroutine.\n\n    See Also\n    --------\n    [harbor_cli.exceptions.handle_exception][]\n    \"\"\"\n    try:\n        # Make sure client is loaded and configured\n        if not self.is_client_loaded:\n            self._init_client()\n        else:\n            self.authenticate_harbor()  # ensure we use newest credentials\n\n        if not status:\n            status = \"Working...\"\n        elif not status.endswith(\"...\"):  # aesthetic :)\n            status += \"...\"\n\n        # show spinner when running a coroutine\n        try:\n            with self.console.status(status):\n                resp = self.loop.run_until_complete(coro)\n        except Exception as e:\n            if no_handle and isinstance(e, no_handle):\n                raise e\n            # fmt: off\n            from .exceptions import handle_exception\n            handle_exception(e)\n            # fmt: on\n        return resp\n    finally:\n        # Close coro in case we never got to run it\n        # Unawaited coros emit warnings which we ideally want to know about\n        # But if we error before getting to run it, we don't need a warning\n        try:\n            coro.close()\n        except Exception:\n            self.logger.debug(\"Failed to close coroutine.\", exc_info=True)\n            pass\n</code></pre>"},{"location":"reference/state/#harbor_cli.state-functions","title":"Functions","text":""},{"location":"reference/state/#harbor_cli.state.get_state","title":"<code>get_state() -&gt; State</code>","text":"<p>Returns the global state object.</p> <p>Instantiates a new state object with defaults if it doesn't exist.</p> Source code in <code>harbor_cli/state.py</code> <pre><code>def get_state() -&gt; State:\n    \"\"\"Returns the global state object.\n\n    Instantiates a new state object with defaults if it doesn't exist.\n    \"\"\"\n    return State()\n</code></pre>"},{"location":"reference/types/","title":"Types","text":""},{"location":"reference/types/#harbor_cli.types","title":"<code>harbor_cli.types</code>","text":""},{"location":"reference/types/#harbor_cli.types-attributes","title":"Attributes","text":""},{"location":"reference/types/#harbor_cli.types.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.SEQUENCE_TYPES","title":"<code>SEQUENCE_TYPES = (Sequence, abc.Sequence, list, List, tuple, Tuple, set, Set)</code>  <code>module-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types-classes","title":"Classes","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs","title":"<code>RichTableKwargs</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>harbor_cli/types.py</code> <pre><code>class RichTableKwargs(TypedDict, total=False):\n    caption: Optional[TextType]\n    width: Optional[int]\n    min_width: Optional[int]\n    box: Optional[box.Box]\n    safe_box: Optional[bool]\n    padding: PaddingDimensions\n    collapse_padding: bool\n    pad_edge: bool\n    expand: bool\n    show_header: bool\n    show_footer: bool\n    show_edge: bool\n    show_lines: bool\n    leading: int\n    style: StyleType\n    row_styles: Optional[Iterable[StyleType]]\n    header_style: Optional[StyleType]\n    footer_style: Optional[StyleType]\n    border_style: Optional[StyleType]\n    title_style: Optional[StyleType]\n    caption_style: Optional[StyleType]\n    title_justify: \"JustifyMethod\"\n    caption_justify: \"JustifyMethod\"\n    highlight: bool\n</code></pre>"},{"location":"reference/types/#harbor_cli.types.RichTableKwargs-attributes","title":"Attributes","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.caption","title":"<code>caption: Optional[TextType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.width","title":"<code>width: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.min_width","title":"<code>min_width: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.box","title":"<code>box: Optional[box.Box]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.safe_box","title":"<code>safe_box: Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.padding","title":"<code>padding: PaddingDimensions</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.collapse_padding","title":"<code>collapse_padding: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.pad_edge","title":"<code>pad_edge: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.expand","title":"<code>expand: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.show_header","title":"<code>show_header: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.show_footer","title":"<code>show_footer: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.show_edge","title":"<code>show_edge: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.show_lines","title":"<code>show_lines: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.leading","title":"<code>leading: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.style","title":"<code>style: StyleType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.row_styles","title":"<code>row_styles: Optional[Iterable[StyleType]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.header_style","title":"<code>header_style: Optional[StyleType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.footer_style","title":"<code>footer_style: Optional[StyleType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.border_style","title":"<code>border_style: Optional[StyleType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.title_style","title":"<code>title_style: Optional[StyleType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.caption_style","title":"<code>caption_style: Optional[StyleType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.title_justify","title":"<code>title_justify: 'JustifyMethod'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.caption_justify","title":"<code>caption_justify: 'JustifyMethod'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types.RichTableKwargs.highlight","title":"<code>highlight: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/types/#harbor_cli.types-functions","title":"Functions","text":""},{"location":"reference/types/#harbor_cli.types.is_sequence_func","title":"<code>is_sequence_func(func: Callable[[Any], Any]) -&gt; bool</code>","text":"<p>Checks if a callable takes a sequence as its first argument.</p> Source code in <code>harbor_cli/types.py</code> <pre><code>def is_sequence_func(func: Callable[[Any], Any]) -&gt; bool:\n    \"\"\"Checks if a callable takes a sequence as its first argument.\"\"\"\n    hints = typing.get_type_hints(func)\n    if not hints:\n        return False\n    val = next(iter(hints.values()))\n    return is_sequence_annotation(val)\n</code></pre>"},{"location":"reference/types/#harbor_cli.types.is_sequence_annotation","title":"<code>is_sequence_annotation(annotation: Any) -&gt; bool</code>","text":"Source code in <code>harbor_cli/types.py</code> <pre><code>def is_sequence_annotation(annotation: Any) -&gt; bool:\n    # A string annotation will never pass this check, since it can't be\n    # used as a generic type annotation. get_origin() will return None.\n    # This is fine, however, because we don't actually want to treat\n    # string annotations as sequences in this context anyway.\n    origin = typing.get_origin(annotation)\n    try:\n        return issubclass(origin, Sequence)  # type: ignore\n    except TypeError:\n        return origin in SEQUENCE_TYPES\n</code></pre>"},{"location":"reference/types/#harbor_cli.types.assert_type","title":"<code>assert_type(value: Any, expect_type: Type[T]) -&gt; T</code>","text":"<p>Assert that a value is of a given type.</p> <p>Not to be confused with typing.assert_type which was introcduced in 3.11! Unfortunate naming collision, but typing.assert_type has no runtime effect, while this function has.</p> Source code in <code>harbor_cli/types.py</code> <pre><code>def assert_type(value: Any, expect_type: Type[T]) -&gt; T:\n    \"\"\"Assert that a value is of a given type.\n\n    Not to be confused with typing.assert_type which was introcduced in 3.11!\n    Unfortunate naming collision, but typing.assert_type has no runtime effect,\n    while this function has.\n    \"\"\"\n    # TODO: handle Union types\n    if is_sequence_annotation(expect_type):\n        if value:\n            v = value[0]\n            args = typing.get_args(expect_type)\n            if args:\n                t = args[0]\n            else:\n                t = Any  # annotation was generic with no args\n        else:\n            v = value\n            t = typing.get_origin(expect_type)\n    else:\n        v = value\n        t = expect_type\n\n    # If we find no annotation, we treat it as Any\n    if t is None:\n        t = Any\n\n    if t != Any and not isinstance(v, t):\n        raise TypeError(f\"Expected value of type {t} but got {type(v)} instead.\")\n    return cast(T, value)\n</code></pre>"},{"location":"reference/harbor/","title":"Index","text":""},{"location":"reference/harbor/#harbor_cli.harbor","title":"<code>harbor_cli.harbor</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor-attributes","title":"Attributes","text":""},{"location":"reference/harbor/#harbor_cli.harbor.AttrType","title":"<code>AttrType = TypeVar('AttrType')</code>  <code>module-attribute</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor-classes","title":"Classes","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactNameFormatError","title":"<code>ArtifactNameFormatError</code>","text":"<p>               Bases: <code>HarborCLIError</code></p> Source code in <code>harbor_cli/exceptions.py</code> <pre><code>class ArtifactNameFormatError(HarborCLIError):\n    def __init__(self, s: str) -&gt; None:\n        super().__init__(\n            f\"Artifact string {s} is not in the correct format. \"\n            \"Expected 'project/repo:tag' OR 'project/repo@sha256:digest'\",\n        )\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactNameFormatError-functions","title":"Functions","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactNameFormatError.__init__","title":"<code>__init__(s: str) -&gt; None</code>","text":"Source code in <code>harbor_cli/exceptions.py</code> <pre><code>def __init__(self, s: str) -&gt; None:\n    super().__init__(\n        f\"Artifact string {s} is not in the correct format. \"\n        \"Expected 'project/repo:tag' OR 'project/repo@sha256:digest'\",\n    )\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName","title":"<code>ArtifactName</code>","text":"<p>               Bases: <code>NamedTuple</code></p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>class ArtifactName(NamedTuple):\n    domain: str | None\n    project: str\n    repository: str\n    reference: str\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName-attributes","title":"Attributes","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName.domain","title":"<code>domain: str | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName.project","title":"<code>project: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName.repository","title":"<code>repository: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor.ArtifactName.reference","title":"<code>reference: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/#harbor_cli.harbor-functions","title":"Functions","text":""},{"location":"reference/harbor/#harbor_cli.harbor.parse_artifact_name","title":"<code>parse_artifact_name(s: str) -&gt; ArtifactName</code>","text":"<p>Splits an artifact string into domain name (optional), project, repo, and reference (tag or digest).</p> <p>Raises ValueError if the string is not in the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>Artifact string in the form of [domain/]/{@sha256:,:} required <p>Returns:</p> Type Description <code>ArtifactName</code> <p>Named tuple of domain name (optional), project, repo, and reference (tag or digest).</p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def parse_artifact_name(s: str) -&gt; ArtifactName:\n    \"\"\"Splits an artifact string into domain name (optional), project,\n    repo, and reference (tag or digest).\n\n    Raises ValueError if the string is not in the correct format.\n\n    Parameters\n    ----------\n    s : str\n        Artifact string in the form of [domain/]&lt;project&gt;/&lt;repo&gt;{@sha256:&lt;digest&gt;,:&lt;tag&gt;}\n\n    Returns\n    -------\n    ArtifactName\n        Named tuple of domain name (optional), project, repo, and reference (tag or digest).\n    \"\"\"\n    parts = s.split(\"/\")\n    if len(parts) == 3:\n        domain, project, rest = parts\n    elif len(parts) == 2:\n        project, rest = parts\n        domain = None\n    else:\n        raise ArtifactNameFormatError(s)\n\n    # TODO: make this more robust\n    if \"@\" in rest:\n        repo, tag_or_digest = rest.split(\"@\")\n    elif \":\" in rest:\n        parts = rest.split(\":\")\n        if len(parts) != 2:\n            raise ArtifactNameFormatError(s)\n        repo, tag_or_digest = parts\n    else:\n        raise ArtifactNameFormatError(s)\n\n    return ArtifactName(domain, project, repo, tag_or_digest)\n</code></pre> <ul> <li>harbor_cli.harbor.artifact</li> </ul>"},{"location":"reference/harbor/#harbor_cli.harbor.get_artifact_architecture","title":"<code>get_artifact_architecture(artifact: Artifact) -&gt; str | None</code>","text":"Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_architecture(artifact: Artifact) -&gt; str | None:\n    try:\n        return str(artifact.extra_attrs[\"architecture\"])  # type: ignore[index]\n    except (TypeError, KeyError):\n        return None\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.get_artifact_os","title":"<code>get_artifact_os(artifact: Artifact) -&gt; str | None</code>","text":"Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_os(artifact: Artifact) -&gt; str | None:\n    try:\n        return str(artifact.extra_attrs[\"os\"])  # type: ignore[index]\n    except (TypeError, KeyError):\n        return None\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.get_artifact_severity","title":"<code>get_artifact_severity(artifact: Artifact) -&gt; str | None</code>","text":"<p>Attempt to get the severity string for an artifact. Not every artifact has a scan overview, and not every scan overview has a severity string.</p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_severity(artifact: Artifact) -&gt; str | None:\n    \"\"\"Attempt to get the severity string for an artifact.\n    Not every artifact has a scan overview, and not every scan overview\n    has a severity string.\n    \"\"\"\n    try:\n        return artifact.scan.severity  # type: ignore[attr-defined]\n    except AttributeError:\n        return None\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.no_headless","title":"<code>no_headless(f: Callable[P, T]) -&gt; Callable[P, T]</code>","text":"<p>Decorator that causes application to exit if called from a headless environment.</p> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>def no_headless(f: Callable[P, T]) -&gt; Callable[P, T]:\n    \"\"\"Decorator that causes application to exit if called from a headless environment.\"\"\"\n\n    @wraps(f)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:\n        if is_headless():\n            # TODO: determine caller etc. via the stack\n            # If a default argument was passed in, we can return that:\n            # NOTE: this disallows None as a default value, but that is consistent\n            # with the type annotations of the prompt functions, so it's fine...?\n            default = cast(Union[T, EllipsisType], kwargs.get(\"default\"))\n            if \"default\" in kwargs and default not in [None, ...]:\n                return default\n            prompt = args[0] if args else kwargs.get(\"prompt\") or \"\"\n            exit_err(\n                f\"Headless session detected; user input required when prompting for {prompt!r}.\",\n                prompt_args=args,\n                prompt_kwargs=kwargs,\n            )\n        return f(*args, **kwargs)\n\n    return wrapper\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.path_prompt","title":"<code>path_prompt(prompt: str, default: Any = ..., show_default: bool = True, exist_ok: bool = True, must_exist: bool = False, **kwargs: Any) -&gt; Path</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef path_prompt(\n    prompt: str,\n    default: Any = ...,\n    show_default: bool = True,\n    exist_ok: bool = True,\n    must_exist: bool = False,\n    **kwargs: Any,\n) -&gt; Path:\n    if isinstance(default, Path):\n        default_arg = str(default)\n    elif default is None:\n        default_arg = ...  # type: ignore\n    else:\n        default_arg = default\n\n    while True:\n        path_str = str_prompt(\n            prompt,\n            default=default_arg,\n            show_default=show_default,\n            **kwargs,\n        )\n        path = Path(path_str)\n\n        if must_exist and not path.exists():\n            error(f\"Path does not exist: {path_link(path)}\")\n        elif not exist_ok and path.exists():\n            error(f\"Path already exists: {path_link(path)}\")\n        else:\n            return path\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.str_prompt","title":"<code>str_prompt(prompt: str, default: Any = ..., password: bool = False, show_default: bool = True, choices: list[str] | None = None, empty_ok: bool = False, **kwargs: Any) -&gt; str</code>","text":"<p>Prompts the user for a string input. Optionally controls for empty input. Loops until a valid input is provided.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Prompt to display to the user.</p> required <code>default</code> <code>Any</code> <p>Default value to use if the user does not provide input. If not provided, the user will be required to provide input.</p> <code>...</code> <code>password</code> <code>bool</code> <p>Whether to hide the input, by default False</p> <code>False</code> <code>show_default</code> <code>bool</code> <p>Whether to show the default value, by default True <code>password=True</code> supercedes this option, and sets it to False.</p> <code>True</code> <code>empty_ok</code> <code>bool</code> <p>Whether to allow input consisting of only whitespace, by default False</p> <code>False</code> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef str_prompt(\n    prompt: str,\n    default: Any = ...,\n    password: bool = False,\n    show_default: bool = True,\n    choices: list[str] | None = None,\n    empty_ok: bool = False,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Prompts the user for a string input. Optionally controls\n    for empty input. Loops until a valid input is provided.\n\n    Parameters\n    ----------\n    prompt : str\n        Prompt to display to the user.\n    default : Any, optional\n        Default value to use if the user does not provide input.\n        If not provided, the user will be required to provide input.\n    password : bool, optional\n        Whether to hide the input, by default False\n    show_default : bool, optional\n        Whether to show the default value, by default True\n        `password=True` supercedes this option, and sets it to False.\n    empty_ok : bool, optional\n        Whether to allow input consisting of only whitespace, by default False\n\n    \"\"\"\n    # Don't permit secrets to be shown ever\n    if password:\n        show_default = False\n\n    # Notify user that a default secret will be used,\n    # but don't actually show the secret\n    if password and default not in (None, ..., \"\"):\n        _prompt_add = \"(leave empty to use existing value)\"\n    else:\n        _prompt_add = \"\"\n    msg = prompt_msg(prompt, _prompt_add)\n\n    inp = None\n    while not inp:\n        inp = Prompt.ask(\n            msg,\n            console=err_console,\n            password=password,\n            show_default=show_default,\n            default=default,\n            choices=choices,\n            **kwargs,\n        )\n        if empty_ok:  # nothing else to check\n            break\n\n        if not inp:\n            error(\"Input cannot be empty.\")\n        elif inp.isspace() and inp != default:\n            error(\"Input cannot solely consist of whitespace.\")\n        else:\n            break\n    return inp\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.prompt_username_secret","title":"<code>prompt_username_secret(default_username: str | None = None, default_secret: str | None = None) -&gt; tuple[str, str]</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>@no_headless\ndef prompt_username_secret(\n    default_username: str | None = None, default_secret: str | None = None\n) -&gt; tuple[str, str]:\n    username = str_prompt(\n        \"Harbor username\",\n        default=default_username,\n    )\n    secret = str_prompt(\n        \"Harbor secret\",\n        default=default_secret,\n        password=True,\n    )\n    return username, secret\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.prompt_basicauth","title":"<code>prompt_basicauth(default: str | None = None) -&gt; str</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_basicauth(default: str | None = None) -&gt; str:\n    return str_prompt(\n        \"Harbor Base64 Basic Auth (e.g. dXNlcjpwYXNzd29yZA==)\",\n        default=default,\n        password=True,\n    )\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.prompt_credentials_file","title":"<code>prompt_credentials_file(default: Path | None = None) -&gt; Path</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_credentials_file(default: Path | None = None) -&gt; Path:\n    return path_prompt(\n        \"Harbor credentials file (e.g. /path/to/robot.json)\",\n        default=default,\n        show_default=True,\n        must_exist=True,\n        exist_ok=True,\n    )\n</code></pre>"},{"location":"reference/harbor/#harbor_cli.harbor.prompt_url","title":"<code>prompt_url(default: str | None = None) -&gt; str</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_url(default: str | None = None) -&gt; str:\n    return str_prompt(\n        \"Harbor API URL (e.g. https://harbor.example.com/api/v2.0)\",\n        default=default,\n    )\n</code></pre>"},{"location":"reference/harbor/artifact/","title":"Artifact","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact","title":"<code>harbor_cli.harbor.artifact</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact-attributes","title":"Attributes","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.AttrType","title":"<code>AttrType = TypeVar('AttrType')</code>  <code>module-attribute</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact-classes","title":"Classes","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName","title":"<code>ArtifactName</code>","text":"<p>               Bases: <code>NamedTuple</code></p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>class ArtifactName(NamedTuple):\n    domain: str | None\n    project: str\n    repository: str\n    reference: str\n</code></pre>"},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName-attributes","title":"Attributes","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName.domain","title":"<code>domain: str | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName.project","title":"<code>project: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName.repository","title":"<code>repository: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.ArtifactName.reference","title":"<code>reference: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact-functions","title":"Functions","text":""},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.parse_artifact_name","title":"<code>parse_artifact_name(s: str) -&gt; ArtifactName</code>","text":"<p>Splits an artifact string into domain name (optional), project, repo, and reference (tag or digest).</p> <p>Raises ValueError if the string is not in the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>Artifact string in the form of [domain/]/{@sha256:,:} required <p>Returns:</p> Type Description <code>ArtifactName</code> <p>Named tuple of domain name (optional), project, repo, and reference (tag or digest).</p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def parse_artifact_name(s: str) -&gt; ArtifactName:\n    \"\"\"Splits an artifact string into domain name (optional), project,\n    repo, and reference (tag or digest).\n\n    Raises ValueError if the string is not in the correct format.\n\n    Parameters\n    ----------\n    s : str\n        Artifact string in the form of [domain/]&lt;project&gt;/&lt;repo&gt;{@sha256:&lt;digest&gt;,:&lt;tag&gt;}\n\n    Returns\n    -------\n    ArtifactName\n        Named tuple of domain name (optional), project, repo, and reference (tag or digest).\n    \"\"\"\n    parts = s.split(\"/\")\n    if len(parts) == 3:\n        domain, project, rest = parts\n    elif len(parts) == 2:\n        project, rest = parts\n        domain = None\n    else:\n        raise ArtifactNameFormatError(s)\n\n    # TODO: make this more robust\n    if \"@\" in rest:\n        repo, tag_or_digest = rest.split(\"@\")\n    elif \":\" in rest:\n        parts = rest.split(\":\")\n        if len(parts) != 2:\n            raise ArtifactNameFormatError(s)\n        repo, tag_or_digest = parts\n    else:\n        raise ArtifactNameFormatError(s)\n\n    return ArtifactName(domain, project, repo, tag_or_digest)\n</code></pre>"},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.get_artifact_architecture","title":"<code>get_artifact_architecture(artifact: Artifact) -&gt; str | None</code>","text":"Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_architecture(artifact: Artifact) -&gt; str | None:\n    try:\n        return str(artifact.extra_attrs[\"architecture\"])  # type: ignore[index]\n    except (TypeError, KeyError):\n        return None\n</code></pre>"},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.get_artifact_os","title":"<code>get_artifact_os(artifact: Artifact) -&gt; str | None</code>","text":"Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_os(artifact: Artifact) -&gt; str | None:\n    try:\n        return str(artifact.extra_attrs[\"os\"])  # type: ignore[index]\n    except (TypeError, KeyError):\n        return None\n</code></pre>"},{"location":"reference/harbor/artifact/#harbor_cli.harbor.artifact.get_artifact_severity","title":"<code>get_artifact_severity(artifact: Artifact) -&gt; str | None</code>","text":"<p>Attempt to get the severity string for an artifact. Not every artifact has a scan overview, and not every scan overview has a severity string.</p> Source code in <code>harbor_cli/harbor/artifact.py</code> <pre><code>def get_artifact_severity(artifact: Artifact) -&gt; str | None:\n    \"\"\"Attempt to get the severity string for an artifact.\n    Not every artifact has a scan overview, and not every scan overview\n    has a severity string.\n    \"\"\"\n    try:\n        return artifact.scan.severity  # type: ignore[attr-defined]\n    except AttributeError:\n        return None\n</code></pre>"},{"location":"reference/harbor/common/","title":"Common","text":""},{"location":"reference/harbor/common/#harbor_cli.harbor.common","title":"<code>harbor_cli.harbor.common</code>","text":""},{"location":"reference/harbor/common/#harbor_cli.harbor.common-functions","title":"Functions","text":""},{"location":"reference/harbor/common/#harbor_cli.harbor.common.prompt_username_secret","title":"<code>prompt_username_secret(default_username: str | None = None, default_secret: str | None = None) -&gt; tuple[str, str]</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>@no_headless\ndef prompt_username_secret(\n    default_username: str | None = None, default_secret: str | None = None\n) -&gt; tuple[str, str]:\n    username = str_prompt(\n        \"Harbor username\",\n        default=default_username,\n    )\n    secret = str_prompt(\n        \"Harbor secret\",\n        default=default_secret,\n        password=True,\n    )\n    return username, secret\n</code></pre>"},{"location":"reference/harbor/common/#harbor_cli.harbor.common.prompt_basicauth","title":"<code>prompt_basicauth(default: str | None = None) -&gt; str</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_basicauth(default: str | None = None) -&gt; str:\n    return str_prompt(\n        \"Harbor Base64 Basic Auth (e.g. dXNlcjpwYXNzd29yZA==)\",\n        default=default,\n        password=True,\n    )\n</code></pre>"},{"location":"reference/harbor/common/#harbor_cli.harbor.common.prompt_credentials_file","title":"<code>prompt_credentials_file(default: Path | None = None) -&gt; Path</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_credentials_file(default: Path | None = None) -&gt; Path:\n    return path_prompt(\n        \"Harbor credentials file (e.g. /path/to/robot.json)\",\n        default=default,\n        show_default=True,\n        must_exist=True,\n        exist_ok=True,\n    )\n</code></pre>"},{"location":"reference/harbor/common/#harbor_cli.harbor.common.prompt_url","title":"<code>prompt_url(default: str | None = None) -&gt; str</code>","text":"Source code in <code>harbor_cli/harbor/common.py</code> <pre><code>def prompt_url(default: str | None = None) -&gt; str:\n    return str_prompt(\n        \"Harbor API URL (e.g. https://harbor.example.com/api/v2.0)\",\n        default=default,\n    )\n</code></pre>"},{"location":"reference/output/","title":"Index","text":"<ul> <li>harbor_cli.output.console</li> <li>harbor_cli.output.prompts</li> <li>harbor_cli.output.render</li> <li>harbor_cli.output.table</li> </ul>"},{"location":"reference/output/#harbor_cli.output","title":"<code>harbor_cli.output</code>","text":""},{"location":"reference/output/console/","title":"Console","text":""},{"location":"reference/output/console/#harbor_cli.output.console","title":"<code>harbor_cli.output.console</code>","text":""},{"location":"reference/output/console/#harbor_cli.output.console-attributes","title":"Attributes","text":""},{"location":"reference/output/console/#harbor_cli.output.console.console","title":"<code>console = Console()</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/console/#harbor_cli.output.console.err_console","title":"<code>err_console = Console(stderr=True, highlight=False, soft_wrap=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/console/#harbor_cli.output.console-classes","title":"Classes","text":""},{"location":"reference/output/console/#harbor_cli.output.console-functions","title":"Functions","text":""},{"location":"reference/output/console/#harbor_cli.output.console.get_renderable","title":"<code>get_renderable(message: str, icon: Icon | str, color: Color, preamble: str | None = None, color_all: bool = False, bold: bool = False, panel: bool = False, rule: bool = False) -&gt; Group</code>","text":"<p>Constructs a renderable object for printing to the console.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to print.</p> required <code>icon</code> <code>Icon</code> <p>Icon to use.</p> required <code>color</code> <code>Color</code> <p>Color to use for the icon.</p> required <code>preamble</code> <code>str</code> <p>Preamble to print before the message, by default None Trailing colon and whitespace are removed.</p> <code>None</code> <code>color_all</code> <code>bool</code> <p>Whether to color the entire message, by default False Only colors the icon if False.</p> <code>False</code> <code>bold</code> <code>bool</code> <p>Whether to bold the message, by default False</p> <code>False</code> <code>panel</code> <code>bool</code> <p>Whether to wrap the message in a panel, by default False</p> <code>False</code> <code>rule</code> <code>bool</code> <p>Whether to print a rule (line) before the message, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>Group</code> <p>A group of renderables to print.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def get_renderable(\n    message: str,\n    icon: Icon | str,  # stupid mypy hack since it doesn't understand StrEnum here\n    color: Color,\n    preamble: str | None = None,\n    color_all: bool = False,\n    bold: bool = False,\n    panel: bool = False,\n    rule: bool = False,\n) -&gt; Group:\n    \"\"\"Constructs a renderable object for printing to the console.\n\n    Parameters\n    ----------\n    message : str\n        Message to print.\n    icon : Icon\n        Icon to use.\n    color : Color\n        Color to use for the icon.\n    preamble : str, optional\n        Preamble to print before the message, by default None\n        Trailing colon and whitespace are removed.\n    color_all : bool, optional\n        Whether to color the entire message, by default False\n        Only colors the icon if False.\n    bold : bool, optional\n        Whether to bold the message, by default False\n    panel : bool, optional\n        Whether to wrap the message in a panel, by default False\n    rule : bool, optional\n        Whether to print a rule (line) before the message, by default False\n\n    Returns\n    -------\n    Group\n        A group of renderables to print.\n    \"\"\"\n    # NOTE: A rich.Group is immutable, so we have to collect renderables first\n    renderables: List[RenderableType] = []\n    if rule:\n        renderables.append(Rule(style=\"rule.line\"))\n\n    color_func = get_color_func(color)\n    msg = message\n\n    # Add preamble in bold, separated with colon\n    if preamble:\n        preamble = preamble.strip(\": \")  # remove colon and whitespace\n        msg = f\"{bold_func(color_func(preamble))}: {message}\"\n\n    # Format the icon and message\n    msg = f\"{bold_func(color_func(icon))} {msg}\"\n    if color_all:\n        msg = color_func(msg)  # HACK: we just call the color func again here\n    if bold:\n        msg = bold_func(msg)\n\n    # Indent multiline strings to follow icon + space\n    msg = msg.replace(\"\\n\", \"\\n\" + \" \" * (len(str(icon)) + 1))\n\n    if panel:\n        renderables.append(Panel(msg, expand=False))\n    else:\n        renderables.append(msg)\n\n    return Group(*renderables)\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.info","title":"<code>info(message: str, panel: bool = False, rule: bool = False, **kwargs: Any) -&gt; None</code>","text":"<p>Log with INFO level and print an informational message.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def info(\n    message: str,\n    panel: bool = False,\n    rule: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Log with INFO level and print an informational message.\"\"\"\n    logger.info(message, extra=dict(**kwargs))\n    err_console.print(\n        get_renderable(message, Icon.INFO, \"green\", panel=panel, rule=rule)\n    )\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.success","title":"<code>success(message: str, panel: bool = False, rule: bool = False, **kwargs: Any) -&gt; None</code>","text":"<p>Log with DEBUG level and print a success message.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def success(\n    message: str,\n    panel: bool = False,\n    rule: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Log with DEBUG level and print a success message.\"\"\"\n    logger.debug(message, extra=dict(**kwargs))\n    err_console.print(\n        get_renderable(message, Icon.OK, \"green\", panel=panel, rule=rule),\n    )\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.warning","title":"<code>warning(message: str, rule: bool = False, panel: bool = False, **kwargs: Any) -&gt; None</code>","text":"<p>Log with WARNING level and optionally print a warning message.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def warning(\n    message: str,\n    rule: bool = False,\n    panel: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Log with WARNING level and optionally print a warning message.\"\"\"\n    logger.warning(message, extra=dict(**kwargs))\n    if get_state().config.general.warnings:\n        err_console.print(\n            get_renderable(\n                message,\n                icon=Icon.WARNING,\n                color=\"gold3\",\n                preamble=\"WARNING\",\n                color_all=True,  # entire message is yellow\n                rule=rule,\n                panel=panel,\n                bold=True,\n            )\n        )\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.error","title":"<code>error(message: str, rule: bool = False, panel: bool = False, exc_info: bool = False, **kwargs: Any) -&gt; None</code>","text":"<p>Log with ERROR level and print an error message.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def error(\n    message: str,\n    rule: bool = False,\n    panel: bool = False,\n    exc_info: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Log with ERROR level and print an error message.\"\"\"\n    logger.error(message, extra=dict(**kwargs), exc_info=exc_info)\n    err_console.print(\n        get_renderable(\n            message,\n            icon=Icon.ERROR,\n            color=\"red\",\n            color_all=True,\n            rule=rule,\n            panel=panel,\n            bold=True,\n        )\n    )\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.exit_ok","title":"<code>exit_ok(message: Optional[str] = None, code: int = 0, **kwargs: Any) -&gt; NoReturn</code>","text":"<p>Logs a message with INFO level and exits with the given code (default: 0)</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to print.</p> <code>None</code> <code>code</code> <code>int</code> <p>Exit code, by default 0</p> <code>0</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the extra dict.</p> <code>{}</code> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def exit_ok(message: Optional[str] = None, code: int = 0, **kwargs: Any) -&gt; NoReturn:\n    \"\"\"Logs a message with INFO level and exits with the given code (default: 0)\n\n    Parameters\n    ----------\n    message : str\n        Message to print.\n    code : int, optional\n        Exit code, by default 0\n    **kwargs\n        Additional keyword arguments to pass to the extra dict.\n    \"\"\"\n    if message:\n        info(message, **kwargs)\n    raise SystemExit(code)\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.exit_err","title":"<code>exit_err(message: str, code: int = 1, **kwargs: Any) -&gt; NoReturn</code>","text":"<p>Logs a message with ERROR level and exits with the given code (default: 1).</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to print.</p> required <code>code</code> <code>int</code> <p>Exit code, by default 1</p> <code>1</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the extra dict.</p> <code>{}</code> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def exit_err(message: str, code: int = 1, **kwargs: Any) -&gt; NoReturn:\n    \"\"\"Logs a message with ERROR level and exits with the given\n    code (default: 1).\n\n    Parameters\n    ----------\n    message : str\n        Message to print.\n    code : int, optional\n        Exit code, by default 1\n    **kwargs\n        Additional keyword arguments to pass to the extra dict.\n    \"\"\"\n    error(message, **kwargs)\n    raise SystemExit(code)\n</code></pre>"},{"location":"reference/output/console/#harbor_cli.output.console.print_toml","title":"<code>print_toml(toml_str: str, end: str = '\\n') -&gt; None</code>","text":"<p>Prints TOML to stdout using the default console.</p> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def print_toml(toml_str: str, end: str = \"\\n\") -&gt; None:\n    \"\"\"Prints TOML to stdout using the default console.\"\"\"\n    console.print(\n        toml_str,\n        markup=False,  # TOML tables could be interpreted as rich markup\n        soft_wrap=True,  # prevents mangling whitespace\n        end=end,  # Allow control of trailing newline\n    )\n</code></pre>"},{"location":"reference/output/prompts/","title":"Prompts","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts","title":"<code>harbor_cli.output.prompts</code>","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts-attributes","title":"Attributes","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts.ENUMERATION_WARNING","title":"<code>ENUMERATION_WARNING = f'Unconstrained resource enumeration detected. It is recommended to use {render_cli_option('--query')} or {render_cli_option('--limit')} to constrain the results. Continue?'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts-classes","title":"Classes","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts-functions","title":"Functions","text":""},{"location":"reference/output/prompts/#harbor_cli.output.prompts.no_headless","title":"<code>no_headless(f: Callable[P, T]) -&gt; Callable[P, T]</code>","text":"<p>Decorator that causes application to exit if called from a headless environment.</p> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>def no_headless(f: Callable[P, T]) -&gt; Callable[P, T]:\n    \"\"\"Decorator that causes application to exit if called from a headless environment.\"\"\"\n\n    @wraps(f)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:\n        if is_headless():\n            # TODO: determine caller etc. via the stack\n            # If a default argument was passed in, we can return that:\n            # NOTE: this disallows None as a default value, but that is consistent\n            # with the type annotations of the prompt functions, so it's fine...?\n            default = cast(Union[T, EllipsisType], kwargs.get(\"default\"))\n            if \"default\" in kwargs and default not in [None, ...]:\n                return default\n            prompt = args[0] if args else kwargs.get(\"prompt\") or \"\"\n            exit_err(\n                f\"Headless session detected; user input required when prompting for {prompt!r}.\",\n                prompt_args=args,\n                prompt_kwargs=kwargs,\n            )\n        return f(*args, **kwargs)\n\n    return wrapper\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.is_headless","title":"<code>is_headless() -&gt; bool</code>","text":"<p>Determines if we are running in a headless environment (e.g. CI, Docker, etc.)</p> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>def is_headless() -&gt; bool:\n    \"\"\"Determines if we are running in a headless environment (e.g. CI, Docker, etc.)\"\"\"\n    if os.environ.get(\"CI\", None):\n        return True\n    elif os.environ.get(\"DEBIAN_FRONTEND\", None) == \"noninteractive\":\n        return True\n    # Probably not safe to test \"DISPLAY\" here\n    return False\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.prompt_msg","title":"<code>prompt_msg(*msgs: str) -&gt; str</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>def prompt_msg(*msgs: str) -&gt; str:\n    return f\"[bold]{green(Icon.PROMPT)} {' '.join(msg.strip() for msg in filter(None, msgs))}[/bold]\"\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.str_prompt","title":"<code>str_prompt(prompt: str, default: Any = ..., password: bool = False, show_default: bool = True, choices: list[str] | None = None, empty_ok: bool = False, **kwargs: Any) -&gt; str</code>","text":"<p>Prompts the user for a string input. Optionally controls for empty input. Loops until a valid input is provided.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Prompt to display to the user.</p> required <code>default</code> <code>Any</code> <p>Default value to use if the user does not provide input. If not provided, the user will be required to provide input.</p> <code>...</code> <code>password</code> <code>bool</code> <p>Whether to hide the input, by default False</p> <code>False</code> <code>show_default</code> <code>bool</code> <p>Whether to show the default value, by default True <code>password=True</code> supercedes this option, and sets it to False.</p> <code>True</code> <code>empty_ok</code> <code>bool</code> <p>Whether to allow input consisting of only whitespace, by default False</p> <code>False</code> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef str_prompt(\n    prompt: str,\n    default: Any = ...,\n    password: bool = False,\n    show_default: bool = True,\n    choices: list[str] | None = None,\n    empty_ok: bool = False,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Prompts the user for a string input. Optionally controls\n    for empty input. Loops until a valid input is provided.\n\n    Parameters\n    ----------\n    prompt : str\n        Prompt to display to the user.\n    default : Any, optional\n        Default value to use if the user does not provide input.\n        If not provided, the user will be required to provide input.\n    password : bool, optional\n        Whether to hide the input, by default False\n    show_default : bool, optional\n        Whether to show the default value, by default True\n        `password=True` supercedes this option, and sets it to False.\n    empty_ok : bool, optional\n        Whether to allow input consisting of only whitespace, by default False\n\n    \"\"\"\n    # Don't permit secrets to be shown ever\n    if password:\n        show_default = False\n\n    # Notify user that a default secret will be used,\n    # but don't actually show the secret\n    if password and default not in (None, ..., \"\"):\n        _prompt_add = \"(leave empty to use existing value)\"\n    else:\n        _prompt_add = \"\"\n    msg = prompt_msg(prompt, _prompt_add)\n\n    inp = None\n    while not inp:\n        inp = Prompt.ask(\n            msg,\n            console=err_console,\n            password=password,\n            show_default=show_default,\n            default=default,\n            choices=choices,\n            **kwargs,\n        )\n        if empty_ok:  # nothing else to check\n            break\n\n        if not inp:\n            error(\"Input cannot be empty.\")\n        elif inp.isspace() and inp != default:\n            error(\"Input cannot solely consist of whitespace.\")\n        else:\n            break\n    return inp\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.int_prompt","title":"<code>int_prompt(prompt: str, default: int | None = None, show_default: bool = True, min: int | None = None, max: int | None = None, show_range: bool = True, **kwargs: Any) -&gt; int</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef int_prompt(\n    prompt: str,\n    default: int | None = None,\n    show_default: bool = True,\n    min: int | None = None,\n    max: int | None = None,\n    show_range: bool = True,\n    **kwargs: Any,\n) -&gt; int:\n    return _number_prompt(\n        IntPrompt,\n        prompt,\n        default=default,\n        show_default=show_default,\n        min=min,\n        max=max,\n        show_range=show_range,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.float_prompt","title":"<code>float_prompt(prompt: str, default: float | None = None, show_default: bool = True, min: float | None = None, max: float | None = None, show_range: bool = True, **kwargs: Any) -&gt; float</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef float_prompt(\n    prompt: str,\n    default: float | None = None,\n    show_default: bool = True,\n    min: float | None = None,\n    max: float | None = None,\n    show_range: bool = True,\n    **kwargs: Any,\n) -&gt; float:\n    val = _number_prompt(\n        FloatPrompt,\n        prompt,\n        default=default,\n        show_default=show_default,\n        min=min,\n        max=max,\n        show_range=show_range,\n        **kwargs,\n    )\n    # explicit cast to float since users might pass in int as default\n    # and we have no logic inside _number_prompt to handle that\n    return float(val)\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.bool_prompt","title":"<code>bool_prompt(prompt: str, default: Any = ..., show_default: bool = True, warning: bool = False, **kwargs: Any) -&gt; bool</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef bool_prompt(\n    prompt: str,\n    default: Any = ...,\n    show_default: bool = True,\n    warning: bool = False,\n    **kwargs: Any,\n) -&gt; bool:\n    return Confirm.ask(\n        prompt_msg(prompt),\n        console=err_console,\n        show_default=show_default,\n        default=default,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.path_prompt","title":"<code>path_prompt(prompt: str, default: Any = ..., show_default: bool = True, exist_ok: bool = True, must_exist: bool = False, **kwargs: Any) -&gt; Path</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef path_prompt(\n    prompt: str,\n    default: Any = ...,\n    show_default: bool = True,\n    exist_ok: bool = True,\n    must_exist: bool = False,\n    **kwargs: Any,\n) -&gt; Path:\n    if isinstance(default, Path):\n        default_arg = str(default)\n    elif default is None:\n        default_arg = ...  # type: ignore\n    else:\n        default_arg = default\n\n    while True:\n        path_str = str_prompt(\n            prompt,\n            default=default_arg,\n            show_default=show_default,\n            **kwargs,\n        )\n        path = Path(path_str)\n\n        if must_exist and not path.exists():\n            error(f\"Path does not exist: {path_link(path)}\")\n        elif not exist_ok and path.exists():\n            error(f\"Path already exists: {path_link(path)}\")\n        else:\n            return path\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.delete_prompt","title":"<code>delete_prompt(config: HarborCLIConfig, force: bool, dry_run: bool = False, resource: str | None = None, name: str | None = None) -&gt; None</code>","text":"<p>Prompt user to confirm deletion of a resource.</p> Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>@no_headless\ndef delete_prompt(\n    config: HarborCLIConfig,\n    force: bool,\n    dry_run: bool = False,\n    resource: str | None = None,\n    name: str | None = None,\n) -&gt; None:\n    \"\"\"Prompt user to confirm deletion of a resource.\"\"\"\n    if dry_run:\n        return\n    if force:\n        return\n    if config.general.confirm_deletion:\n        resource = resource or \"resource(s)\"\n        name = f\" {name!r}\" if name else \"\"\n        message = f\"Are you sure you want to delete the {resource}{name}?\"\n        if not bool_prompt(message, default=False):\n            exit_ok(\"Deletion aborted. Delete with --force to skip this prompt.\")\n    return\n</code></pre>"},{"location":"reference/output/prompts/#harbor_cli.output.prompts.check_enumeration_options","title":"<code>check_enumeration_options(state: State, query: str | None = None, limit: int | None = None) -&gt; None</code>","text":"Source code in <code>harbor_cli/output/prompts.py</code> <pre><code>def check_enumeration_options(\n    state: State,\n    query: str | None = None,\n    limit: int | None = None,\n) -&gt; None:\n    if state.config.general.confirm_enumeration and not limit and not query:\n        warning(\n            f\"Neither [{STYLE_CLI_OPTION}]--query[/] nor [{STYLE_CLI_OPTION}]--limit[/] is specified. \"\n            \"This could result in a large amount of data being returned. \"\n        )\n        if not bool_prompt(\"Continue?\"):\n            exit_ok()\n</code></pre>"},{"location":"reference/output/render/","title":"Render","text":""},{"location":"reference/output/render/#harbor_cli.output.render","title":"<code>harbor_cli.output.render</code>","text":""},{"location":"reference/output/render/#harbor_cli.output.render-attributes","title":"Attributes","text":""},{"location":"reference/output/render/#harbor_cli.output.render.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/render/#harbor_cli.output.render-classes","title":"Classes","text":""},{"location":"reference/output/render/#harbor_cli.output.render-functions","title":"Functions","text":""},{"location":"reference/output/render/#harbor_cli.output.render.render_result","title":"<code>render_result(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None</code>","text":"<p>Render the result of a command stdout or file.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>T</code> <p>The result of a command.</p> required <code>ctx</code> <code>Context</code> <p>The typer context from the command invocation, by default None</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the render function.</p> <code>{}</code> Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_result(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None:\n    \"\"\"Render the result of a command stdout or file.\n\n    Parameters\n    ----------\n    result : T\n        The result of a command.\n    ctx : typer.Context, optional\n        The typer context from the command invocation, by default None\n    **kwargs\n        Additional keyword arguments to pass to the render function.\n    \"\"\"\n    # Short form aliases\n    state = get_state()\n    fmt = state.config.output.format\n    paging = state.config.output.paging\n    raw_mode = state.config.harbor.raw_mode\n    validation = state.config.harbor.validate_data\n\n    ctx_manager = console.pager() if paging else nullcontext()\n    with ctx_manager:\n        if raw_mode:  # raw mode ignores output format\n            render_raw(result, ctx, **kwargs)\n        elif fmt == OutputFormat.JSON or not validation:\n            render_json(result, ctx, **kwargs)\n        elif fmt == OutputFormat.TABLE:\n            render_table(result, ctx, **kwargs)\n        else:\n            raise ValueError(f\"Unknown output format {fmt!r}.\")\n</code></pre>"},{"location":"reference/output/render/#harbor_cli.output.render.render_table","title":"<code>render_table(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None</code>","text":"<p>Render the result of a command as a table.</p> Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_table(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None:\n    \"\"\"Render the result of a command as a table.\"\"\"\n    # TODO: handle \"primitives\" like strings and numbers\n\n    # Try to render compact table if enabled\n    state = get_state()\n    compact = state.config.output.table.compact\n    if compact:\n        try:\n            render_table_compact(result, **kwargs)\n        except NotImplementedError as e:\n            logger.debug(f\"Unable to render compact table: {e}\")\n        except (EmptySequenceError, BuiltinTypeException):\n            pass  # can't render these types\n        else:\n            return\n\n    # If we got to this point, we have not printed a compact table.\n    # Use built-in table rendering from harborapi.\n    render_table_full(result)\n</code></pre>"},{"location":"reference/output/render/#harbor_cli.output.render.render_table_compact","title":"<code>render_table_compact(result: Any, **kwargs: Any) -&gt; None</code>","text":"<p>Render the result of a command as a compact table.</p> Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_table_compact(result: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Render the result of a command as a compact table.\"\"\"\n    renderable = get_renderable(result, **kwargs)\n    console.print(renderable)\n</code></pre>"},{"location":"reference/output/render/#harbor_cli.output.render.render_table_full","title":"<code>render_table_full(result: Any, **kwargs: Any) -&gt; None</code>","text":"Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_table_full(result: Any, **kwargs: Any) -&gt; None:\n    state = get_state()\n    show_description = state.config.output.table.description\n    max_depth = state.config.output.table.max_depth\n\n    def print_item(item: Any) -&gt; None:\n        \"\"\"Prints a harbor base model as a table (optionally with description),\n        if it is a harborapi BaseModel, otherwise just prints the item.\n        \"\"\"\n        if isinstance(item, HarborBaseModel):\n            console.print(\n                item.as_panel(with_description=show_description, max_depth=max_depth)\n            )\n        else:\n            console.print(item)\n\n    if isinstance(result, Sequence) and not isinstance(result, str):\n        for item in result:  # type: ignore # we can print anything\n            print_item(item)\n    else:\n        print_item(result)\n</code></pre>"},{"location":"reference/output/render/#harbor_cli.output.render.render_json","title":"<code>render_json(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None</code>","text":"<p>Render the result of a command as JSON.</p> Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_json(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None:\n    \"\"\"Render the result of a command as JSON.\"\"\"\n    state = get_state()\n    p = state.options.output_file\n    with_stdout = state.options.with_stdout\n    no_overwrite = state.options.no_overwrite\n    indent = state.config.output.JSON.indent\n    sort_keys = state.config.output.JSON.sort_keys\n\n    # We use a Pydantic RootModel to render any type as JSON\n    Output = RootModel[Any]\n\n    o = Output(root=result)\n    o_json = o.model_dump_json(indent=indent)\n\n    # TODO: Take a look at this. We probably _do_ want to support file output\n    # since we have a REPL and thus users can't use a shell redirect there,\n    # and as such we need some way to natively support writing the JSON output\n    # to a file. This, however, is a bit confusing with the `--with-stdout` option.\n    # Maybe the answer is to just remove the `--with-stdout` option and always\n    # print the output to the terminal regardles, and PERHAPS add a `--no-stdout` option.\n\n    if p:\n        if p.exists() and no_overwrite:\n            raise OverwriteError(f\"File {p.resolve()} exists.\")\n        with open(p, \"w\") as f:\n            f.write(o_json)\n            info(f\"Output written to {p.resolve()}\")\n\n    # Print to stdout if no output file is specified or if the\n    # --with-stdout flag is set.\n    if not p or with_stdout:\n        # We have to specify indent again here, because print_json()\n        # ignores the indent of the JSON string passed to it.\n        console.print_json(o_json, indent=indent, sort_keys=sort_keys)\n</code></pre>"},{"location":"reference/output/render/#harbor_cli.output.render.render_raw","title":"<code>render_raw(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None</code>","text":"<p>Render the result of data fetched in raw mode.</p> Source code in <code>harbor_cli/output/render.py</code> <pre><code>def render_raw(result: Any, ctx: typer.Context | None = None, **kwargs: Any) -&gt; None:\n    \"\"\"Render the result of data fetched in raw mode.\"\"\"\n    state = get_state()\n    try:\n        result = json.dumps(result)\n        console.print_json(result, indent=state.config.output.JSON.indent)\n    except Exception as e:\n        warning(f\"Unable to render raw data as JSON: {e}\")\n        console.print(result)\n</code></pre>"},{"location":"reference/output/formatting/","title":"Index","text":"<ul> <li>harbor_cli.output.formatting.bytes</li> <li>harbor_cli.output.formatting.path</li> </ul>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting","title":"<code>harbor_cli.output.formatting</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting-attributes","title":"Attributes","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.EMOJI_NO","title":"<code>EMOJI_NO = ':cross_mark:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.EMOJI_YES","title":"<code>EMOJI_YES = ':white_check_mark:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.state","title":"<code>state = get_state()</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.FALSE_STR","title":"<code>FALSE_STR = 'False'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.TRUE_STR","title":"<code>TRUE_STR = 'True'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.NONE_STR","title":"<code>NONE_STR = 'None'</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.logger","title":"<code>logger = logging.getLogger('harbor-cli')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting-functions","title":"Functions","text":""},{"location":"reference/output/formatting/#harbor_cli.output.formatting.get_state","title":"<code>get_state() -&gt; State</code>","text":"<p>Returns the global state object.</p> <p>Instantiates a new state object with defaults if it doesn't exist.</p> Source code in <code>harbor_cli/state.py</code> <pre><code>def get_state() -&gt; State:\n    \"\"\"Returns the global state object.\n\n    Instantiates a new state object with defaults if it doesn't exist.\n    \"\"\"\n    return State()\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.str_str","title":"<code>str_str(value: Optional[str]) -&gt; str</code>","text":"<p>Format an optional string value as a string.</p> Source code in <code>harbor_cli/output/formatting/builtin.py</code> <pre><code>def str_str(value: Optional[str]) -&gt; str:\n    \"\"\"Format an optional string value as a string.\"\"\"\n    return str(value if value is not None else NONE_STR)\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.float_str","title":"<code>float_str(value: Optional[float], precision: int = 2) -&gt; str</code>","text":"<p>Format a float value as a string.</p> Source code in <code>harbor_cli/output/formatting/builtin.py</code> <pre><code>def float_str(value: Optional[float], precision: int = 2) -&gt; str:\n    \"\"\"Format a float value as a string.\"\"\"\n    if value is None:\n        return NONE_STR\n    return f\"{value:.{precision}f}\"\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.int_str","title":"<code>int_str(value: Optional[int]) -&gt; str</code>","text":"<p>Format an integer value as a string.</p> Source code in <code>harbor_cli/output/formatting/builtin.py</code> <pre><code>def int_str(value: Optional[int]) -&gt; str:\n    \"\"\"Format an integer value as a string.\"\"\"\n    if value is None:\n        return NONE_STR\n    return str(value)\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.plural_str","title":"<code>plural_str(value: str, sequence: Sequence[Any]) -&gt; str</code>","text":"<p>Format a string as a pluralized string if a given sequence is not of length 1.</p> Source code in <code>harbor_cli/output/formatting/builtin.py</code> <pre><code>def plural_str(value: str, sequence: Sequence[Any]) -&gt; str:\n    \"\"\"Format a string as a pluralized string if a given sequence is\n    not of length 1.\n    \"\"\"\n    if value.endswith(\"y\"):\n        plural_value = value[:-1] + \"ies\"\n    elif value.endswith(\"ies\"):\n        plural_value = value\n        value = value[:-3] + \"y\"\n    elif value.endswith(\"s\"):\n        plural_value = value\n        value = value[:-1]\n    else:\n        plural_value = value + \"s\"\n    return value if len(sequence) == 1 else f\"{plural_value}\"\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.bytesize_str","title":"<code>bytesize_str(b: int | None, decimal: bool = False) -&gt; str</code>","text":"Source code in <code>harbor_cli/output/formatting/bytes.py</code> <pre><code>def bytesize_str(b: int | None, decimal: bool = False) -&gt; str:\n    if b is None or b &lt; 0:\n        return NONE_STR\n    return ByteSize(b).human_readable(decimal=decimal)\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.datetime_str","title":"<code>datetime_str(d: datetime | int | float | None, with_time: bool = True, subsecond: bool = False) -&gt; str</code>","text":"<p>Formats an optional datetime object as as a string.</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>datetime | None</code> <p>The datetime object to format.</p> required <code>with_time</code> <code>bool</code> <p>Whether to include the time in the formatted string, by default True</p> <code>True</code> <code>subsecond</code> <code>bool</code> <p>Whether to include subsecond precision in the formatted string, by default False Has no effect if <code>with_time</code> is False.</p> <code>False</code> Source code in <code>harbor_cli/output/formatting/dates.py</code> <pre><code>def datetime_str(\n    d: datetime | int | float | None, with_time: bool = True, subsecond: bool = False\n) -&gt; str:\n    \"\"\"Formats an optional datetime object as as a string.\n\n    Parameters\n    ----------\n    d : datetime | None\n        The datetime object to format.\n    with_time : bool, optional\n        Whether to include the time in the formatted string, by default True\n    subsecond : bool, optional\n        Whether to include subsecond precision in the formatted string, by default False\n        Has no effect if `with_time` is False.\n    \"\"\"\n    if d is None:\n        return NONE_STR\n    if isinstance(d, (int, float)):\n        try:\n            d = datetime.fromtimestamp(d)\n        except (ValueError, OSError) as e:  # OSError if timestamp is out of range\n            if isinstance(e, OSError):\n                logger.error(\"Timestamp out of range: %s\", d)\n            return NONE_STR\n    fmt = \"%Y-%m-%d\"\n    if with_time:\n        fmt = f\"{fmt} %H:%M:%S\"\n        if subsecond:\n            fmt = f\"{fmt}.%f\"\n    return d.strftime(fmt)\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.bool_str","title":"<code>bool_str(value: Optional[bool], none_is_false: bool = True) -&gt; str</code>","text":"<p>Format a boolean value as a string.</p> Source code in <code>harbor_cli/output/formatting/builtin.py</code> <pre><code>def bool_str(value: Optional[bool], none_is_false: bool = True) -&gt; str:\n    \"\"\"Format a boolean value as a string.\"\"\"\n    # Harbor API sometimes has None signify False\n    # Why? I don't know.\n    if value is None and none_is_false:\n        value = False\n    if state.config.output.table.style.bool_emoji:\n        return EMOJI_YES if value else EMOJI_NO\n    elif value is None:\n        return NONE_STR  # should we return None in emoji mode as well?\n    return TRUE_STR if value else FALSE_STR\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.boolstr_str","title":"<code>boolstr_str(boolstr: str | bool | None, default: bool | None = False) -&gt; str</code>","text":"<p>Format a boolean string as a string.</p> <p>ProjectMetadata has fields that can be the strings 'true' or 'false', or None. This function converts those values to a boolean if possible, then passes it to bool_str.</p> <p>Parameters:</p> Name Type Description Default <code>boolstr</code> <code>str | bool | None</code> <p>A string that is either 'true', 'false', or None, OR a boolean value, in case the API changes in the future and these fields are returned as booleans instead of strings.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the value created by <code>bool_str()</code></p> See Also <p>harbor_cli.output.formatting.builtin.bool_str https://unioslo.github.io/harborapi/usage/models/#string-fields-with-true-and-false-values-in-api-spec</p> Source code in <code>harbor_cli/output/formatting/harbor.py</code> <pre><code>def boolstr_str(boolstr: str | bool | None, default: bool | None = False) -&gt; str:\n    \"\"\"Format a boolean string as a string.\n\n    ProjectMetadata has fields that can be the strings\n    'true' or 'false', or None. This function converts\n    those values to a boolean if possible, then passes\n    it to bool_str.\n\n    Parameters\n    ----------\n    boolstr : str | bool | None\n        A string that is either 'true', 'false', or None,\n        OR a boolean value, in case the API changes in the future\n        and these fields are returned as booleans instead of strings.\n\n    Returns\n    -------\n    str\n        A string representation of the value created by `bool_str()`\n\n    See Also\n    --------\n    [harbor_cli.output.formatting.builtin.bool_str][]\n    &lt;https://unioslo.github.io/harborapi/usage/models/#string-fields-with-true-and-false-values-in-api-spec&gt;\n    \"\"\"\n    # Strings that do not match either 'true' or 'false' are\n    # treated as `None` by default, and then we let `bool_str`\n    # figure out what that means. This is a narrow edge case, and\n    # a direct result of Harbor's own mistakes, so we don't spend\n    # too much energy trying to make this perfect here.\n    if boolstr is None:\n        return bool_str(boolstr)\n    elif boolstr == \"true\":\n        return bool_str(True)\n    elif boolstr == \"false\":\n        return bool_str(False)\n    elif isinstance(boolstr, bool):  # spec has changed, is now a bool\n        # NOTE: could add some sort of alert that the spec has changed here\n        return bool_str(boolstr)\n    else:\n        return bool_str(default)\n</code></pre>"},{"location":"reference/output/formatting/#harbor_cli.output.formatting.path_link","title":"<code>path_link(path: Path, absolute: bool = True) -&gt; str</code>","text":"<p>Return a link to a path.</p> Source code in <code>harbor_cli/output/formatting/path.py</code> <pre><code>def path_link(path: Path, absolute: bool = True) -&gt; str:\n    \"\"\"Return a link to a path.\"\"\"\n    abspath = path.resolve().absolute()\n    if absolute:\n        path_str = str(abspath)\n    else:\n        path_str = str(path)\n    return f\"[link=file://{abspath}]{path_str}[/link]\"\n</code></pre>"},{"location":"reference/output/formatting/bytes/","title":"Bytes","text":""},{"location":"reference/output/formatting/bytes/#harbor_cli.output.formatting.bytes","title":"<code>harbor_cli.output.formatting.bytes</code>","text":""},{"location":"reference/output/formatting/bytes/#harbor_cli.output.formatting.bytes-attributes","title":"Attributes","text":""},{"location":"reference/output/formatting/bytes/#harbor_cli.output.formatting.bytes-functions","title":"Functions","text":""},{"location":"reference/output/formatting/bytes/#harbor_cli.output.formatting.bytes.bytesize_str","title":"<code>bytesize_str(b: int | None, decimal: bool = False) -&gt; str</code>","text":"Source code in <code>harbor_cli/output/formatting/bytes.py</code> <pre><code>def bytesize_str(b: int | None, decimal: bool = False) -&gt; str:\n    if b is None or b &lt; 0:\n        return NONE_STR\n    return ByteSize(b).human_readable(decimal=decimal)\n</code></pre>"},{"location":"reference/output/formatting/path/","title":"Path","text":""},{"location":"reference/output/formatting/path/#harbor_cli.output.formatting.path","title":"<code>harbor_cli.output.formatting.path</code>","text":"<p>Control the formatting of console output.</p>"},{"location":"reference/output/formatting/path/#harbor_cli.output.formatting.path-functions","title":"Functions","text":""},{"location":"reference/output/formatting/path/#harbor_cli.output.formatting.path.path_link","title":"<code>path_link(path: Path, absolute: bool = True) -&gt; str</code>","text":"<p>Return a link to a path.</p> Source code in <code>harbor_cli/output/formatting/path.py</code> <pre><code>def path_link(path: Path, absolute: bool = True) -&gt; str:\n    \"\"\"Return a link to a path.\"\"\"\n    abspath = path.resolve().absolute()\n    if absolute:\n        path_str = str(abspath)\n    else:\n        path_str = str(path)\n    return f\"[link=file://{abspath}]{path_str}[/link]\"\n</code></pre>"},{"location":"reference/output/table/","title":"Index","text":"<ul> <li>harbor_cli.output.table.artifact</li> <li>harbor_cli.output.table.repository</li> <li>harbor_cli.output.table.system</li> </ul>"},{"location":"reference/output/table/#harbor_cli.output.table","title":"<code>harbor_cli.output.table</code>","text":"<p>Module for generating compact tables and panels for output.</p> What is a compact table? <p>NOTE: For brevity's sake, \"compact table\" refers to both <code>rich.table.Table</code> and <code>rich.panel.Panel</code> objects in this documentation.</p> <p>A compact table is a table that displays one or more models in a custom-made table for that specific model. With compact tables, multiple model instances can be displayed in the same table, unlike the auto-generated tables from harborapi which only display one model instance at a time. This is useful for aggregating information from a list of multiple model instances and presenting them in a single table, or for displaying information from a single model that contains multiple submodels in a single table or panel.</p> <p>A compact table is generated by a render function, which is a function that takes in a harborapi model instance or list of instances and returns a <code>rich.table.Table</code> object or a <code>rich.panel.Panel</code> object, both of which can be passed to a Rich console and be printed.</p> How it works <p>There is a lot magic and metaprogramming (same thing) going on in this module. We use the type annotations of render functions to determine which model goes to which render function. This is done by populating a dictionary with the type annotations of the render functions, and then looking up the type of the object we want to render in that dictionary. If the type is found, we return the render function. If not, we raise a NotImplementedError.</p> <p>In cases where we receive a single model instance, and we only have a render function for a sequence of that model type, we try to wrap the model in a list and pass it to the sequence render function. If we have a render function for both sequences and non-sequences, we will always prioritize the non-sequence function when a single model instance is passed in. However, lists with a single item will always use a sequence function if available.</p>"},{"location":"reference/output/table/#harbor_cli.output.table-attributes","title":"Attributes","text":""},{"location":"reference/output/table/#harbor_cli.output.table.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table.RenderableType","title":"<code>RenderableType = Union[Table, Panel]</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table.RenderFuncSeq","title":"<code>RenderFuncSeq = Callable[..., RenderableType]</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table.RenderFuncSingle","title":"<code>RenderFuncSingle = Callable[..., RenderableType]</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table.RenderFuncType","title":"<code>RenderFuncType = Union[RenderFuncSeq, RenderFuncSingle]</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table.RENDER_FUNCTIONS","title":"<code>RENDER_FUNCTIONS: Dict[Any, RenderFuncType] = {}</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/#harbor_cli.output.table-classes","title":"Classes","text":""},{"location":"reference/output/table/#harbor_cli.output.table.BuiltinTypeException","title":"<code>BuiltinTypeException</code>","text":"<p>               Bases: <code>TypeError</code></p> Source code in <code>harbor_cli/output/table/__init__.py</code> <pre><code>class BuiltinTypeException(TypeError):\n    pass\n</code></pre>"},{"location":"reference/output/table/#harbor_cli.output.table.EmptySequenceError","title":"<code>EmptySequenceError</code>","text":"<p>               Bases: <code>ValueError</code></p> Source code in <code>harbor_cli/output/table/__init__.py</code> <pre><code>class EmptySequenceError(ValueError):\n    pass\n</code></pre>"},{"location":"reference/output/table/#harbor_cli.output.table-functions","title":"Functions","text":""},{"location":"reference/output/table/#harbor_cli.output.table.get_render_function","title":"<code>get_render_function(obj: Any) -&gt; RenderFuncType</code>","text":"<p>Get the render function for a given object.</p> <p>If the object is a sequence, only render functions that take in sequences are returned.</p> <p>If the object is not a sequence, render functions that take in a a single object are prioritized, but if none are found, a sequence render func is returned.</p> <p>The caller of this function must discern whether or not a sequence function has been returned, and if so, wrap the object in a sequence if it is not a sequence. In scenarios where non-metaprogrammy code calls this function, this should not be an issue, since the caller should know if they passed in a sequence or not.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object to get the render function for.</p> required <p>Returns:</p> Type Description <code>RenderFuncType</code> <p>The render function for the object. A render function is a function that takes in a BaseModel or a list of BaseModels and returns a rich.table.Table or rich.panel.Panel object.</p> See Also <ul> <li>harbor_cli.output.table.get_renderable</li> <li>harbor_cli.types.is_sequence_func</li> <li>harbor_cli.output.render.render_table_compact</li> </ul> Source code in <code>harbor_cli/output/table/__init__.py</code> <pre><code>def get_render_function(obj: Any) -&gt; RenderFuncType:\n    \"\"\"Get the render function for a given object.\n\n    If the object is a sequence, only render functions that take in\n    sequences are returned.\n\n    If the object is not a sequence, render functions that take in a\n    a single object are prioritized, but if none are found, a sequence\n    render func is returned.\n\n    The caller of this function must discern whether or not a sequence function\n    has been returned, and if so, wrap the object in a sequence if it is\n    not a sequence. In scenarios where non-metaprogrammy code calls this\n    function, this should not be an issue, since the caller should know if they\n    passed in a sequence or not.\n\n    Parameters\n    ----------\n    obj : Any\n        The object to get the render function for.\n\n    Returns\n    -------\n    RenderFuncType\n        The render function for the object. A render function is a function\n        that takes in a BaseModel or a list of BaseModels and returns a\n        rich.table.Table or rich.panel.Panel object.\n\n    See Also\n    --------\n    * [harbor_cli.output.table.get_renderable][]\n    * [harbor_cli.types.is_sequence_func][]\n    * [harbor_cli.output.render.render_table_compact][]\n    \"\"\"\n    if isinstance(obj, Sequence) and not isinstance(obj, str):\n        if len(obj) == 0:  # type: ignore # type of items is irrelevant\n            raise EmptySequenceError(\"Cannot render empty sequence.\")\n        t = Sequence[type(obj[0])]  # type: ignore # TODO: find a way to type this\n    else:\n        t = type(obj)  # type: ignore # type of obj is irrelevant\n\n    def _get_render_func(t: Any) -&gt; RenderFuncType:\n        try:\n            return RENDER_FUNCTIONS[t]\n        except KeyError:\n            # FIXME: handle list of builtins\n            if is_builtin_obj(t):\n                raise BuiltinTypeException(\n                    \"Builtin types cannot be rendered as a compact table.\"\n                )\n            raise NotImplementedError(f\"{t} not implemented.\")\n\n    # try to get the single obj render func\n    try:\n        return _get_render_func(t)\n    # fall back on the sequence render func\n    except NotImplementedError:\n        return _get_render_func(Sequence[t])\n</code></pre>"},{"location":"reference/output/table/#harbor_cli.output.table.get_renderable","title":"<code>get_renderable(obj: Any, **kwargs: Any) -&gt; Table | Panel</code>","text":"<p>Get the renderable for a given object.</p> Source code in <code>harbor_cli/output/table/__init__.py</code> <pre><code>def get_renderable(obj: Any, **kwargs: Any) -&gt; Table | Panel:\n    \"\"\"Get the renderable for a given object.\"\"\"\n    # TODO: add typeguard here to only allow BaseModel or list of BaseModel\n    render_function = get_render_function(obj)\n    # wrap object in sequence if necessary (use sequence func if we cant find a single func)\n    if is_sequence_func(render_function) and not isinstance(obj, Sequence):\n        return render_function([obj], **kwargs)\n    return render_function(obj, **kwargs)\n</code></pre>"},{"location":"reference/output/table/artifact/","title":"Artifact","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact","title":"<code>harbor_cli.output.table.artifact</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact-attributes","title":"Attributes","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.DOUBLE_SPACE_PATTERN","title":"<code>DOUBLE_SPACE_PATTERN = re.compile(' +')</code>  <code>module-attribute</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact-classes","title":"Classes","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs","title":"<code>ColKwargs</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>class ColKwargs(TypedDict):  # mypy complains if we use a normal dict\n    min_width: int\n    max_width: int\n    justify: Literal[\"right\", \"left\", \"center\"]\n    overflow: Literal[\"fold\"]\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs-attributes","title":"Attributes","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs.min_width","title":"<code>min_width: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs.max_width","title":"<code>max_width: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs.justify","title":"<code>justify: Literal['right', 'left', 'center']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.ColKwargs.overflow","title":"<code>overflow: Literal['fold']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact-functions","title":"Functions","text":""},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.artifact_table","title":"<code>artifact_table(artifacts: Sequence[Artifact], **kwargs: Any) -&gt; Table</code>","text":"<p>Display one or more artifacts in a table.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def artifact_table(artifacts: Sequence[Artifact], **kwargs: Any) -&gt; Table:\n    \"\"\"Display one or more artifacts in a table.\"\"\"\n    table = get_table(\n        \"Artifact\",\n        artifacts,\n        columns=[\n            \"ID\",\n            \"Project ID\",\n            \"Repository ID\",\n            \"Tags\",\n            \"Digest\",\n            \"Created\",\n            \"Size\",\n        ],\n    )\n    for artifact in artifacts:\n        tags = []\n        if artifact.tags:\n            tags = [t.name for t in artifact.tags if t.name]\n        t = \", \".join(tags)\n        table.add_row(\n            int_str(artifact.id),\n            int_str(artifact.project_id),\n            int_str(artifact.repository_id),\n            str_str(t),\n            str_str(artifact.digest)[:15],\n            datetime_str(artifact.push_time),\n            bytesize_str(artifact.size or 0),\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.artifactinfo_table","title":"<code>artifactinfo_table(artifacts: Sequence[ArtifactInfo], **kwargs: Any) -&gt; Table</code>","text":"<p>Display one or more artifacts (ArtifactInfo) in a table.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def artifactinfo_table(artifacts: Sequence[ArtifactInfo], **kwargs: Any) -&gt; Table:\n    \"\"\"Display one or more artifacts (ArtifactInfo) in a table.\"\"\"\n    table = get_table(\n        \"Artifact\",\n        artifacts,\n        columns=[\n            \"Project\",\n            \"Repository\",\n            \"Tags\",\n            \"Digest\",\n            \"Arch\",\n            \"Severity\",\n            \"Created\",\n            \"Size\",\n        ],\n    )\n    for artifact in artifacts:\n        table.add_row(\n            str_str(artifact.project_name),\n            str_str(artifact.repository_name),\n            str_str(\", \".join(artifact.tags)),\n            str_str(artifact.artifact.digest)[:15],\n            str_str(get_artifact_architecture(artifact.artifact)),\n            str_str(get_artifact_severity(artifact.artifact)),\n            datetime_str(artifact.artifact.push_time),\n            bytesize_str(artifact.artifact.size or 0),\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.artifact_vulnerability_summary_table","title":"<code>artifact_vulnerability_summary_table(artifacts: Sequence[ArtifactVulnerabilitySummary], **kwargs: Any) -&gt; Table</code>","text":"Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def artifact_vulnerability_summary_table(\n    artifacts: Sequence[ArtifactVulnerabilitySummary], **kwargs: Any\n) -&gt; Table:\n    table = get_table(\n        \"Artifacts\",\n        columns=[\n            \"Artifact\",\n            \"Tags\",\n            \"Vulnerabilities\",\n        ],\n    )\n\n    full_digest = kwargs.pop(\"full_digest\", False)\n    for artifact in artifacts:\n        if not artifact.summary or not artifact.summary.summary:\n            warning(f\"No summary for artifact: {artifact.artifact!r}\")\n            continue\n        name = artifact.artifact if full_digest else artifact.artifact_short\n        vulns = vuln_summary_table(artifact.summary.summary, **kwargs)\n        table.add_row(\n            name,\n            \", \".join(artifact.tags),\n            vulns,\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.artifactinfo_panel","title":"<code>artifactinfo_panel(artifact: ArtifactInfo, **kwargs: Any) -&gt; Panel</code>","text":"<p>Display an artifact (ArtifactInfo) in a panel.</p> <p>The vulnerabilities of the artifact are shown separately from the artifact itself.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def artifactinfo_panel(artifact: ArtifactInfo, **kwargs: Any) -&gt; Panel:\n    \"\"\"Display an artifact (ArtifactInfo) in a panel.\n\n    The vulnerabilities of the artifact are shown separately from the artifact itself.\n    \"\"\"\n    tables: List[Table] = []\n\n    artifact_table = artifactinfo_table([artifact], **kwargs)\n    tables.append(artifact_table)\n\n    # Only include report if we have one\n    if artifact.report.vulnerabilities:\n        vuln_table = artifact_vulnerabilities_table([artifact.report], **kwargs)\n        tables.append(vuln_table)\n\n    panel = get_panel(tables, title=artifact.name_with_digest)\n\n    return panel\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.artifact_vulnerabilities_table","title":"<code>artifact_vulnerabilities_table(reports: Sequence[HarborVulnerabilityReport], **kwargs: Any) -&gt; Table</code>","text":"Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def artifact_vulnerabilities_table(\n    reports: Sequence[HarborVulnerabilityReport], **kwargs: Any\n) -&gt; Table:\n    table = get_table(\n        \"Vulnerabilities\",\n        show_lines=True,\n        columns=[\n            \"CVE ID\",\n            \"Severity\",\n            \"Score\",\n            \"Package\",\n            \"Version\",\n            \"Fix Version\",\n        ],\n    )\n    with_desc = kwargs.get(\"with_description\", False)\n    if with_desc:\n        add_column(table, \"Description\")\n\n    # TODO: add vulnerability sorting\n    for report in reports:\n        report.sort()  # critical -&gt; high -&gt; medium -&gt; low\n        vulns = report.vulnerabilities\n        for vulnerability in vulns:\n            row = [\n                str_str(vulnerability.id),\n                SeverityColor.as_markup(vulnerability.severity.value),\n                float_str(vulnerability.get_cvss_score()),\n                str_str(vulnerability.package),\n                str_str(vulnerability.version),\n                str_str(vulnerability.fix_version),\n            ]\n            if with_desc:\n                row.append(str_str(vulnerability.description))\n            table.add_row(*row)\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.vuln_summary_table","title":"<code>vuln_summary_table(summary: VulnerabilitySummary, **kwargs: Any) -&gt; Table</code>","text":"<p>A single line table in the form of nC nH nM nL nU (total) where each letter is a color coded severity level + count.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def vuln_summary_table(summary: VulnerabilitySummary, **kwargs: Any) -&gt; Table:\n    \"\"\"A single line table in the form of nC nH nM nL nU (total)\n    where each letter is a color coded severity level + count.\n    \"\"\"\n    table = Table(\n        show_lines=False, show_header=False, show_edge=False, box=box.SIMPLE_HEAD\n    )\n    # NOTE: column is truncated if category has &gt;9999 vulnerabilities, but that's unlikely\n    col_kwargs = ColKwargs(min_width=5, max_width=5, justify=\"right\", overflow=\"fold\")\n    table.add_column(\n        \"Critical\", style=f\"black on {SeverityColor.CRITICAL}\", **col_kwargs\n    )\n    table.add_column(\"High\", style=f\"black on {SeverityColor.HIGH}\", **col_kwargs)\n    table.add_column(\"Medium\", style=f\"black on {SeverityColor.MEDIUM}\", **col_kwargs)\n    table.add_column(\"Low\", style=f\"black on {SeverityColor.LOW}\", **col_kwargs)\n    # not adding unknown for now\n    # TODO: add kwargs toggle for unknown severity vulns\n    table.add_column(\n        \"Total\", overflow=\"fold\"\n    )  # no style, use default (respecting theme)\n\n    table.add_row(\n        f\"{summary.critical or 0}C\",\n        f\"{summary.high or 0}H\",\n        f\"{summary.medium or 0}M\",\n        f\"{summary.low or 0}L\",\n        f\"({int_str(summary.total)})\",\n    )  # might include unknown?\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.buildhistoryentry_table","title":"<code>buildhistoryentry_table(history: Sequence[BuildHistoryEntry], **kwargs: Any) -&gt; Table</code>","text":"<p>Display one or more build history entries in a table. Omits the \"author\" and \"empty_layer\" fields.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def buildhistoryentry_table(\n    history: Sequence[BuildHistoryEntry], **kwargs: Any\n) -&gt; Table:\n    \"\"\"Display one or more build history entries in a table.\n    Omits the \"author\" and \"empty_layer\" fields.\n    \"\"\"\n    title = _title_for_artifact(\"Build History\", kwargs)\n    table = get_table(title, columns=[\"Created\", \"Command\"])\n    for entry in history:\n        table.add_row(\n            datetime_str(entry.created),\n            str_str(DOUBLE_SPACE_PATTERN.sub(\" \", entry.created_by)),\n        )\n        table.add_section()\n    return table\n</code></pre>"},{"location":"reference/output/table/artifact/#harbor_cli.output.table.artifact.tags_table","title":"<code>tags_table(tags: Sequence[Tag], **kwargs: Any) -&gt; Table</code>","text":"<p>Display one or more tags in a table.</p> Source code in <code>harbor_cli/output/table/artifact.py</code> <pre><code>def tags_table(tags: Sequence[Tag], **kwargs: Any) -&gt; Table:\n    \"\"\"Display one or more tags in a table.\"\"\"\n    title = _title_for_artifact(\"Tags\", kwargs)\n    table = get_table(title, columns=[\"Name\", \"ID\", \"Created\", \"Immutable\"])\n    for tag in tags:\n        table.add_row(\n            str_str(tag.name),\n            int_str(tag.id),\n            datetime_str(tag.push_time),\n            bool_str(tag.immutable),\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/repository/","title":"Repository","text":""},{"location":"reference/output/table/repository/#harbor_cli.output.table.repository","title":"<code>harbor_cli.output.table.repository</code>","text":""},{"location":"reference/output/table/repository/#harbor_cli.output.table.repository-functions","title":"Functions","text":""},{"location":"reference/output/table/repository/#harbor_cli.output.table.repository.repository_table","title":"<code>repository_table(r: Sequence[Repository], **kwargs: Any) -&gt; Table</code>","text":"<p>Display one or more repositories in a table.</p> Source code in <code>harbor_cli/output/table/repository.py</code> <pre><code>def repository_table(r: Sequence[Repository], **kwargs: Any) -&gt; Table:\n    \"\"\"Display one or more repositories in a table.\"\"\"\n    table = get_table(\n        \"Repository\",\n        r,\n        columns=[\n            \"Project\",\n            \"Name\",\n            \"Artifacts\",\n            \"Created\",\n            \"Updated\",\n        ],\n    )\n    for repo in r:\n        table.add_row(\n            repo.project_name,\n            repo.name,\n            str(repo.artifact_count),\n            datetime_str(repo.creation_time),\n            datetime_str(repo.update_time),\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/system/","title":"System","text":""},{"location":"reference/output/table/system/#harbor_cli.output.table.system","title":"<code>harbor_cli.output.table.system</code>","text":""},{"location":"reference/output/table/system/#harbor_cli.output.table.system-attributes","title":"Attributes","text":""},{"location":"reference/output/table/system/#harbor_cli.output.table.system-classes","title":"Classes","text":""},{"location":"reference/output/table/system/#harbor_cli.output.table.system-functions","title":"Functions","text":""},{"location":"reference/output/table/system/#harbor_cli.output.table.system.systeminfo_table","title":"<code>systeminfo_table(systeminfo: Sequence[SystemInfo], **kwargs: Any) -&gt; Table</code>","text":"<p>Display system info in a table.</p> Source code in <code>harbor_cli/output/table/system.py</code> <pre><code>def systeminfo_table(systeminfo: Sequence[SystemInfo], **kwargs: Any) -&gt; Table:\n    \"\"\"Display system info in a table.\"\"\"\n    if len(systeminfo) != 1:\n        # should never happen\n        logger.warning(\"Can only display one system info at a time.\")\n    info = systeminfo[0]\n\n    table = get_table(\n        \"System Info\",\n        pluralize=False,\n        columns=[\"Total Capacity\", \"Free Space\", \"Used Space\"],\n    )\n\n    # Add empty row if no storage\n    if not info.storage:\n        info.storage = [Storage(total=0, free=0)]\n\n    # One volume per row\n    for storage in info.storage:\n        # Values are Optional[int]!\n        # We could end up with negative used value if total is missing\n        # but free is present. Not our problem.\n        total = storage.total or 0\n        free = storage.free or 0\n        used = total - free\n        table.add_row(\n            bytesize_str(total),\n            bytesize_str(free),\n            bytesize_str(used),\n        )\n    return table\n</code></pre>"},{"location":"reference/output/table/system/#harbor_cli.output.table.system.overallhealthstatus_panel","title":"<code>overallhealthstatus_panel(health: OverallHealthStatus, **kwargs: Any) -&gt; Panel</code>","text":"Source code in <code>harbor_cli/output/table/system.py</code> <pre><code>def overallhealthstatus_panel(health: OverallHealthStatus, **kwargs: Any) -&gt; Panel:\n    # Show overall health status at the top\n    status_color = HealthColor.from_health(health.status)\n    status = f\"[{status_color}]{health.status}[/]\"\n    status_table = Table.grid()\n    status_table.add_row(\"Status: \", status)\n\n    # Individual component statuses in a table\n    table = get_table(\n        \"Components\",\n        columns=[\n            \"Component\",\n            \"Status\",\n            \"Error\",\n        ],\n    )\n    health.components = health.components or []\n    for component in health.components:\n        status_style = \"green\" if component.status == \"healthy\" else \"red\"\n        table.add_row(\n            str_str(component.name),\n            f\"[{status_style}]{str_str(component.status)}[/]\",\n            str_str(component.error),\n        )\n\n    return get_panel([status_table, table], title=\"System Health\")\n</code></pre>"},{"location":"reference/output/table/system/#harbor_cli.output.table.system.generalinfo_panel","title":"<code>generalinfo_panel(info: GeneralInfo, **kwargs: Any) -&gt; Panel</code>","text":"<p>Displays panel for <code>system info</code> command.</p> Source code in <code>harbor_cli/output/table/system.py</code> <pre><code>def generalinfo_panel(info: GeneralInfo, **kwargs: Any) -&gt; Panel:\n    \"\"\"Displays panel for `system info` command.\"\"\"\n    # Split up system info into multiple tables (categories)\n    tables: List[Table] = []\n\n    # General\n    general_table = get_table(\n        \"General\",\n        columns=[\n            \"Registry URL\",\n            \"External URL\",\n            \"Harbor Version\",\n            \"Registry Storage Provider\",\n            \"Read Only\",\n        ],\n    )\n    general_table.add_row(\n        str_str(info.registry_url),\n        str_str(info.external_url),\n        str_str(info.harbor_version),\n        str_str(info.registry_storage_provider_name),\n        bool_str(info.read_only),\n    )\n    tables.append(general_table)\n\n    # Authentication\n    auth_table = get_table(\n        \"Authentication\",\n        columns=[\n            \"Mode\",\n            \"Primary Auth Mode\",\n            \"Project Creation Restriction\",\n            \"Self Registration\",\n            \"Has CA Root\",\n        ],\n    )\n    auth_table.add_row(\n        str_str(info.auth_mode),\n        bool_str(info.primary_auth_mode),\n        str_str(info.project_creation_restriction),\n        bool_str(info.self_registration),\n        bool_str(info.has_ca_root),\n    )\n    tables.append(auth_table)\n\n    # Add auth proxy settings table if present\n    if info.authproxy_settings:\n        tables.append(authproxysetting_table(info.authproxy_settings), **kwargs)\n\n    # Model is called \"GeneralInfo\", but it's for system info\n    return get_panel(tables, title=\"System Info\")\n</code></pre>"},{"location":"reference/output/table/system/#harbor_cli.output.table.system.authproxysetting_table","title":"<code>authproxysetting_table(auth: AuthproxySetting, **kwargs: Any) -&gt; Table</code>","text":"Source code in <code>harbor_cli/output/table/system.py</code> <pre><code>def authproxysetting_table(auth: AuthproxySetting, **kwargs: Any) -&gt; Table:\n    table = get_table(\n        \"Auth Proxy Settings\",\n        columns=[\n            \"Endpoint\",\n            \"Token Review Endpoint\",\n            \"Skip Search\",\n            \"Verify Cert\",\n            \"Server Certificate\",\n        ],\n    )\n    table.add_row(\n        str_str(auth.endpoint),\n        str_str(\n            auth.tokenreivew_endpoint\n        ),  # TODO: fix spelling when harborapi is fixed\n        bool_str(auth.skip_search),\n        bool_str(auth.verify_cert),\n        str_str(auth.server_certificate),\n    )\n    return table\n</code></pre>"},{"location":"reference/output/table/system/#harbor_cli.output.table.system.statistic_table","title":"<code>statistic_table(stats: Statistic, **kwargs: Any) -&gt; Table</code>","text":"<p>Displays table for <code>system statistics</code> command.</p> Source code in <code>harbor_cli/output/table/system.py</code> <pre><code>def statistic_table(stats: Statistic, **kwargs: Any) -&gt; Table:\n    \"\"\"Displays table for `system statistics` command.\"\"\"\n    table = get_table(\n        \"Statistics\",\n        columns=[\n            \"Projects\",\n            \"Repos\",\n            \"Storage\",\n        ],\n    )\n\n    # Wrap this field in a table for consistent presentation\n    storage_table = get_table(columns=[\"Used\"], box=box.SQUARE)\n    storage_table.add_row(bytesize_str(stats.total_storage_consumption))\n\n    table.add_row(\n        _pubprivtotal_table(\n            stats.public_project_count,\n            stats.private_project_count,\n            stats.total_project_count,\n        ),\n        _pubprivtotal_table(\n            stats.public_repo_count, stats.private_repo_count, stats.total_repo_count\n        ),\n        storage_table,\n    )\n    return table\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":"<ul> <li>harbor_cli.utils.args</li> <li>harbor_cli.utils.commands</li> <li>harbor_cli.utils.utils</li> </ul>"},{"location":"reference/utils/#harbor_cli.utils","title":"<code>harbor_cli.utils</code>","text":""},{"location":"reference/utils/#harbor_cli.utils-attributes","title":"Attributes","text":""},{"location":"reference/utils/#harbor_cli.utils.BaseModelType","title":"<code>BaseModelType = TypeVar('BaseModelType', bound=BaseModel)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.PREFIX_ID","title":"<code>PREFIX_ID = 'id:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_QUERY","title":"<code>OPTION_QUERY = typer.Option(None, '--query', help='Query parameters to filter the results.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_SORT","title":"<code>OPTION_SORT = typer.Option(None, '--sort', help=\"Sorting order of the results. Example: [green]'name,-id'[/] to sort by name ascending and id descending.\")</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_PAGE_SIZE","title":"<code>OPTION_PAGE_SIZE = typer.Option(10, '--page-size', help='(Advanced) Results to fetch per API call.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_PAGE","title":"<code>OPTION_PAGE = typer.Option(1, '--page', help='(Advanced) Page to begin fetching from.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_LIMIT","title":"<code>OPTION_LIMIT = typer.Option(None, '--limit', help='Maximum number of results to fetch.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_PROJECT_NAME_OR_ID","title":"<code>OPTION_PROJECT_NAME_OR_ID = typer.Option(None, '--project', help=f'Project name or ID. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.OPTION_FORCE","title":"<code>OPTION_FORCE = typer.Option(False, '--force', help='Force deletion without confirmation.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_PROJECT_NAME","title":"<code>ARG_PROJECT_NAME = typer.Argument(None, help='Name of the project to use.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_PROJECT_NAME_OR_ID","title":"<code>ARG_PROJECT_NAME_OR_ID = _arg_project_name_or_id()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_PROJECT_NAME_OR_ID_OPTIONAL","title":"<code>ARG_PROJECT_NAME_OR_ID_OPTIONAL = _arg_project_name_or_id(None)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_REPO_NAME","title":"<code>ARG_REPO_NAME = typer.Argument(help='Name of the repository to use.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_USERNAME_OR_ID","title":"<code>ARG_USERNAME_OR_ID = typer.Argument(help=f'Username or ID of the user to use. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.ARG_LDAP_GROUP_DN_OR_ID","title":"<code>ARG_LDAP_GROUP_DN_OR_ID = typer.Argument(help=f'LDAP Group DN or ID of the group to use. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.MutableMappingType","title":"<code>MutableMappingType = TypeVar('MutableMappingType', bound=MutableMapping[Any, Any])</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils-classes","title":"Classes","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary","title":"<code>CommandSummary</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Convenience class for accessing information about a command.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>class CommandSummary(BaseModel):\n    \"\"\"Convenience class for accessing information about a command.\"\"\"\n\n    category: Optional[str] = None  # not part of TyperCommand\n    deprecated: bool\n    epilog: Optional[str]\n    help: str\n    hidden: bool\n    name: str\n    options_metavar: str\n    params: List[ParamSummary] = []\n    score: int = 0  # match score (not part of TyperCommand)\n    short_help: Optional[str]\n\n    @classmethod\n    def from_command(\n        cls, command: TyperCommand, name: str | None = None, category: str | None = None\n    ) -&gt; CommandSummary:\n        \"\"\"Construct a new CommandSummary from a TyperCommand.\"\"\"\n        return cls(\n            category=category,\n            deprecated=command.deprecated,\n            epilog=command.epilog or \"\",\n            help=command.help or \"\",\n            hidden=command.hidden,\n            name=name or command.name or \"\",\n            options_metavar=command.options_metavar or \"\",\n            params=[ParamSummary.from_param(p) for p in command.params],\n            short_help=command.short_help or \"\",\n        )\n\n    @property\n    def help_plain(self) -&gt; str:\n        return markup_as_plain_text(self.help)\n\n    @property\n    def help_md(self) -&gt; str:\n        return markup_to_markdown(self.help)\n\n    @property\n    def usage(self) -&gt; str:\n        parts = [self.name]\n\n        # Assume arg list is sorted by required/optional\n        # `&lt;POSITIONAL_ARG1&gt; &lt;POSITIONAL_ARG2&gt; [OPTIONAL_ARG1] [OPTIONAL_ARG2]`\n        for arg in self.arguments:\n            metavar = arg.metavar or arg.human_readable_name\n            parts.append(metavar)\n\n        # Command with both required and optional options:\n        # `--option1 &lt;opt1&gt; --option2 &lt;opt2&gt; [OPTIONS]`\n        has_optional = False\n        for option in self.options:\n            if option.required:\n                metavar = option.metavar or option.human_readable_name\n                if option.opts:\n                    s = f\"{max(option.opts)} {metavar}\"\n                else:\n                    # this shouldn't happen, but just in case. A required\n                    # option without any opts is not very useful.\n                    # NOTE: could raise exception here instead\n                    s = metavar\n                parts.append(s)\n            else:\n                has_optional = True\n        if has_optional:\n            parts.append(\"[OPTIONS]\")\n\n        return \" \".join(parts)\n\n    @property\n    def options(self) -&gt; List[ParamSummary]:\n        return [p for p in self.params if not p.is_argument]\n\n    @property\n    def arguments(self) -&gt; List[ParamSummary]:\n        return [p for p in self.params if p.is_argument]\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.CommandSummary-attributes","title":"Attributes","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.category","title":"<code>category: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.deprecated","title":"<code>deprecated: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.epilog","title":"<code>epilog: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.help","title":"<code>help: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.hidden","title":"<code>hidden: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.options_metavar","title":"<code>options_metavar: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.params","title":"<code>params: List[ParamSummary] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.score","title":"<code>score: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.short_help","title":"<code>short_help: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.help_plain","title":"<code>help_plain: str</code>  <code>property</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.help_md","title":"<code>help_md: str</code>  <code>property</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.usage","title":"<code>usage: str</code>  <code>property</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.options","title":"<code>options: List[ParamSummary]</code>  <code>property</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.arguments","title":"<code>arguments: List[ParamSummary]</code>  <code>property</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary-functions","title":"Functions","text":""},{"location":"reference/utils/#harbor_cli.utils.CommandSummary.from_command","title":"<code>from_command(command: TyperCommand, name: str | None = None, category: str | None = None) -&gt; CommandSummary</code>  <code>classmethod</code>","text":"<p>Construct a new CommandSummary from a TyperCommand.</p> Source code in <code>harbor_cli/models.py</code> <pre><code>@classmethod\ndef from_command(\n    cls, command: TyperCommand, name: str | None = None, category: str | None = None\n) -&gt; CommandSummary:\n    \"\"\"Construct a new CommandSummary from a TyperCommand.\"\"\"\n    return cls(\n        category=category,\n        deprecated=command.deprecated,\n        epilog=command.epilog or \"\",\n        help=command.help or \"\",\n        hidden=command.hidden,\n        name=name or command.name or \"\",\n        options_metavar=command.options_metavar or \"\",\n        params=[ParamSummary.from_param(p) for p in command.params],\n        short_help=command.short_help or \"\",\n    )\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.PackageVersion","title":"<code>PackageVersion</code>","text":"<p>               Bases: <code>NamedTuple</code></p> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>class PackageVersion(NamedTuple):\n    package: str\n    min_version: Optional[str] = None\n    max_version: Optional[str] = None\n    not_version: Optional[str] = None  # NYI\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.PackageVersion-attributes","title":"Attributes","text":""},{"location":"reference/utils/#harbor_cli.utils.PackageVersion.package","title":"<code>package: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.PackageVersion.min_version","title":"<code>min_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.PackageVersion.max_version","title":"<code>max_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils.PackageVersion.not_version","title":"<code>not_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/#harbor_cli.utils-functions","title":"Functions","text":""},{"location":"reference/utils/#harbor_cli.utils.is_builtin_obj","title":"<code>is_builtin_obj(obj: object) -&gt; bool</code>","text":"Source code in <code>harbor_cli/utils/_types.py</code> <pre><code>def is_builtin_obj(obj: object) -&gt; bool:\n    return obj.__class__.__module__ == \"builtins\"\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.exit_err","title":"<code>exit_err(message: str, code: int = 1, **kwargs: Any) -&gt; NoReturn</code>","text":"<p>Logs a message with ERROR level and exits with the given code (default: 1).</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to print.</p> required <code>code</code> <code>int</code> <p>Exit code, by default 1</p> <code>1</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the extra dict.</p> <code>{}</code> Source code in <code>harbor_cli/output/console.py</code> <pre><code>def exit_err(message: str, code: int = 1, **kwargs: Any) -&gt; NoReturn:\n    \"\"\"Logs a message with ERROR level and exits with the given\n    code (default: 1).\n\n    Parameters\n    ----------\n    message : str\n        Message to print.\n    code : int, optional\n        Exit code, by default 1\n    **kwargs\n        Additional keyword arguments to pass to the extra dict.\n    \"\"\"\n    error(message, **kwargs)\n    raise SystemExit(code)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.model_params_from_ctx","title":"<code>model_params_from_ctx(ctx: typer.Context, model: Type[BaseModel], filter_none: bool = True) -&gt; dict[str, Any]</code>","text":"<p>Get CLI options from a Typer context that correspond with Pydantic model field names.</p> <p>Given a command where the function parameter names match the model field names, the function returns a dict of the parameters that are valid for the model.</p> <p>If <code>filter_none</code> is True, then parameters that are None will be filtered out. This is enabled by default, since most Harbor API model fields are optional, and we want to signal to Pydantic that these fields should be treated as unset rather than set to None.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; class Foo(BaseModel):\n...     foo: str\n...     bar: str\n&gt;&gt;&gt; foo = Foo(foo=\"foo\", bar=\"bar\")\n&gt;&gt;&gt; ctx = typer.Context(...) # some-cmd --bar grok --baz quux\n&gt;&gt;&gt; model_params_from_ctx(ctx, Foo)\n{\"bar\": \"grok\"} # baz is not a valid field for Foo\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Typer context.</p> required <code>model</code> <code>Type[BaseModel]</code> <p>The model to get the parameters for.</p> required <code>filter_none</code> <code>bool</code> <p>Whether to filter out None values, by default True</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The model parameters.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def model_params_from_ctx(\n    ctx: typer.Context, model: Type[BaseModel], filter_none: bool = True\n) -&gt; dict[str, Any]:\n    \"\"\"Get CLI options from a Typer context that correspond with Pydantic\n    model field names.\n\n    Given a command where the function parameter names match the\n    model field names, the function returns a dict of the parameters\n    that are valid for the model.\n\n    If `filter_none` is True, then parameters that are None will be filtered out.\n    This is enabled by default, since most Harbor API model fields are optional,\n    and we want to signal to Pydantic that these fields should be treated\n    as *unset* rather than *set to None*.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pydantic import BaseModel\n    &gt;&gt;&gt; class Foo(BaseModel):\n    ...     foo: str\n    ...     bar: str\n    &gt;&gt;&gt; foo = Foo(foo=\"foo\", bar=\"bar\")\n    &gt;&gt;&gt; ctx = typer.Context(...) # some-cmd --bar grok --baz quux\n    &gt;&gt;&gt; model_params_from_ctx(ctx, Foo)\n    {\"bar\": \"grok\"} # baz is not a valid field for Foo\n\n\n    Parameters\n    ----------\n    ctx : typer.Context\n        The Typer context.\n    model : Type[BaseModel]\n        The model to get the parameters for.\n    filter_none : bool\n        Whether to filter out None values, by default True\n\n    Returns\n    -------\n    dict[str, Any]\n        The model parameters.\n    \"\"\"\n    return {\n        key: value\n        for key, value in ctx.params.items()\n        if key in model.model_fields and (not filter_none or value is not None)\n    }\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.create_updated_model","title":"<code>create_updated_model(existing: BaseModel, new: Type[BaseModelType], ctx: typer.Context, extra: bool = False, empty_ok: bool = False) -&gt; BaseModelType</code>","text":"<p>Given an existing model instance and another model type, instantiate other model based on the fields of the existing model combined with CLI args passed in by the user.</p> <p>When we call a PUT enpdoint, the API expects the full model definition, but we want to allow the user to only specify the fields they want to update. This function allows us to do that, by taking an existing model fetched via a GET call and updating it with new values from the Typer context.</p> <p>To further complicate things, Harbor API generally uses a different model definition for updating resources (PUT) than the one fetched from a GET call. For example, fetching information about a project returns a Project object, while updating a project requires a ProjectUpdateReq object.</p> <p>These models largely contain the same fields, but might have certain deviations. For example, the Project model has a <code>creation_time</code> field, while the ProjectUpdateReq model does not.</p> <p>This function allows us to create, for example, a ProjectUpdateReq object from a combination of a Project object and CLI args that correspond with the fields of the ProjectUpdateReq model.</p> <p>See model_params_from_ctx for more information on how the CLI context is used to provide the updated fields for the new model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; class Foo(BaseModel):\n...     a: Optional[int]\n...     b: Optional[str]\n...     c: Optional[bool]\n&gt;&gt;&gt; class FooUpdateReq(BaseModel):\n...     a: Optional[int]\n...     b: Optional[str]\n...     c: Optional[bool]\n...     d: bool = False\n&gt;&gt;&gt; foo = Foo(a=1, b=\"foo\", c=True)\n&gt;&gt;&gt; # we get a ctx object from a Typer command\n&gt;&gt;&gt; ctx = typer.Context(...) # update-foo --a 2 --b bar\n&gt;&gt;&gt; foo_update = create_updated_model(foo, FooUpdateReq, ctx)\n&gt;&gt;&gt; foo_update\nFooUpdateReq(a=2, b='bar', c=True, d=False)\n&gt;&gt;&gt; #        ^^^  ^^^^^^^\n&gt;&gt;&gt; # We created a FooUpdateReq with the new values from the context\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>existing</code> <code>BaseModel</code> <p>The existing model to use as a base.</p> required <code>new</code> <code>Type[BaseModelType]</code> <p>The new model type to construct.</p> required <code>ctx</code> <code>Context</code> <p>The Typer context to get the updated model parameters from.</p> required <code>extra</code> <code>bool</code> <p>Whether to include extra fields set on the existing model.</p> <code>False</code> <code>empty_ok</code> <code>bool</code> <p>Whether to allow the update to be empty. If False, an error will be raised if no parameters are provided to update.</p> <code>False</code> <p>Returns:</p> Type Description <code>BaseModelType</code> <p>The updated model.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def create_updated_model(\n    existing: BaseModel,\n    new: Type[BaseModelType],\n    ctx: typer.Context,\n    extra: bool = False,\n    empty_ok: bool = False,\n) -&gt; BaseModelType:\n    \"\"\"Given an existing model instance and another model type, instantiate\n    other model based on the fields of the existing model combined with CLI args\n    passed in by the user.\n\n    When we call a PUT enpdoint, the API expects the full model definition,\n    but we want to allow the user to only specify the fields they want to update.\n    This function allows us to do that, by taking an existing model fetched via\n    a GET call and updating it with new values from the Typer context.\n\n    To further complicate things, Harbor API generally uses a different model\n    definition for updating resources (PUT) than the one fetched from a GET call.\n    For example, fetching information about a project returns a Project object,\n    while updating a project requires a ProjectUpdateReq object.\n\n    These models largely contain the same fields, but might have certain deviations.\n    For example, the Project model has a `creation_time` field, while the\n    ProjectUpdateReq model does not.\n\n    This function allows us to create, for example, a ProjectUpdateReq object\n    from a combination of a Project object and CLI args that correspond with\n    the fields of the ProjectUpdateReq model.\n\n    See [model_params_from_ctx][harbor_cli.utils.args.model_params_from_ctx]\n    for more information on how the CLI context is used to provide the updated\n    fields for the new model.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pydantic import BaseModel\n    &gt;&gt;&gt; class Foo(BaseModel):\n    ...     a: Optional[int]\n    ...     b: Optional[str]\n    ...     c: Optional[bool]\n    &gt;&gt;&gt; class FooUpdateReq(BaseModel):\n    ...     a: Optional[int]\n    ...     b: Optional[str]\n    ...     c: Optional[bool]\n    ...     d: bool = False\n    &gt;&gt;&gt; foo = Foo(a=1, b=\"foo\", c=True)\n    &gt;&gt;&gt; # we get a ctx object from a Typer command\n    &gt;&gt;&gt; ctx = typer.Context(...) # update-foo --a 2 --b bar\n    &gt;&gt;&gt; foo_update = create_updated_model(foo, FooUpdateReq, ctx)\n    &gt;&gt;&gt; foo_update\n    FooUpdateReq(a=2, b='bar', c=True, d=False)\n    &gt;&gt;&gt; #        ^^^  ^^^^^^^\n    &gt;&gt;&gt; # We created a FooUpdateReq with the new values from the context\n\n    Parameters\n    ----------\n    existing : BaseModel\n        The existing model to use as a base.\n    new : Type[BaseModelType]\n        The new model type to construct.\n    ctx : typer.Context\n        The Typer context to get the updated model parameters from.\n    extra : bool\n        Whether to include extra fields set on the existing model.\n    empty_ok: bool\n        Whether to allow the update to be empty. If False, an error will be raised\n        if no parameters are provided to update.\n\n    Returns\n    -------\n    BaseModelType\n        The updated model.\n    \"\"\"\n    # Make sure ctx contains values we can update model with\n    params = model_params_from_ctx(ctx, new)\n    if not params and not empty_ok:\n        exit_err(\"No parameters provided to update\")\n\n    # Cast existing model to dict, update it with the new values\n    d = existing.model_dump(include=None if extra else set(new.model_fields))\n    d.update(params)\n    return new.model_validate(d)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.parse_commalist","title":"<code>parse_commalist(arg: Optional[List[str]]) -&gt; List[str]</code>","text":"<p>Parses an optional argument that can be specified multiple times, or as a comma-separated string, into a list of strings.</p> <p><code>harbor subcmd --arg foo --arg bar,baz</code> will be parsed as: <code>[\"foo\", \"bar\", \"baz\"]</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_commalist([\"foo\", \"bar,baz\"])\n[\"foo\", \"bar\", \"baz\"]\n&gt;&gt;&gt; parse_commalist([])\n[]\n&gt;&gt;&gt; parse_commalist(None)\n[]\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_commalist(arg: Optional[List[str]]) -&gt; List[str]:\n    \"\"\"Parses an optional argument that can be specified multiple times,\n    or as a comma-separated string, into a list of strings.\n\n    `harbor subcmd --arg foo --arg bar,baz`\n    will be parsed as: `[\"foo\", \"bar\", \"baz\"]`\n\n    Examples\n    --------\n    ```py\n    &gt;&gt;&gt; parse_commalist([\"foo\", \"bar,baz\"])\n    [\"foo\", \"bar\", \"baz\"]\n    &gt;&gt;&gt; parse_commalist([])\n    []\n    &gt;&gt;&gt; parse_commalist(None)\n    []\n    ```\n    \"\"\"\n    if arg is None:\n        return []\n    return [item for arg_list in arg for item in arg_list.split(\",\")]\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.parse_commalist_int","title":"<code>parse_commalist_int(arg: Optional[List[str]]) -&gt; List[int]</code>","text":"<p>Parses a comma-separated list and converts the values to integers.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_commalist_int(arg: Optional[List[str]]) -&gt; List[int]:\n    \"\"\"Parses a comma-separated list and converts the values to integers.\"\"\"\n    int_list: List[int] = []\n    for item in parse_commalist(arg):\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            raise ValueError(f\"Invalid integer value: {item!r}\")\n    return int_list\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.parse_key_value_args","title":"<code>parse_key_value_args(arg: list[str]) -&gt; dict[str, str]</code>","text":"<p>Parses a list of key=value arguments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_key_value_args([\"foo=bar\", \"baz=qux\"])\n{'foo': 'bar', 'baz': 'qux'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>list[str]</code> <p>A list of key=value arguments.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A dictionary mapping keys to values.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_key_value_args(arg: list[str]) -&gt; dict[str, str]:\n    \"\"\"Parses a list of key=value arguments.\n\n    Examples\n    --------\n    &gt;&gt;&gt; parse_key_value_args([\"foo=bar\", \"baz=qux\"])\n    {'foo': 'bar', 'baz': 'qux'}\n\n    Parameters\n    ----------\n    arg\n        A list of key=value arguments.\n\n    Returns\n    -------\n    dict[str, str]\n        A dictionary mapping keys to values.\n    \"\"\"\n    metadata: Dict[str, str] = {}\n    for item in arg:\n        try:\n            key, value = item.split(\"=\", maxsplit=1)\n        except ValueError:\n            raise typer.BadParameter(\n                f\"Invalid metadata item {item!r}. Expected format: key=value\"\n            )\n        metadata[key] = value\n    return metadata\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.as_query","title":"<code>as_query(**kwargs: Any) -&gt; str</code>","text":"<p>Converts keyword arguments into a query string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; as_query(foo=\"bar\", baz=\"qux\")\n'foo=bar,baz=qux'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def as_query(**kwargs: Any) -&gt; str:\n    \"\"\"Converts keyword arguments into a query string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; as_query(foo=\"bar\", baz=\"qux\")\n    'foo=bar,baz=qux'\n    \"\"\"\n    return \",\".join(f\"{k}={v}\" for k, v in kwargs.items())\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.construct_query_list","title":"<code>construct_query_list(*values: Any, union: bool = True, allow_empty: bool = False, comma: bool = False) -&gt; str</code>","text":"<p>Given a key and a list of values, returns a harbor API query string with values as a list with union or intersection relationship (default: union).</p> <p>Falsey values are ignored if allow_empty is False (default).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=True)\n'{foo bar baz}'\n&gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=False)\n'(foo bar baz)'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\")\n'{bar baz}'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", allow_empty=True)\n'{ bar baz}'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", comma=True)\n'{bar,baz}'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def construct_query_list(\n    *values: Any,\n    union: bool = True,\n    allow_empty: bool = False,\n    comma: bool = False,\n) -&gt; str:\n    \"\"\"Given a key and a list of values, returns a harbor API\n    query string with values as a list with union or intersection\n    relationship (default: union).\n\n    Falsey values are ignored if allow_empty is False (default).\n\n    Examples\n    --------\n    &gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=True)\n    '{foo bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=False)\n    '(foo bar baz)'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\")\n    '{bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", allow_empty=True)\n    '{ bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", comma=True)\n    '{bar,baz}'\n    \"\"\"\n    if len(values) &lt; 2:\n        return str(values[0] if values else \"\")\n    start = \"{\" if union else \"(\"\n    end = \"}\" if union else \")\"\n    sep = \",\" if comma else \" \"\n    return f\"{start}{sep.join(str(v) for v in values if v or allow_empty)}{end}\"\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.deconstruct_query_list","title":"<code>deconstruct_query_list(qlist: str) -&gt; list[str]</code>","text":"<p>Given a harbor API query string with values as a list (either union and intersection), returns a list of values. Will break if values contain spaces.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; deconstruct_query_list(\"{foo bar baz}\")\n['foo', 'bar', 'baz']\n&gt;&gt;&gt; deconstruct_query_list(\"(foo bar baz)\")\n['foo', 'bar', 'baz']\n&gt;&gt;&gt; deconstruct_query_list(\"{}\")\n[]\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def deconstruct_query_list(qlist: str) -&gt; list[str]:\n    \"\"\"Given a harbor API query string with values as a list (either union\n    and intersection), returns a list of values. Will break if values\n    contain spaces.\n\n    Examples\n    --------\n    &gt;&gt;&gt; deconstruct_query_list(\"{foo bar baz}\")\n    ['foo', 'bar', 'baz']\n    &gt;&gt;&gt; deconstruct_query_list(\"(foo bar baz)\")\n    ['foo', 'bar', 'baz']\n    &gt;&gt;&gt; deconstruct_query_list(\"{}\")\n    []\n    \"\"\"\n    # TODO: add comma support\n    values = qlist.strip(\"{}()\").split(\" \")\n    return [v for v in values if v]\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.add_to_query","title":"<code>add_to_query(query: str | None, **kwargs: str | list[str] | None) -&gt; str</code>","text":"<p>Given a query string and a set of keyword arguments, returns a new query string with the keyword arguments added to it. Keyword arguments that are already present in the query string will be overwritten.</p> <p>Always returns a string, even if the resulting query string is empty.</p> <p>TODO: allow fuzzy matching, e.g. foo=~bar</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add_to_query(\"foo=bar\", baz=\"qux\")\n'foo=bar,baz=qux'\n&gt;&gt;&gt; add_to_query(\"foo=bar\", foo=\"baz\")\n'foo=baz'\n&gt;&gt;&gt; add_to_query(None, foo=\"baz\")\n'foo=baz'\n&gt;&gt;&gt; add_to_query(\"foo=foo\", foo=\"bar\")\n'foo={foo bar}'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def add_to_query(query: str | None, **kwargs: str | list[str] | None) -&gt; str:\n    \"\"\"Given a query string and a set of keyword arguments, returns a\n    new query string with the keyword arguments added to it. Keyword\n    arguments that are already present in the query string will be\n    overwritten.\n\n    Always returns a string, even if the resulting query string is empty.\n\n    TODO: allow fuzzy matching, e.g. foo=~bar\n\n    Examples\n    --------\n    &gt;&gt;&gt; add_to_query(\"foo=bar\", baz=\"qux\")\n    'foo=bar,baz=qux'\n    &gt;&gt;&gt; add_to_query(\"foo=bar\", foo=\"baz\")\n    'foo=baz'\n    &gt;&gt;&gt; add_to_query(None, foo=\"baz\")\n    'foo=baz'\n    &gt;&gt;&gt; add_to_query(\"foo=foo\", foo=\"bar\")\n    'foo={foo bar}'\n    \"\"\"\n    query_items = parse_commalist([query] if query else [])\n    query_dict = parse_key_value_args(query_items)\n    for k, v in kwargs.items():\n        # Empty string, empty list, None, etc. are all ignored\n        if not v:\n            continue\n\n        # Remove empty list or otherwise absent value for key if exists\n        query_val = query_dict.get(k, None)\n        if query_val is not None and any(query_val.startswith(c) for c in [\"{\", \"(\"]):\n            # Query dict contains empty list (invalid), so we just remove it\n            # TODO: respect union/intersection list type\n            del query_dict[k]\n\n        # When the query already has a value for the given key, we need to\n        # convert the value to a list if isn't already one.\n        if k in query_dict:\n            if isinstance(v, list):\n                query_dict[k] = construct_query_list(query_dict[k], *v)\n            else:\n                query_dict[k] = construct_query_list(\n                    *deconstruct_query_list(query_dict[k]),\n                    v,\n                )\n        else:  # doesn't exist in query\n            if isinstance(v, str):\n                query_dict[k] = v\n            elif len(v) &gt; 1:\n                query_dict[k] = construct_query_list(*v)\n            else:\n                query_dict[k] = v[0]\n    return as_query(**query_dict)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_project_arg","title":"<code>get_project_arg(project_name_or_id: str) -&gt; str | int</code>","text":"<p>Given a project name or ID argument (prefixed with 'id:'), return a project name (str) or project ID (int).</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_project_arg(project_name_or_id: str) -&gt; str | int:\n    \"\"\"Given a project name or ID argument (prefixed with 'id:'),\n    return a project name (str) or project ID (int).\n    \"\"\"\n    return _get_id_name_arg(\"project\", project_name_or_id)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_user_arg","title":"<code>get_user_arg(username_or_id: str) -&gt; str | int</code>","text":"<p>Given a username or ID argument (prefixed with 'id:'), return a username (str) or user ID (int).</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_user_arg(username_or_id: str) -&gt; str | int:\n    \"\"\"Given a username or ID argument (prefixed with 'id:'),\n    return a username (str) or user ID (int).\n    \"\"\"\n    return _get_id_name_arg(\"user\", username_or_id)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_ldap_group_arg","title":"<code>get_ldap_group_arg(group_dn_or_id: str) -&gt; str | int</code>","text":"Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_ldap_group_arg(group_dn_or_id: str) -&gt; str | int:\n    return _get_id_name_arg(\"LDAP Group\", group_dn_or_id)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.render_cli_value","title":"<code>render_cli_value(value: Any) -&gt; str</code>","text":"<p>Render a CLI value/argument.</p> Source code in <code>harbor_cli/style/style.py</code> <pre><code>def render_cli_value(value: Any) -&gt; str:\n    \"\"\"Render a CLI value/argument.\"\"\"\n    return f\"[{STYLE_CLI_VALUE}]{value!r}[/]\"\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_parent_ctx","title":"<code>get_parent_ctx(ctx: typer.Context | click.core.Context) -&gt; typer.Context | click.core.Context</code>","text":"<p>Get the top-level parent context of a context.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_parent_ctx(\n    ctx: typer.Context | click.core.Context,\n) -&gt; typer.Context | click.core.Context:\n    \"\"\"Get the top-level parent context of a context.\"\"\"\n    if ctx.parent is None:\n        return ctx\n    return get_parent_ctx(ctx.parent)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_command_help","title":"<code>get_command_help(command: typer.models.CommandInfo) -&gt; str</code>","text":"<p>Get the help text of a command.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_command_help(command: typer.models.CommandInfo) -&gt; str:\n    \"\"\"Get the help text of a command.\"\"\"\n    if command.help:\n        return command.help\n    if command.callback and command.callback.__doc__:\n        lines = command.callback.__doc__.strip().splitlines()\n        if lines:\n            return lines[0]\n    if command.short_help:\n        return command.short_help\n    return \"\"\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_app_commands","title":"<code>get_app_commands(app: typer.Typer) -&gt; list[CommandSummary]</code>  <code>cached</code>","text":"<p>Get a list of commands from a typer app.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>@lru_cache(maxsize=None)\ndef get_app_commands(app: typer.Typer) -&gt; list[CommandSummary]:\n    \"\"\"Get a list of commands from a typer app.\"\"\"\n    return _get_app_commands(app)\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.get_app_callback_options","title":"<code>get_app_callback_options(app: typer.Typer) -&gt; list[typer.models.OptionInfo]</code>","text":"<p>Get the options of the main callback of a Typer app.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_app_callback_options(app: typer.Typer) -&gt; list[typer.models.OptionInfo]:\n    \"\"\"Get the options of the main callback of a Typer app.\"\"\"\n    options: List[typer.models.OptionInfo] = []\n\n    if not app.registered_callback:\n        return options\n\n    callback = app.registered_callback.callback\n\n    if not callback:\n        return options\n    if not hasattr(callback, \"__defaults__\") or not callback.__defaults__:\n        return options\n\n    for option in callback.__defaults__:\n        options.append(option)\n    return options\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_help","title":"<code>inject_help(model: Type[BaseModel], strict: bool = False, remove: Optional[List[str]] = None, **field_additions: str) -&gt; Any</code>","text":"<p>Injects a Pydantic model's field descriptions into the help attributes of Typer.Option() function parameters whose names match the field names.</p> <p>Examples:</p> <pre><code>class MyModel(BaseModel):\n    my_field: str = Field(..., description=\"Description of my_field\")\n\n@app.command(name=\"my-command\")\n@inject_help(MyModel)\ndef my_command(my_field: str = typer.Option(...)):\n    ...\n\n# `my-app my-command --help`\n# my_field's help text will be \"Description of my_field\"\n</code></pre> NOTE <p>Does not modify the help text of options with existing help text! Use the <code>**field_additions</code> parameter to add additional help text to a field in addition to the field's description. This text is appended to the help text, separated by a space.</p> <p>e.g. <code>@inject_help(MyModel, my_field=\"Additional help text that is appended to the field's description.\")</code></p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[BaseModel]</code> <p>The pydantic model to use for help injection.</p> required <code>strict</code> <code>bool</code> <p>If True, fail if a field in the model does not correspond to a function parameter of the same name with a typer.OptionInfo as a default value.</p> <code>False</code> <code>remove</code> <code>Optional[List[str]]</code> <p>List of strings to remove from descriptions before injecting them.</p> <code>None</code> <code>**field_additions</code> <code>str</code> <p>Additional help text to add to the help attribute of a field. The parameter name should be the name of the field, and the value should be the additional help text to add. This is useful when the field's description is not sufficient, and you want to add additional help text to supplement the existing description.</p> <code>{}</code> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_help(\n    model: Type[BaseModel],\n    strict: bool = False,\n    remove: Optional[List[str]] = None,\n    **field_additions: str,\n) -&gt; Any:\n    \"\"\"\n    Injects a Pydantic model's field descriptions into the help attributes\n    of Typer.Option() function parameters whose names match the field names.\n\n    Examples\n    --------\n    ```python\n    class MyModel(BaseModel):\n        my_field: str = Field(..., description=\"Description of my_field\")\n\n    @app.command(name=\"my-command\")\n    @inject_help(MyModel)\n    def my_command(my_field: str = typer.Option(...)):\n        ...\n\n    # `my-app my-command --help`\n    # my_field's help text will be \"Description of my_field\"\n    ```\n\n    NOTE\n    ----\n    Does not modify the help text of options with existing help text!\n    Use the `**field_additions` parameter to add additional help text to a field\n    in addition to the field's description. This text is appended to the\n    help text, separated by a space.\n\n    e.g. `@inject_help(MyModel, my_field=\"Additional help text that is appended to the field's description.\")`\n\n    Parameters\n    ----------\n    model : Type[BaseModel]\n        The pydantic model to use for help injection.\n    strict : bool\n        If True, fail if a field in the model does not correspond to a function\n        parameter of the same name with a typer.OptionInfo as a default value.\n    remove: Optional[List[str]]\n        List of strings to remove from descriptions before injecting them.\n    **field_additions\n        Additional help text to add to the help attribute of a field.\n        The parameter name should be the name of the field, and the value\n        should be the additional help text to add. This is useful when\n        the field's description is not sufficient, and you want to add\n        additional help text to supplement the existing description.\n    \"\"\"\n\n    def decorator(func: Any) -&gt; Any:\n        sig = inspect.signature(func)\n        for field_name, field in model.model_fields.items():\n            # only overwrite help if not already set\n            param = sig.parameters.get(field_name, None)\n            if not param:\n                if strict:\n                    raise ValueError(\n                        f\"Field {field_name!r} not found in function signature of {func.__qualname__!r}.\"\n                    )\n                continue\n            if not hasattr(param, \"default\") or not hasattr(param.default, \"help\"):\n                continue\n            if not param.default.help:\n                addition = field_additions.get(field_name, \"\")\n                if addition:\n                    addition = f\" {addition}\"  # add leading space\n                description = field.description or \"\"\n                if remove:\n                    for to_remove in remove:\n                        # Could this be faster with a regex?\n                        description = description.replace(to_remove, \"\")\n                description = description.strip()\n                param.default.help = f\"{description}{addition}\"\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_resource_options","title":"<code>inject_resource_options(f: Any = None, *, strict: bool = False, use_defaults: bool = True) -&gt; Any</code>","text":"<p>Decorator that calls inject_query, inject_sort, inject_page_size, inject_page and inject_limit to inject typer.Option() defaults for common options used when querying multiple resources.</p> <p>NOTE: needs to be specified BEFORE @app.command() in order to work!</p> <p>Not strict by default, so that it can be used on functions that only have a subset of the parameters (e.g. only query and sort).</p> <p>The decorated function should always declare the parameters in the following order if the parameters don't have defaults: <code>query</code>, <code>sort</code>, <code>page</code>, <code>page_size</code>, <code>limit</code></p> <p>Examples:</p> <pre><code>@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str, page: int, page_size: int, limit: Optional[int]):\n    ...\n\n# OK\n@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str):\n    ...\n\n# NOT OK (missing all required parameters)\n@app.command()\n@inject_resource_options(strict=True)\ndef my_command(query: str, sort: str):\n    ...\n\n# OK (inherits defaults)\n@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str, page: int = typer.Option(1)):\n    ...\n\n# NOT OK (syntax error [non-default param after param with default])\n# Use ellipsis to specify unset defaults\n@app.command()\n@inject_resource_options()\ndef my_command(query: str = typer.Option(\"tag=latest\"), sort: str, page: int):\n\n# OK (inherit default query, but override others)\n# Use ellipsis to specify unset defaults\n@app.command()\n@inject_resource_options()\ndef my_command(query: str = typer.Option(\"my-query\"), sort: str = ..., page: int = ...):\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Any</code> <p>The function to decorate, by default None</p> <code>None</code> <code>strict</code> <code>bool</code> <p>If True, fail if function is missing any of the injected parameters, by default False E.g. all of <code>query</code>, <code>sort</code>, <code>page</code>, <code>page_size</code>, <code>limit</code> must be present</p> <code>False</code> <code>use_defaults</code> <code>bool</code> <p>If True, use the default value specified by a parameter's typer.Option() field as the default value for the parameter, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Any</code> <p>The decorated function</p> <p>Examples:</p> <p><pre><code>@inject_resource_options(use_defaults=True)\nmy_func(page_size: int = typer.Option(20)) -&gt; None: ...\n</code></pre> If use_defaults is True, the default value of page_size will be 20, instead of 10, which is the value inject_page_size() would use by default.</p> <p>Warning</p> <p><code>inject_resource_options()</code> only accepts parameter defaults specified with typer.Option() and typer.Argument()!</p> <pre><code>@inject_resource_options(use_default=True)\nmy_func(page_size: int = 20) -&gt; None: ... # will fail (for now)\n</code></pre> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_resource_options(\n    f: Any = None, *, strict: bool = False, use_defaults: bool = True\n) -&gt; Any:\n    \"\"\"Decorator that calls inject_query, inject_sort, inject_page_size,\n    inject_page and inject_limit to inject typer.Option() defaults\n    for common options used when querying multiple resources.\n\n    NOTE: needs to be specified BEFORE @app.command() in order to work!\n\n    Not strict by default, so that it can be used on functions that only\n    have a subset of the parameters (e.g. only query and sort).\n\n    The decorated function should always declare the parameters in the following order\n    if the parameters don't have defaults:\n    `query`, `sort`, `page`, `page_size`, `limit`\n\n    Examples\n    --------\n    ```python\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str, page: int, page_size: int, limit: Optional[int]):\n        ...\n\n    # OK\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str):\n        ...\n\n    # NOT OK (missing all required parameters)\n    @app.command()\n    @inject_resource_options(strict=True)\n    def my_command(query: str, sort: str):\n        ...\n\n    # OK (inherits defaults)\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str, page: int = typer.Option(1)):\n        ...\n\n    # NOT OK (syntax error [non-default param after param with default])\n    # Use ellipsis to specify unset defaults\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str = typer.Option(\"tag=latest\"), sort: str, page: int):\n\n    # OK (inherit default query, but override others)\n    # Use ellipsis to specify unset defaults\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str = typer.Option(\"my-query\"), sort: str = ..., page: int = ...):\n    ```\n\n    Parameters\n    ----------\n    f : Any, optional\n        The function to decorate, by default None\n    strict : bool, optional\n        If True, fail if function is missing any of the injected parameters, by default False\n        E.g. all of `query`, `sort`, `page`, `page_size`, `limit` must be present\n    use_defaults : bool, optional\n        If True, use the default value specified by a parameter's typer.Option() field\n        as the default value for the parameter, by default True.\n\n    Returns\n    -------\n    Any\n        The decorated function\n\n    Examples\n    --------\n    ```python\n    @inject_resource_options(use_defaults=True)\n    my_func(page_size: int = typer.Option(20)) -&gt; None: ...\n    ```\n    If use_defaults is True, the default value of page_size will be 20,\n    instead of 10, which is the value inject_page_size() would use by default.\n    !!! warning\n        `inject_resource_options()` only accepts parameter defaults specified with typer.Option() and typer.Argument()!\n\n    ```python\n    @inject_resource_options(use_default=True)\n    my_func(page_size: int = 20) -&gt; None: ... # will fail (for now)\n    ```\n    \"\"\"\n    # TODO: add check that the function signature is in the correct order\n    # so we don't raise a cryptic error message later on!\n\n    def decorator(func: Any) -&gt; Any:\n        # Inject in reverse order, because parameters with defaults\n        # can't be followed by parameters without defaults\n        for inject in [\n            inject_limit,\n            inject_page_size,\n            inject_page,\n            inject_sort,\n            inject_query,\n        ]:\n            func = inject(func, strict=strict, use_default=use_defaults)\n        return func\n\n    # Support using plain @inject_resource_options or @inject_resource_options()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_query","title":"<code>inject_query(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_query(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"query\", OPTION_QUERY, strict, use_default)\n\n    # Support using plain @inject_query or @inject_query()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_sort","title":"<code>inject_sort(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_sort(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"sort\", OPTION_SORT, strict, use_default)\n\n    # Support using plain @inject_sort or @inject_sort()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_page_size","title":"<code>inject_page_size(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_page_size(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"page_size\", OPTION_PAGE_SIZE, strict, use_default)\n\n    # Support using plain @inject_page_size or @inject_page_size()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_page","title":"<code>inject_page(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_page(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"page\", OPTION_PAGE, strict, use_default)\n\n    # Support using plain @inject_page or @inject_page()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_limit","title":"<code>inject_limit(f: Any = None, *, strict: bool = False, use_default: bool = False) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_limit(\n    f: Any = None, *, strict: bool = False, use_default: bool = False\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"limit\", OPTION_LIMIT, strict, use_default)\n\n    # Support using plain @inject_page or @inject_page()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.inject_project_name","title":"<code>inject_project_name(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_project_name(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"project_name\", ARG_PROJECT_NAME, strict, use_default)\n\n    # Support using plain @inject_query or @inject_query()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.replace_none","title":"<code>replace_none(d: Optional[MutableMappingType], replacement: Any = '') -&gt; MutableMappingType</code>","text":"<p>Replaces None values in a dict with a given replacement value. Iterates recursively through nested dicts and iterables.</p> <p>Untested with iterables other than list, tuple, and set.</p> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>def replace_none(\n    d: Optional[MutableMappingType], replacement: Any = \"\"\n) -&gt; MutableMappingType:\n    \"\"\"Replaces None values in a dict with a given replacement value.\n    Iterates recursively through nested dicts and iterables.\n\n    Untested with iterables other than list, tuple, and set.\n    \"\"\"\n\n    if d is None:\n        return replacement\n\n    def _try_convert_to_original_type(\n        value: Iterable[Any], original_type: type\n    ) -&gt; Iterable[Any]:\n        \"\"\"Try to convert an iterable to the original type.\n        If the original type cannot be constructed with an iterable as\n        the only argument, return a list instead.\n        \"\"\"\n        try:\n            return original_type(value)\n        except TypeError:\n            return list(value)\n\n    def _iter_iterable(value: Iterable[Any]) -&gt; Iterable[Any]:\n        \"\"\"Iterates through an iterable recursively, replacing None values.\"\"\"\n        t = type(value)\n        v_generator = (item if item is not None else replacement for item in value)\n        values: List[Any] = []\n\n        for item in v_generator:\n            v = None\n            if isinstance(item, MutableMapping):\n                v = replace_none(  # pyright: ignore[reportUnknownVariableType]\n                    item  # pyright: ignore[reportUnknownArgumentType]\n                )\n            elif isinstance(item, str):  # don't need to recurse into each char\n                v = item\n            elif isinstance(item, Iterable):\n                v = _iter_iterable(item)  # pyright: ignore[reportUnknownArgumentType]\n            else:\n                v = item\n            values.append(v)\n        if values:\n            return _try_convert_to_original_type(values, t)\n        else:\n            return value\n\n    for key, value in d.items():\n        key = str(key)\n        if isinstance(value, MutableMapping):\n            d[key] = replace_none(value)  # pyright: ignore[reportUnknownArgumentType]\n        elif isinstance(value, str):\n            d[key] = value\n        elif isinstance(value, Iterable):\n            d[key] = _iter_iterable(value)  # pyright: ignore[reportUnknownArgumentType]\n        elif value is None:\n            d[key] = replacement\n    return d\n</code></pre>"},{"location":"reference/utils/#harbor_cli.utils.parse_version_string","title":"<code>parse_version_string(package: str) -&gt; PackageVersion</code>","text":"<p>Parse a PEP 440 package version string into a PackageVersion tuple.</p> <p>Must be in the form of <code>&lt;package_name&gt;[{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}][,][{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}]</code></p> <p>Examples:</p> <pre><code>- \"foo\"\n- \"foo==1.2.3\"\n- \"foo&gt;=1.2.3\"\n- \"foo&gt;=1.2.3,&lt;=2.3.4\"\n</code></pre> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>def parse_version_string(package: str) -&gt; PackageVersion:\n    \"\"\"Parse a PEP 440 package version string into a PackageVersion tuple.\n\n    Must be in the form of `&lt;package_name&gt;[{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}][,][{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}]`\n\n    Examples\n    --------\n        - \"foo\"\n        - \"foo==1.2.3\"\n        - \"foo&gt;=1.2.3\"\n        - \"foo&gt;=1.2.3,&lt;=2.3.4\"\n    \"\"\"\n    # super dumb parsing, no regex for now\n    parts = package.replace(\" \", \"\").split(\",\")\n    if len(parts) &gt; 2:\n        raise ValueError(\"Invalid package version string\")\n    package_name = parts[0]\n    min_version = None\n    max_version = None\n    not_version = None  # pyright: ignore[reportUnusedVariable] # noqa # NYI\n\n    operators = [\"~=\", \"==\", \"&lt;=\", \"&gt;=\", \"&lt;\", \"&gt;\"]  # no != for now\n\n    p0 = parts[0]\n    for op in operators:\n        if op not in p0:\n            continue\n        package_name, version = p0.split(op)\n        package_name = package_name.strip(op)\n        if op in [\"~=\", \"==\"] and op in p0:\n            return PackageVersion(\n                package_name, min_version=version, max_version=version\n            )\n        elif op in [\"&lt;=\", \"&lt;\"] and op in p0:\n            max_version = version\n            break\n        elif op in [\"&gt;=\", \"&gt;\"] and op in p0:\n            min_version = version\n            break\n    if len(parts) == 1:\n        return PackageVersion(\n            package_name, min_version=min_version, max_version=max_version\n        )\n\n    # max version\n    p1 = parts[1]\n    if p1 and p1[0] in operators:\n        if not any(p1.startswith(op) for op in [\"&lt;=\", \"&lt;\"]):\n            raise ValueError(\"Invalid package version string\")\n        max_version = p1.strip(string.punctuation)\n    return PackageVersion(\n        package_name, min_version=min_version, max_version=max_version\n    )\n</code></pre>"},{"location":"reference/utils/args/","title":"Args","text":""},{"location":"reference/utils/args/#harbor_cli.utils.args","title":"<code>harbor_cli.utils.args</code>","text":""},{"location":"reference/utils/args/#harbor_cli.utils.args-attributes","title":"Attributes","text":""},{"location":"reference/utils/args/#harbor_cli.utils.args.BaseModelType","title":"<code>BaseModelType = TypeVar('BaseModelType', bound=BaseModel)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/args/#harbor_cli.utils.args-functions","title":"Functions","text":""},{"location":"reference/utils/args/#harbor_cli.utils.args.model_params_from_ctx","title":"<code>model_params_from_ctx(ctx: typer.Context, model: Type[BaseModel], filter_none: bool = True) -&gt; dict[str, Any]</code>","text":"<p>Get CLI options from a Typer context that correspond with Pydantic model field names.</p> <p>Given a command where the function parameter names match the model field names, the function returns a dict of the parameters that are valid for the model.</p> <p>If <code>filter_none</code> is True, then parameters that are None will be filtered out. This is enabled by default, since most Harbor API model fields are optional, and we want to signal to Pydantic that these fields should be treated as unset rather than set to None.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; class Foo(BaseModel):\n...     foo: str\n...     bar: str\n&gt;&gt;&gt; foo = Foo(foo=\"foo\", bar=\"bar\")\n&gt;&gt;&gt; ctx = typer.Context(...) # some-cmd --bar grok --baz quux\n&gt;&gt;&gt; model_params_from_ctx(ctx, Foo)\n{\"bar\": \"grok\"} # baz is not a valid field for Foo\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Typer context.</p> required <code>model</code> <code>Type[BaseModel]</code> <p>The model to get the parameters for.</p> required <code>filter_none</code> <code>bool</code> <p>Whether to filter out None values, by default True</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The model parameters.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def model_params_from_ctx(\n    ctx: typer.Context, model: Type[BaseModel], filter_none: bool = True\n) -&gt; dict[str, Any]:\n    \"\"\"Get CLI options from a Typer context that correspond with Pydantic\n    model field names.\n\n    Given a command where the function parameter names match the\n    model field names, the function returns a dict of the parameters\n    that are valid for the model.\n\n    If `filter_none` is True, then parameters that are None will be filtered out.\n    This is enabled by default, since most Harbor API model fields are optional,\n    and we want to signal to Pydantic that these fields should be treated\n    as *unset* rather than *set to None*.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pydantic import BaseModel\n    &gt;&gt;&gt; class Foo(BaseModel):\n    ...     foo: str\n    ...     bar: str\n    &gt;&gt;&gt; foo = Foo(foo=\"foo\", bar=\"bar\")\n    &gt;&gt;&gt; ctx = typer.Context(...) # some-cmd --bar grok --baz quux\n    &gt;&gt;&gt; model_params_from_ctx(ctx, Foo)\n    {\"bar\": \"grok\"} # baz is not a valid field for Foo\n\n\n    Parameters\n    ----------\n    ctx : typer.Context\n        The Typer context.\n    model : Type[BaseModel]\n        The model to get the parameters for.\n    filter_none : bool\n        Whether to filter out None values, by default True\n\n    Returns\n    -------\n    dict[str, Any]\n        The model parameters.\n    \"\"\"\n    return {\n        key: value\n        for key, value in ctx.params.items()\n        if key in model.model_fields and (not filter_none or value is not None)\n    }\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.create_updated_model","title":"<code>create_updated_model(existing: BaseModel, new: Type[BaseModelType], ctx: typer.Context, extra: bool = False, empty_ok: bool = False) -&gt; BaseModelType</code>","text":"<p>Given an existing model instance and another model type, instantiate other model based on the fields of the existing model combined with CLI args passed in by the user.</p> <p>When we call a PUT enpdoint, the API expects the full model definition, but we want to allow the user to only specify the fields they want to update. This function allows us to do that, by taking an existing model fetched via a GET call and updating it with new values from the Typer context.</p> <p>To further complicate things, Harbor API generally uses a different model definition for updating resources (PUT) than the one fetched from a GET call. For example, fetching information about a project returns a Project object, while updating a project requires a ProjectUpdateReq object.</p> <p>These models largely contain the same fields, but might have certain deviations. For example, the Project model has a <code>creation_time</code> field, while the ProjectUpdateReq model does not.</p> <p>This function allows us to create, for example, a ProjectUpdateReq object from a combination of a Project object and CLI args that correspond with the fields of the ProjectUpdateReq model.</p> <p>See model_params_from_ctx for more information on how the CLI context is used to provide the updated fields for the new model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; class Foo(BaseModel):\n...     a: Optional[int]\n...     b: Optional[str]\n...     c: Optional[bool]\n&gt;&gt;&gt; class FooUpdateReq(BaseModel):\n...     a: Optional[int]\n...     b: Optional[str]\n...     c: Optional[bool]\n...     d: bool = False\n&gt;&gt;&gt; foo = Foo(a=1, b=\"foo\", c=True)\n&gt;&gt;&gt; # we get a ctx object from a Typer command\n&gt;&gt;&gt; ctx = typer.Context(...) # update-foo --a 2 --b bar\n&gt;&gt;&gt; foo_update = create_updated_model(foo, FooUpdateReq, ctx)\n&gt;&gt;&gt; foo_update\nFooUpdateReq(a=2, b='bar', c=True, d=False)\n&gt;&gt;&gt; #        ^^^  ^^^^^^^\n&gt;&gt;&gt; # We created a FooUpdateReq with the new values from the context\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>existing</code> <code>BaseModel</code> <p>The existing model to use as a base.</p> required <code>new</code> <code>Type[BaseModelType]</code> <p>The new model type to construct.</p> required <code>ctx</code> <code>Context</code> <p>The Typer context to get the updated model parameters from.</p> required <code>extra</code> <code>bool</code> <p>Whether to include extra fields set on the existing model.</p> <code>False</code> <code>empty_ok</code> <code>bool</code> <p>Whether to allow the update to be empty. If False, an error will be raised if no parameters are provided to update.</p> <code>False</code> <p>Returns:</p> Type Description <code>BaseModelType</code> <p>The updated model.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def create_updated_model(\n    existing: BaseModel,\n    new: Type[BaseModelType],\n    ctx: typer.Context,\n    extra: bool = False,\n    empty_ok: bool = False,\n) -&gt; BaseModelType:\n    \"\"\"Given an existing model instance and another model type, instantiate\n    other model based on the fields of the existing model combined with CLI args\n    passed in by the user.\n\n    When we call a PUT enpdoint, the API expects the full model definition,\n    but we want to allow the user to only specify the fields they want to update.\n    This function allows us to do that, by taking an existing model fetched via\n    a GET call and updating it with new values from the Typer context.\n\n    To further complicate things, Harbor API generally uses a different model\n    definition for updating resources (PUT) than the one fetched from a GET call.\n    For example, fetching information about a project returns a Project object,\n    while updating a project requires a ProjectUpdateReq object.\n\n    These models largely contain the same fields, but might have certain deviations.\n    For example, the Project model has a `creation_time` field, while the\n    ProjectUpdateReq model does not.\n\n    This function allows us to create, for example, a ProjectUpdateReq object\n    from a combination of a Project object and CLI args that correspond with\n    the fields of the ProjectUpdateReq model.\n\n    See [model_params_from_ctx][harbor_cli.utils.args.model_params_from_ctx]\n    for more information on how the CLI context is used to provide the updated\n    fields for the new model.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pydantic import BaseModel\n    &gt;&gt;&gt; class Foo(BaseModel):\n    ...     a: Optional[int]\n    ...     b: Optional[str]\n    ...     c: Optional[bool]\n    &gt;&gt;&gt; class FooUpdateReq(BaseModel):\n    ...     a: Optional[int]\n    ...     b: Optional[str]\n    ...     c: Optional[bool]\n    ...     d: bool = False\n    &gt;&gt;&gt; foo = Foo(a=1, b=\"foo\", c=True)\n    &gt;&gt;&gt; # we get a ctx object from a Typer command\n    &gt;&gt;&gt; ctx = typer.Context(...) # update-foo --a 2 --b bar\n    &gt;&gt;&gt; foo_update = create_updated_model(foo, FooUpdateReq, ctx)\n    &gt;&gt;&gt; foo_update\n    FooUpdateReq(a=2, b='bar', c=True, d=False)\n    &gt;&gt;&gt; #        ^^^  ^^^^^^^\n    &gt;&gt;&gt; # We created a FooUpdateReq with the new values from the context\n\n    Parameters\n    ----------\n    existing : BaseModel\n        The existing model to use as a base.\n    new : Type[BaseModelType]\n        The new model type to construct.\n    ctx : typer.Context\n        The Typer context to get the updated model parameters from.\n    extra : bool\n        Whether to include extra fields set on the existing model.\n    empty_ok: bool\n        Whether to allow the update to be empty. If False, an error will be raised\n        if no parameters are provided to update.\n\n    Returns\n    -------\n    BaseModelType\n        The updated model.\n    \"\"\"\n    # Make sure ctx contains values we can update model with\n    params = model_params_from_ctx(ctx, new)\n    if not params and not empty_ok:\n        exit_err(\"No parameters provided to update\")\n\n    # Cast existing model to dict, update it with the new values\n    d = existing.model_dump(include=None if extra else set(new.model_fields))\n    d.update(params)\n    return new.model_validate(d)\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.parse_commalist","title":"<code>parse_commalist(arg: Optional[List[str]]) -&gt; List[str]</code>","text":"<p>Parses an optional argument that can be specified multiple times, or as a comma-separated string, into a list of strings.</p> <p><code>harbor subcmd --arg foo --arg bar,baz</code> will be parsed as: <code>[\"foo\", \"bar\", \"baz\"]</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_commalist([\"foo\", \"bar,baz\"])\n[\"foo\", \"bar\", \"baz\"]\n&gt;&gt;&gt; parse_commalist([])\n[]\n&gt;&gt;&gt; parse_commalist(None)\n[]\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_commalist(arg: Optional[List[str]]) -&gt; List[str]:\n    \"\"\"Parses an optional argument that can be specified multiple times,\n    or as a comma-separated string, into a list of strings.\n\n    `harbor subcmd --arg foo --arg bar,baz`\n    will be parsed as: `[\"foo\", \"bar\", \"baz\"]`\n\n    Examples\n    --------\n    ```py\n    &gt;&gt;&gt; parse_commalist([\"foo\", \"bar,baz\"])\n    [\"foo\", \"bar\", \"baz\"]\n    &gt;&gt;&gt; parse_commalist([])\n    []\n    &gt;&gt;&gt; parse_commalist(None)\n    []\n    ```\n    \"\"\"\n    if arg is None:\n        return []\n    return [item for arg_list in arg for item in arg_list.split(\",\")]\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.parse_commalist_int","title":"<code>parse_commalist_int(arg: Optional[List[str]]) -&gt; List[int]</code>","text":"<p>Parses a comma-separated list and converts the values to integers.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_commalist_int(arg: Optional[List[str]]) -&gt; List[int]:\n    \"\"\"Parses a comma-separated list and converts the values to integers.\"\"\"\n    int_list: List[int] = []\n    for item in parse_commalist(arg):\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            raise ValueError(f\"Invalid integer value: {item!r}\")\n    return int_list\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.parse_key_value_args","title":"<code>parse_key_value_args(arg: list[str]) -&gt; dict[str, str]</code>","text":"<p>Parses a list of key=value arguments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_key_value_args([\"foo=bar\", \"baz=qux\"])\n{'foo': 'bar', 'baz': 'qux'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>list[str]</code> <p>A list of key=value arguments.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A dictionary mapping keys to values.</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def parse_key_value_args(arg: list[str]) -&gt; dict[str, str]:\n    \"\"\"Parses a list of key=value arguments.\n\n    Examples\n    --------\n    &gt;&gt;&gt; parse_key_value_args([\"foo=bar\", \"baz=qux\"])\n    {'foo': 'bar', 'baz': 'qux'}\n\n    Parameters\n    ----------\n    arg\n        A list of key=value arguments.\n\n    Returns\n    -------\n    dict[str, str]\n        A dictionary mapping keys to values.\n    \"\"\"\n    metadata: Dict[str, str] = {}\n    for item in arg:\n        try:\n            key, value = item.split(\"=\", maxsplit=1)\n        except ValueError:\n            raise typer.BadParameter(\n                f\"Invalid metadata item {item!r}. Expected format: key=value\"\n            )\n        metadata[key] = value\n    return metadata\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.as_query","title":"<code>as_query(**kwargs: Any) -&gt; str</code>","text":"<p>Converts keyword arguments into a query string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; as_query(foo=\"bar\", baz=\"qux\")\n'foo=bar,baz=qux'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def as_query(**kwargs: Any) -&gt; str:\n    \"\"\"Converts keyword arguments into a query string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; as_query(foo=\"bar\", baz=\"qux\")\n    'foo=bar,baz=qux'\n    \"\"\"\n    return \",\".join(f\"{k}={v}\" for k, v in kwargs.items())\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.construct_query_list","title":"<code>construct_query_list(*values: Any, union: bool = True, allow_empty: bool = False, comma: bool = False) -&gt; str</code>","text":"<p>Given a key and a list of values, returns a harbor API query string with values as a list with union or intersection relationship (default: union).</p> <p>Falsey values are ignored if allow_empty is False (default).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=True)\n'{foo bar baz}'\n&gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=False)\n'(foo bar baz)'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\")\n'{bar baz}'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", allow_empty=True)\n'{ bar baz}'\n&gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", comma=True)\n'{bar,baz}'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def construct_query_list(\n    *values: Any,\n    union: bool = True,\n    allow_empty: bool = False,\n    comma: bool = False,\n) -&gt; str:\n    \"\"\"Given a key and a list of values, returns a harbor API\n    query string with values as a list with union or intersection\n    relationship (default: union).\n\n    Falsey values are ignored if allow_empty is False (default).\n\n    Examples\n    --------\n    &gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=True)\n    '{foo bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"foo\", \"bar\", \"baz\", union=False)\n    '(foo bar baz)'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\")\n    '{bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", allow_empty=True)\n    '{ bar baz}'\n    &gt;&gt;&gt; construct_query_list(\"\", \"bar\", \"baz\", comma=True)\n    '{bar,baz}'\n    \"\"\"\n    if len(values) &lt; 2:\n        return str(values[0] if values else \"\")\n    start = \"{\" if union else \"(\"\n    end = \"}\" if union else \")\"\n    sep = \",\" if comma else \" \"\n    return f\"{start}{sep.join(str(v) for v in values if v or allow_empty)}{end}\"\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.deconstruct_query_list","title":"<code>deconstruct_query_list(qlist: str) -&gt; list[str]</code>","text":"<p>Given a harbor API query string with values as a list (either union and intersection), returns a list of values. Will break if values contain spaces.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; deconstruct_query_list(\"{foo bar baz}\")\n['foo', 'bar', 'baz']\n&gt;&gt;&gt; deconstruct_query_list(\"(foo bar baz)\")\n['foo', 'bar', 'baz']\n&gt;&gt;&gt; deconstruct_query_list(\"{}\")\n[]\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def deconstruct_query_list(qlist: str) -&gt; list[str]:\n    \"\"\"Given a harbor API query string with values as a list (either union\n    and intersection), returns a list of values. Will break if values\n    contain spaces.\n\n    Examples\n    --------\n    &gt;&gt;&gt; deconstruct_query_list(\"{foo bar baz}\")\n    ['foo', 'bar', 'baz']\n    &gt;&gt;&gt; deconstruct_query_list(\"(foo bar baz)\")\n    ['foo', 'bar', 'baz']\n    &gt;&gt;&gt; deconstruct_query_list(\"{}\")\n    []\n    \"\"\"\n    # TODO: add comma support\n    values = qlist.strip(\"{}()\").split(\" \")\n    return [v for v in values if v]\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.add_to_query","title":"<code>add_to_query(query: str | None, **kwargs: str | list[str] | None) -&gt; str</code>","text":"<p>Given a query string and a set of keyword arguments, returns a new query string with the keyword arguments added to it. Keyword arguments that are already present in the query string will be overwritten.</p> <p>Always returns a string, even if the resulting query string is empty.</p> <p>TODO: allow fuzzy matching, e.g. foo=~bar</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add_to_query(\"foo=bar\", baz=\"qux\")\n'foo=bar,baz=qux'\n&gt;&gt;&gt; add_to_query(\"foo=bar\", foo=\"baz\")\n'foo=baz'\n&gt;&gt;&gt; add_to_query(None, foo=\"baz\")\n'foo=baz'\n&gt;&gt;&gt; add_to_query(\"foo=foo\", foo=\"bar\")\n'foo={foo bar}'\n</code></pre> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def add_to_query(query: str | None, **kwargs: str | list[str] | None) -&gt; str:\n    \"\"\"Given a query string and a set of keyword arguments, returns a\n    new query string with the keyword arguments added to it. Keyword\n    arguments that are already present in the query string will be\n    overwritten.\n\n    Always returns a string, even if the resulting query string is empty.\n\n    TODO: allow fuzzy matching, e.g. foo=~bar\n\n    Examples\n    --------\n    &gt;&gt;&gt; add_to_query(\"foo=bar\", baz=\"qux\")\n    'foo=bar,baz=qux'\n    &gt;&gt;&gt; add_to_query(\"foo=bar\", foo=\"baz\")\n    'foo=baz'\n    &gt;&gt;&gt; add_to_query(None, foo=\"baz\")\n    'foo=baz'\n    &gt;&gt;&gt; add_to_query(\"foo=foo\", foo=\"bar\")\n    'foo={foo bar}'\n    \"\"\"\n    query_items = parse_commalist([query] if query else [])\n    query_dict = parse_key_value_args(query_items)\n    for k, v in kwargs.items():\n        # Empty string, empty list, None, etc. are all ignored\n        if not v:\n            continue\n\n        # Remove empty list or otherwise absent value for key if exists\n        query_val = query_dict.get(k, None)\n        if query_val is not None and any(query_val.startswith(c) for c in [\"{\", \"(\"]):\n            # Query dict contains empty list (invalid), so we just remove it\n            # TODO: respect union/intersection list type\n            del query_dict[k]\n\n        # When the query already has a value for the given key, we need to\n        # convert the value to a list if isn't already one.\n        if k in query_dict:\n            if isinstance(v, list):\n                query_dict[k] = construct_query_list(query_dict[k], *v)\n            else:\n                query_dict[k] = construct_query_list(\n                    *deconstruct_query_list(query_dict[k]),\n                    v,\n                )\n        else:  # doesn't exist in query\n            if isinstance(v, str):\n                query_dict[k] = v\n            elif len(v) &gt; 1:\n                query_dict[k] = construct_query_list(*v)\n            else:\n                query_dict[k] = v[0]\n    return as_query(**query_dict)\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.get_project_arg","title":"<code>get_project_arg(project_name_or_id: str) -&gt; str | int</code>","text":"<p>Given a project name or ID argument (prefixed with 'id:'), return a project name (str) or project ID (int).</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_project_arg(project_name_or_id: str) -&gt; str | int:\n    \"\"\"Given a project name or ID argument (prefixed with 'id:'),\n    return a project name (str) or project ID (int).\n    \"\"\"\n    return _get_id_name_arg(\"project\", project_name_or_id)\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.get_user_arg","title":"<code>get_user_arg(username_or_id: str) -&gt; str | int</code>","text":"<p>Given a username or ID argument (prefixed with 'id:'), return a username (str) or user ID (int).</p> Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_user_arg(username_or_id: str) -&gt; str | int:\n    \"\"\"Given a username or ID argument (prefixed with 'id:'),\n    return a username (str) or user ID (int).\n    \"\"\"\n    return _get_id_name_arg(\"user\", username_or_id)\n</code></pre>"},{"location":"reference/utils/args/#harbor_cli.utils.args.get_ldap_group_arg","title":"<code>get_ldap_group_arg(group_dn_or_id: str) -&gt; str | int</code>","text":"Source code in <code>harbor_cli/utils/args.py</code> <pre><code>def get_ldap_group_arg(group_dn_or_id: str) -&gt; str | int:\n    return _get_id_name_arg(\"LDAP Group\", group_dn_or_id)\n</code></pre>"},{"location":"reference/utils/commands/","title":"Commands","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands","title":"<code>harbor_cli.utils.commands</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands-attributes","title":"Attributes","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.PREFIX_ID","title":"<code>PREFIX_ID = 'id:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_QUERY","title":"<code>OPTION_QUERY = typer.Option(None, '--query', help='Query parameters to filter the results.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_SORT","title":"<code>OPTION_SORT = typer.Option(None, '--sort', help=\"Sorting order of the results. Example: [green]'name,-id'[/] to sort by name ascending and id descending.\")</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_PAGE_SIZE","title":"<code>OPTION_PAGE_SIZE = typer.Option(10, '--page-size', help='(Advanced) Results to fetch per API call.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_PAGE","title":"<code>OPTION_PAGE = typer.Option(1, '--page', help='(Advanced) Page to begin fetching from.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_LIMIT","title":"<code>OPTION_LIMIT = typer.Option(None, '--limit', help='Maximum number of results to fetch.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_PROJECT_NAME_OR_ID","title":"<code>OPTION_PROJECT_NAME_OR_ID = typer.Option(None, '--project', help=f'Project name or ID. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.OPTION_FORCE","title":"<code>OPTION_FORCE = typer.Option(False, '--force', help='Force deletion without confirmation.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_PROJECT_NAME","title":"<code>ARG_PROJECT_NAME = typer.Argument(None, help='Name of the project to use.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_PROJECT_NAME_OR_ID","title":"<code>ARG_PROJECT_NAME_OR_ID = _arg_project_name_or_id()</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_PROJECT_NAME_OR_ID_OPTIONAL","title":"<code>ARG_PROJECT_NAME_OR_ID_OPTIONAL = _arg_project_name_or_id(None)</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_REPO_NAME","title":"<code>ARG_REPO_NAME = typer.Argument(help='Name of the repository to use.')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_USERNAME_OR_ID","title":"<code>ARG_USERNAME_OR_ID = typer.Argument(help=f'Username or ID of the user to use. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.ARG_LDAP_GROUP_DN_OR_ID","title":"<code>ARG_LDAP_GROUP_DN_OR_ID = typer.Argument(help=f'LDAP Group DN or ID of the group to use. {_USE_ID_HELP}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands-classes","title":"Classes","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands-functions","title":"Functions","text":""},{"location":"reference/utils/commands/#harbor_cli.utils.commands.get_parent_ctx","title":"<code>get_parent_ctx(ctx: typer.Context | click.core.Context) -&gt; typer.Context | click.core.Context</code>","text":"<p>Get the top-level parent context of a context.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_parent_ctx(\n    ctx: typer.Context | click.core.Context,\n) -&gt; typer.Context | click.core.Context:\n    \"\"\"Get the top-level parent context of a context.\"\"\"\n    if ctx.parent is None:\n        return ctx\n    return get_parent_ctx(ctx.parent)\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.get_command_help","title":"<code>get_command_help(command: typer.models.CommandInfo) -&gt; str</code>","text":"<p>Get the help text of a command.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_command_help(command: typer.models.CommandInfo) -&gt; str:\n    \"\"\"Get the help text of a command.\"\"\"\n    if command.help:\n        return command.help\n    if command.callback and command.callback.__doc__:\n        lines = command.callback.__doc__.strip().splitlines()\n        if lines:\n            return lines[0]\n    if command.short_help:\n        return command.short_help\n    return \"\"\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.get_app_commands","title":"<code>get_app_commands(app: typer.Typer) -&gt; list[CommandSummary]</code>  <code>cached</code>","text":"<p>Get a list of commands from a typer app.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>@lru_cache(maxsize=None)\ndef get_app_commands(app: typer.Typer) -&gt; list[CommandSummary]:\n    \"\"\"Get a list of commands from a typer app.\"\"\"\n    return _get_app_commands(app)\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.get_app_callback_options","title":"<code>get_app_callback_options(app: typer.Typer) -&gt; list[typer.models.OptionInfo]</code>","text":"<p>Get the options of the main callback of a Typer app.</p> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def get_app_callback_options(app: typer.Typer) -&gt; list[typer.models.OptionInfo]:\n    \"\"\"Get the options of the main callback of a Typer app.\"\"\"\n    options: List[typer.models.OptionInfo] = []\n\n    if not app.registered_callback:\n        return options\n\n    callback = app.registered_callback.callback\n\n    if not callback:\n        return options\n    if not hasattr(callback, \"__defaults__\") or not callback.__defaults__:\n        return options\n\n    for option in callback.__defaults__:\n        options.append(option)\n    return options\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_help","title":"<code>inject_help(model: Type[BaseModel], strict: bool = False, remove: Optional[List[str]] = None, **field_additions: str) -&gt; Any</code>","text":"<p>Injects a Pydantic model's field descriptions into the help attributes of Typer.Option() function parameters whose names match the field names.</p> <p>Examples:</p> <pre><code>class MyModel(BaseModel):\n    my_field: str = Field(..., description=\"Description of my_field\")\n\n@app.command(name=\"my-command\")\n@inject_help(MyModel)\ndef my_command(my_field: str = typer.Option(...)):\n    ...\n\n# `my-app my-command --help`\n# my_field's help text will be \"Description of my_field\"\n</code></pre> NOTE <p>Does not modify the help text of options with existing help text! Use the <code>**field_additions</code> parameter to add additional help text to a field in addition to the field's description. This text is appended to the help text, separated by a space.</p> <p>e.g. <code>@inject_help(MyModel, my_field=\"Additional help text that is appended to the field's description.\")</code></p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[BaseModel]</code> <p>The pydantic model to use for help injection.</p> required <code>strict</code> <code>bool</code> <p>If True, fail if a field in the model does not correspond to a function parameter of the same name with a typer.OptionInfo as a default value.</p> <code>False</code> <code>remove</code> <code>Optional[List[str]]</code> <p>List of strings to remove from descriptions before injecting them.</p> <code>None</code> <code>**field_additions</code> <code>str</code> <p>Additional help text to add to the help attribute of a field. The parameter name should be the name of the field, and the value should be the additional help text to add. This is useful when the field's description is not sufficient, and you want to add additional help text to supplement the existing description.</p> <code>{}</code> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_help(\n    model: Type[BaseModel],\n    strict: bool = False,\n    remove: Optional[List[str]] = None,\n    **field_additions: str,\n) -&gt; Any:\n    \"\"\"\n    Injects a Pydantic model's field descriptions into the help attributes\n    of Typer.Option() function parameters whose names match the field names.\n\n    Examples\n    --------\n    ```python\n    class MyModel(BaseModel):\n        my_field: str = Field(..., description=\"Description of my_field\")\n\n    @app.command(name=\"my-command\")\n    @inject_help(MyModel)\n    def my_command(my_field: str = typer.Option(...)):\n        ...\n\n    # `my-app my-command --help`\n    # my_field's help text will be \"Description of my_field\"\n    ```\n\n    NOTE\n    ----\n    Does not modify the help text of options with existing help text!\n    Use the `**field_additions` parameter to add additional help text to a field\n    in addition to the field's description. This text is appended to the\n    help text, separated by a space.\n\n    e.g. `@inject_help(MyModel, my_field=\"Additional help text that is appended to the field's description.\")`\n\n    Parameters\n    ----------\n    model : Type[BaseModel]\n        The pydantic model to use for help injection.\n    strict : bool\n        If True, fail if a field in the model does not correspond to a function\n        parameter of the same name with a typer.OptionInfo as a default value.\n    remove: Optional[List[str]]\n        List of strings to remove from descriptions before injecting them.\n    **field_additions\n        Additional help text to add to the help attribute of a field.\n        The parameter name should be the name of the field, and the value\n        should be the additional help text to add. This is useful when\n        the field's description is not sufficient, and you want to add\n        additional help text to supplement the existing description.\n    \"\"\"\n\n    def decorator(func: Any) -&gt; Any:\n        sig = inspect.signature(func)\n        for field_name, field in model.model_fields.items():\n            # only overwrite help if not already set\n            param = sig.parameters.get(field_name, None)\n            if not param:\n                if strict:\n                    raise ValueError(\n                        f\"Field {field_name!r} not found in function signature of {func.__qualname__!r}.\"\n                    )\n                continue\n            if not hasattr(param, \"default\") or not hasattr(param.default, \"help\"):\n                continue\n            if not param.default.help:\n                addition = field_additions.get(field_name, \"\")\n                if addition:\n                    addition = f\" {addition}\"  # add leading space\n                description = field.description or \"\"\n                if remove:\n                    for to_remove in remove:\n                        # Could this be faster with a regex?\n                        description = description.replace(to_remove, \"\")\n                description = description.strip()\n                param.default.help = f\"{description}{addition}\"\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_resource_options","title":"<code>inject_resource_options(f: Any = None, *, strict: bool = False, use_defaults: bool = True) -&gt; Any</code>","text":"<p>Decorator that calls inject_query, inject_sort, inject_page_size, inject_page and inject_limit to inject typer.Option() defaults for common options used when querying multiple resources.</p> <p>NOTE: needs to be specified BEFORE @app.command() in order to work!</p> <p>Not strict by default, so that it can be used on functions that only have a subset of the parameters (e.g. only query and sort).</p> <p>The decorated function should always declare the parameters in the following order if the parameters don't have defaults: <code>query</code>, <code>sort</code>, <code>page</code>, <code>page_size</code>, <code>limit</code></p> <p>Examples:</p> <pre><code>@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str, page: int, page_size: int, limit: Optional[int]):\n    ...\n\n# OK\n@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str):\n    ...\n\n# NOT OK (missing all required parameters)\n@app.command()\n@inject_resource_options(strict=True)\ndef my_command(query: str, sort: str):\n    ...\n\n# OK (inherits defaults)\n@app.command()\n@inject_resource_options()\ndef my_command(query: str, sort: str, page: int = typer.Option(1)):\n    ...\n\n# NOT OK (syntax error [non-default param after param with default])\n# Use ellipsis to specify unset defaults\n@app.command()\n@inject_resource_options()\ndef my_command(query: str = typer.Option(\"tag=latest\"), sort: str, page: int):\n\n# OK (inherit default query, but override others)\n# Use ellipsis to specify unset defaults\n@app.command()\n@inject_resource_options()\ndef my_command(query: str = typer.Option(\"my-query\"), sort: str = ..., page: int = ...):\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Any</code> <p>The function to decorate, by default None</p> <code>None</code> <code>strict</code> <code>bool</code> <p>If True, fail if function is missing any of the injected parameters, by default False E.g. all of <code>query</code>, <code>sort</code>, <code>page</code>, <code>page_size</code>, <code>limit</code> must be present</p> <code>False</code> <code>use_defaults</code> <code>bool</code> <p>If True, use the default value specified by a parameter's typer.Option() field as the default value for the parameter, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Any</code> <p>The decorated function</p> <p>Examples:</p> <p><pre><code>@inject_resource_options(use_defaults=True)\nmy_func(page_size: int = typer.Option(20)) -&gt; None: ...\n</code></pre> If use_defaults is True, the default value of page_size will be 20, instead of 10, which is the value inject_page_size() would use by default.</p> <p>Warning</p> <p><code>inject_resource_options()</code> only accepts parameter defaults specified with typer.Option() and typer.Argument()!</p> <pre><code>@inject_resource_options(use_default=True)\nmy_func(page_size: int = 20) -&gt; None: ... # will fail (for now)\n</code></pre> Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_resource_options(\n    f: Any = None, *, strict: bool = False, use_defaults: bool = True\n) -&gt; Any:\n    \"\"\"Decorator that calls inject_query, inject_sort, inject_page_size,\n    inject_page and inject_limit to inject typer.Option() defaults\n    for common options used when querying multiple resources.\n\n    NOTE: needs to be specified BEFORE @app.command() in order to work!\n\n    Not strict by default, so that it can be used on functions that only\n    have a subset of the parameters (e.g. only query and sort).\n\n    The decorated function should always declare the parameters in the following order\n    if the parameters don't have defaults:\n    `query`, `sort`, `page`, `page_size`, `limit`\n\n    Examples\n    --------\n    ```python\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str, page: int, page_size: int, limit: Optional[int]):\n        ...\n\n    # OK\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str):\n        ...\n\n    # NOT OK (missing all required parameters)\n    @app.command()\n    @inject_resource_options(strict=True)\n    def my_command(query: str, sort: str):\n        ...\n\n    # OK (inherits defaults)\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str, sort: str, page: int = typer.Option(1)):\n        ...\n\n    # NOT OK (syntax error [non-default param after param with default])\n    # Use ellipsis to specify unset defaults\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str = typer.Option(\"tag=latest\"), sort: str, page: int):\n\n    # OK (inherit default query, but override others)\n    # Use ellipsis to specify unset defaults\n    @app.command()\n    @inject_resource_options()\n    def my_command(query: str = typer.Option(\"my-query\"), sort: str = ..., page: int = ...):\n    ```\n\n    Parameters\n    ----------\n    f : Any, optional\n        The function to decorate, by default None\n    strict : bool, optional\n        If True, fail if function is missing any of the injected parameters, by default False\n        E.g. all of `query`, `sort`, `page`, `page_size`, `limit` must be present\n    use_defaults : bool, optional\n        If True, use the default value specified by a parameter's typer.Option() field\n        as the default value for the parameter, by default True.\n\n    Returns\n    -------\n    Any\n        The decorated function\n\n    Examples\n    --------\n    ```python\n    @inject_resource_options(use_defaults=True)\n    my_func(page_size: int = typer.Option(20)) -&gt; None: ...\n    ```\n    If use_defaults is True, the default value of page_size will be 20,\n    instead of 10, which is the value inject_page_size() would use by default.\n    !!! warning\n        `inject_resource_options()` only accepts parameter defaults specified with typer.Option() and typer.Argument()!\n\n    ```python\n    @inject_resource_options(use_default=True)\n    my_func(page_size: int = 20) -&gt; None: ... # will fail (for now)\n    ```\n    \"\"\"\n    # TODO: add check that the function signature is in the correct order\n    # so we don't raise a cryptic error message later on!\n\n    def decorator(func: Any) -&gt; Any:\n        # Inject in reverse order, because parameters with defaults\n        # can't be followed by parameters without defaults\n        for inject in [\n            inject_limit,\n            inject_page_size,\n            inject_page,\n            inject_sort,\n            inject_query,\n        ]:\n            func = inject(func, strict=strict, use_default=use_defaults)\n        return func\n\n    # Support using plain @inject_resource_options or @inject_resource_options()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_query","title":"<code>inject_query(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_query(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"query\", OPTION_QUERY, strict, use_default)\n\n    # Support using plain @inject_query or @inject_query()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_sort","title":"<code>inject_sort(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_sort(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"sort\", OPTION_SORT, strict, use_default)\n\n    # Support using plain @inject_sort or @inject_sort()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_page_size","title":"<code>inject_page_size(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_page_size(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"page_size\", OPTION_PAGE_SIZE, strict, use_default)\n\n    # Support using plain @inject_page_size or @inject_page_size()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_page","title":"<code>inject_page(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_page(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"page\", OPTION_PAGE, strict, use_default)\n\n    # Support using plain @inject_page or @inject_page()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_limit","title":"<code>inject_limit(f: Any = None, *, strict: bool = False, use_default: bool = False) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_limit(\n    f: Any = None, *, strict: bool = False, use_default: bool = False\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"limit\", OPTION_LIMIT, strict, use_default)\n\n    # Support using plain @inject_page or @inject_page()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/commands/#harbor_cli.utils.commands.inject_project_name","title":"<code>inject_project_name(f: Any = None, *, strict: bool = False, use_default: bool = True) -&gt; Any</code>","text":"Source code in <code>harbor_cli/utils/commands.py</code> <pre><code>def inject_project_name(\n    f: Any = None, *, strict: bool = False, use_default: bool = True\n) -&gt; Any:\n    def decorator(func: Any) -&gt; Any:\n        return _patch_param(func, \"project_name\", ARG_PROJECT_NAME, strict, use_default)\n\n    # Support using plain @inject_query or @inject_query()\n    if callable(f):\n        return decorator(f)\n    else:\n        return decorator\n</code></pre>"},{"location":"reference/utils/utils/","title":"Utils","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils","title":"<code>harbor_cli.utils.utils</code>","text":"<p>Utility functions that can't be neatly categorized, or are so niche that they don't need their own module.</p>"},{"location":"reference/utils/utils/#harbor_cli.utils.utils-attributes","title":"Attributes","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.MutableMappingType","title":"<code>MutableMappingType = TypeVar('MutableMappingType', bound=MutableMapping[Any, Any])</code>  <code>module-attribute</code>","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils-classes","title":"Classes","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion","title":"<code>PackageVersion</code>","text":"<p>               Bases: <code>NamedTuple</code></p> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>class PackageVersion(NamedTuple):\n    package: str\n    min_version: Optional[str] = None\n    max_version: Optional[str] = None\n    not_version: Optional[str] = None  # NYI\n</code></pre>"},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion-attributes","title":"Attributes","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion.package","title":"<code>package: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion.min_version","title":"<code>min_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion.max_version","title":"<code>max_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.PackageVersion.not_version","title":"<code>not_version: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils-functions","title":"Functions","text":""},{"location":"reference/utils/utils/#harbor_cli.utils.utils.replace_none","title":"<code>replace_none(d: Optional[MutableMappingType], replacement: Any = '') -&gt; MutableMappingType</code>","text":"<p>Replaces None values in a dict with a given replacement value. Iterates recursively through nested dicts and iterables.</p> <p>Untested with iterables other than list, tuple, and set.</p> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>def replace_none(\n    d: Optional[MutableMappingType], replacement: Any = \"\"\n) -&gt; MutableMappingType:\n    \"\"\"Replaces None values in a dict with a given replacement value.\n    Iterates recursively through nested dicts and iterables.\n\n    Untested with iterables other than list, tuple, and set.\n    \"\"\"\n\n    if d is None:\n        return replacement\n\n    def _try_convert_to_original_type(\n        value: Iterable[Any], original_type: type\n    ) -&gt; Iterable[Any]:\n        \"\"\"Try to convert an iterable to the original type.\n        If the original type cannot be constructed with an iterable as\n        the only argument, return a list instead.\n        \"\"\"\n        try:\n            return original_type(value)\n        except TypeError:\n            return list(value)\n\n    def _iter_iterable(value: Iterable[Any]) -&gt; Iterable[Any]:\n        \"\"\"Iterates through an iterable recursively, replacing None values.\"\"\"\n        t = type(value)\n        v_generator = (item if item is not None else replacement for item in value)\n        values: List[Any] = []\n\n        for item in v_generator:\n            v = None\n            if isinstance(item, MutableMapping):\n                v = replace_none(  # pyright: ignore[reportUnknownVariableType]\n                    item  # pyright: ignore[reportUnknownArgumentType]\n                )\n            elif isinstance(item, str):  # don't need to recurse into each char\n                v = item\n            elif isinstance(item, Iterable):\n                v = _iter_iterable(item)  # pyright: ignore[reportUnknownArgumentType]\n            else:\n                v = item\n            values.append(v)\n        if values:\n            return _try_convert_to_original_type(values, t)\n        else:\n            return value\n\n    for key, value in d.items():\n        key = str(key)\n        if isinstance(value, MutableMapping):\n            d[key] = replace_none(value)  # pyright: ignore[reportUnknownArgumentType]\n        elif isinstance(value, str):\n            d[key] = value\n        elif isinstance(value, Iterable):\n            d[key] = _iter_iterable(value)  # pyright: ignore[reportUnknownArgumentType]\n        elif value is None:\n            d[key] = replacement\n    return d\n</code></pre>"},{"location":"reference/utils/utils/#harbor_cli.utils.utils.parse_version_string","title":"<code>parse_version_string(package: str) -&gt; PackageVersion</code>","text":"<p>Parse a PEP 440 package version string into a PackageVersion tuple.</p> <p>Must be in the form of <code>&lt;package_name&gt;[{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}][,][{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}]</code></p> <p>Examples:</p> <pre><code>- \"foo\"\n- \"foo==1.2.3\"\n- \"foo&gt;=1.2.3\"\n- \"foo&gt;=1.2.3,&lt;=2.3.4\"\n</code></pre> Source code in <code>harbor_cli/utils/utils.py</code> <pre><code>def parse_version_string(package: str) -&gt; PackageVersion:\n    \"\"\"Parse a PEP 440 package version string into a PackageVersion tuple.\n\n    Must be in the form of `&lt;package_name&gt;[{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}][,][{~=,==,!=,&lt;=,&gt;=,&lt;,&gt;}{x.y.z}]`\n\n    Examples\n    --------\n        - \"foo\"\n        - \"foo==1.2.3\"\n        - \"foo&gt;=1.2.3\"\n        - \"foo&gt;=1.2.3,&lt;=2.3.4\"\n    \"\"\"\n    # super dumb parsing, no regex for now\n    parts = package.replace(\" \", \"\").split(\",\")\n    if len(parts) &gt; 2:\n        raise ValueError(\"Invalid package version string\")\n    package_name = parts[0]\n    min_version = None\n    max_version = None\n    not_version = None  # pyright: ignore[reportUnusedVariable] # noqa # NYI\n\n    operators = [\"~=\", \"==\", \"&lt;=\", \"&gt;=\", \"&lt;\", \"&gt;\"]  # no != for now\n\n    p0 = parts[0]\n    for op in operators:\n        if op not in p0:\n            continue\n        package_name, version = p0.split(op)\n        package_name = package_name.strip(op)\n        if op in [\"~=\", \"==\"] and op in p0:\n            return PackageVersion(\n                package_name, min_version=version, max_version=version\n            )\n        elif op in [\"&lt;=\", \"&lt;\"] and op in p0:\n            max_version = version\n            break\n        elif op in [\"&gt;=\", \"&gt;\"] and op in p0:\n            min_version = version\n            break\n    if len(parts) == 1:\n        return PackageVersion(\n            package_name, min_version=min_version, max_version=max_version\n        )\n\n    # max version\n    p1 = parts[1]\n    if p1 and p1[0] in operators:\n        if not any(p1.startswith(op) for op in [\"&lt;=\", \"&lt;\"]):\n            raise ValueError(\"Invalid package version string\")\n        max_version = p1.strip(string.punctuation)\n    return PackageVersion(\n        package_name, min_version=min_version, max_version=max_version\n    )\n</code></pre>"},{"location":"usage/basic-usage/","title":"Basics","text":"<p>The application consists of several top-level commands pertaining to specific Harbor resources, such as <code>project</code>, <code>repository</code>, <code>artifact</code>, etc. Each of these commands have subcommands that can be used to perform actions on the resource, such as <code>create</code>, <code>delete</code>, <code>list</code>, etc.</p> <p>See Actions terminology for more information about the semantics of the different actions.</p>"},{"location":"usage/basic-usage/#command","title":"Command","text":"<p>A command is typically invoked as follows:</p> <pre><code>harbor project list\n</code></pre> <p><code>project</code> is the resource type, and <code>list</code> is the action to perform on the resource, and together they form the command. Most commands are namespaced in this way, where a resource type has one or more actions associated with it. Some command even have subsubcommands, such as:</p> <pre><code>harbor project metadata field set\n</code></pre> <p>For more information about how command names are structured, see Terminology.</p>"},{"location":"usage/basic-usage/#arguments","title":"Arguments","text":"<p>Commands sometimes take one or more positional arguments:</p> <pre><code>artifact tag create library/hello-world:latest my-tag\n</code></pre> <p>The command <code>artifact tag create</code> takes two positional arguments:</p> <ul> <li><code>library/hello-world:latest</code> - The artifact to tag</li> <li><code>my-tag</code> - The name of the tag to create</li> </ul> <p>These are positional arguments, which means the order in which they are specified is important.</p>"},{"location":"usage/basic-usage/#argument-types","title":"Argument types","text":"<p>The expected type of an argument is specified in the command's documentation. The following types are used:</p>"},{"location":"usage/basic-usage/#text","title":"<code>text</code>","text":"<p>A text string. Can be any sequence of characters. Enclose in quotes if it contains spaces.</p>"},{"location":"usage/basic-usage/#integer","title":"<code>integer</code>","text":"<p>A whole number without a decimal point. Unconstrained unless otherwise specified in the command's help text.</p>"},{"location":"usage/basic-usage/#boolean","title":"<code>boolean</code>","text":"<p>A boolean value. Can be <code>true</code>, <code>false</code>, <code>1</code>, or <code>0</code>. Case-insensitive.</p> <p>Info</p> <p>A boolean argument is typically used for resources whose value can be <code>None</code>, <code>True</code> or <code>False</code>.</p>"},{"location":"usage/basic-usage/#choice","title":"<code>choice</code>","text":"<p>A choice between a set of values. The valid values are specified in the help text for the command.</p>"},{"location":"usage/basic-usage/#options","title":"Options","text":"<p>Most commands also have a number of options that can be specified. In certain cases at least one option is required, such as when updating a project with <code>project update</code>:</p> <pre><code>harbor project update my-project --public false\n</code></pre> <p>Since we are updating a resource, we are expected to specify at least one field to update. In this case we set <code>--public</code> to <code>false</code>, making the project private.</p>"},{"location":"usage/basic-usage/#multiple-values","title":"Multiple values","text":"<p>Certain options accept multiple values. These can be specified as a comma-separated list:</p> <pre><code>harbor artifact list --project library,my-project\n</code></pre> <p>Or by using the relevant option multiple times:</p> <pre><code>harbor artifact list --project library --project my-project\n</code></pre>"},{"location":"usage/basic-usage/#flags","title":"Flags","text":"<p>Some options are flags, meaning they do not take any arguments. Flags are specified as follows:</p> <pre><code>harbor project list --public\n</code></pre> <p>Flags can be inverted by prefixing the flag name with <code>no-</code>:</p> <pre><code>harbor project list --no-public\n</code></pre> <p>Info</p> <p>Flags are typically used to toggle a certain behavior. For example, the <code>--public</code> flag for <code>project list</code> can be used to list only public projects.</p>"},{"location":"usage/basic-usage/#global-options","title":"Global options","text":"<p>Global options are options that apply to all commands. They must be specified before the command. Examples of these are <code>--config</code>, <code>--url</code> and <code>--username</code>.</p> <p>Global options must be specified before the command to run, e.g.:</p> <pre><code>harbor --format json project list\n</code></pre> <p>See the Options page for more information on the available global options.</p>"},{"location":"usage/basic-usage/#help","title":"Help","text":"<p>For more information about a specific command, use:</p> <pre><code>harbor &lt;command&gt; --help\n</code></pre> <p>See Commands for more in-depth information about how to use the various commands.</p>"},{"location":"usage/basic-usage/#search-for-commands","title":"Search for commands","text":"<p>To search for a command based on name or description, use:</p> <pre><code>harbor find QUERY... [OPTIONS]\n</code></pre> <p>See <code>harbor find</code> for more information.</p>"},{"location":"usage/basic-usage/#help-output","title":"Help output","text":"<p>The output of <code>harbor --help</code> shows all the available commands and command groups along with the global options:</p> <pre><code>$ harbor --help\n\n Usage: harbor [OPTIONS] COMMAND [ARGS]...                                      \n\n Harbor CLI                                                                     \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --config              -c      PATH                   Path to config file.    \u2502\n\u2502 --version                                            Show application        \u2502\n\u2502                                                      version and exit.       \u2502\n\u2502 --install-completion          [bash|zsh|fish|powers  Install completion for  \u2502\n\u2502                               hell|pwsh]             the specified shell.    \u2502\n\u2502                                                      [default: None]         \u2502\n\u2502 --show-completion             [bash|zsh|fish|powers  Show completion for the \u2502\n\u2502                               hell|pwsh]             specified shell, to     \u2502\n\u2502                                                      copy it or customize    \u2502\n\u2502                                                      the installation.       \u2502\n\u2502                                                      [default: None]         \u2502\n\u2502 --help                                               Show this message and   \u2502\n\u2502                                                      exit.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Harbor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --url,--harbor-url     -u                     TEXT     Harbor API URL.       \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option harbor.url.    \u2502\n\u2502 --username,--harbor-\u2026  -U                     TEXT     Harbor username.      \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option                \u2502\n\u2502                                                        harbor.username.      \u2502\n\u2502 --secret,--harbor-se\u2026  -S                     TEXT     Harbor secret         \u2502\n\u2502                                                        (password). Overrides \u2502\n\u2502                                                        config option         \u2502\n\u2502                                                        harbor.secret.        \u2502\n\u2502 --basicauth            -B                     TEXT     Harbor basic access   \u2502\n\u2502                                                        credentials (base64). \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option                \u2502\n\u2502                                                        harbor.basicauth.     \u2502\n\u2502 --credentials-file     -F                     PATH     Path to Harbor JSON   \u2502\n\u2502                                                        credentials file.     \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option                \u2502\n\u2502                                                        harbor.credentials_f\u2026 \u2502\n\u2502 --validate                 --no-validate               Validate Harbor API   \u2502\n\u2502                                                        response data. Forces \u2502\n\u2502                                                        JSON output format if \u2502\n\u2502                                                        disabled. Overrides   \u2502\n\u2502                                                        config option         \u2502\n\u2502                                                        harbor.validate_data. \u2502\n\u2502 --raw                      --no-raw                    Return raw data from  \u2502\n\u2502                                                        Harbor API. Overrides \u2502\n\u2502                                                        all output formatting \u2502\n\u2502                                                        options. Overrides    \u2502\n\u2502                                                        config option         \u2502\n\u2502                                                        harbor.raw_mode.      \u2502\n\u2502 --verify-ssl               --no-verify-ssl             Verify SSL            \u2502\n\u2502                                                        certificates when     \u2502\n\u2502                                                        connecting to Harbor. \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option                \u2502\n\u2502                                                        harbor.verify_ssl.    \u2502\n\u2502 --retry                    --no-retry                  Retry failed HTTP     \u2502\n\u2502                                                        requests. Overrides   \u2502\n\u2502                                                        config option         \u2502\n\u2502                                                        harbor.retry.enabled. \u2502\n\u2502 --retry-max-tries                             INTEGER  Number of times to    \u2502\n\u2502                                                        retry failed HTTP     \u2502\n\u2502                                                        requests. Overrides   \u2502\n\u2502                                                        config option         \u2502\n\u2502                                                        harbor.retry.max_tri\u2026 \u2502\n\u2502 --retry-max-time                              FLOAT    Maximum number of     \u2502\n\u2502                                                        seconds to retry      \u2502\n\u2502                                                        failed HTTP requests. \u2502\n\u2502                                                        Overrides config      \u2502\n\u2502                                                        option                \u2502\n\u2502                                                        harbor.retry.max_tim\u2026 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --table-descripti\u2026      --no-table-desc\u2026                  Include field      \u2502\n\u2502                                                           descriptions in    \u2502\n\u2502                                                           tables. Overrides  \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.table.desc\u2026 \u2502\n\u2502 --table-max-depth                           INTEGER       Maximum depth to   \u2502\n\u2502                                                           print nested       \u2502\n\u2502                                                           objects in tables. \u2502\n\u2502                                                           Overrides config   \u2502\n\u2502                                                           option             \u2502\n\u2502                                                           output.table.max_\u2026 \u2502\n\u2502 --table-compact         --no-table-comp\u2026                  Compact table      \u2502\n\u2502                                                           output. Has no     \u2502\n\u2502                                                           effect on other    \u2502\n\u2502                                                           formats. Overrides \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.table.comp\u2026 \u2502\n\u2502 --json-indent                               INTEGER       Indentation level  \u2502\n\u2502                                                           for JSON output.   \u2502\n\u2502                                                           Overrides config   \u2502\n\u2502                                                           option             \u2502\n\u2502                                                           output.json.inden\u2026 \u2502\n\u2502 --json-sort-keys        --no-json-sort-\u2026                  Sort keys in JSON  \u2502\n\u2502                                                           output. Overrides  \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.json.sort_\u2026 \u2502\n\u2502 --format            -f                      [table|json]  Specifies the      \u2502\n\u2502                                                           output format to   \u2502\n\u2502                                                           use. Overrides     \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.format.     \u2502\n\u2502 --paging                --no-paging                       Display output in  \u2502\n\u2502                                                           a pager (less,     \u2502\n\u2502                                                           etc.). Overrides   \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.paging.     \u2502\n\u2502 --pager                                     TEXT          Pager command to   \u2502\n\u2502                                                           use. The default   \u2502\n\u2502                                                           Rich pager will be \u2502\n\u2502                                                           used. Overrides    \u2502\n\u2502                                                           config option      \u2502\n\u2502                                                           output.pager.      \u2502\n\u2502 --output            -o                      PATH          Output file, by    \u2502\n\u2502                                                           default None,      \u2502\n\u2502                                                           which means output \u2502\n\u2502                                                           to stdout. If the  \u2502\n\u2502                                                           file already       \u2502\n\u2502                                                           exists, it will be \u2502\n\u2502                                                           overwritten.       \u2502\n\u2502 --no-overwrite                                            Do not overwrite   \u2502\n\u2502                                                           the output file if \u2502\n\u2502                                                           it already exists. \u2502\n\u2502 --verbose           -v                                    Enable verbose     \u2502\n\u2502                                                           output.            \u2502\n\u2502 --with-stdout                                             Output to stdout   \u2502\n\u2502                                                           in addition to the \u2502\n\u2502                                                           specified output   \u2502\n\u2502                                                           file, if any. Has  \u2502\n\u2502                                                           no effect if no    \u2502\n\u2502                                                           output file is     \u2502\n\u2502                                                           specified.         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Confirmation &amp; Alerts \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --confirm-deletion       --no-confirm-deletion       Confirm before deleting \u2502\n\u2502                                                      resources. Overrides    \u2502\n\u2502                                                      config option           \u2502\n\u2502                                                      general.confirm_deleti\u2026 \u2502\n\u2502 --confirm-enumeration    --no-confirm-enumerat\u2026      Confirm before          \u2502\n\u2502                                                      enumerating all         \u2502\n\u2502                                                      resources without a     \u2502\n\u2502                                                      limit or query.         \u2502\n\u2502                                                      Overrides config option \u2502\n\u2502                                                      general.confirm_enumer\u2026 \u2502\n\u2502 --warnings               --no-warnings               Show/hide warnings.     \u2502\n\u2502                                                      Overrides config option \u2502\n\u2502                                                      general.warnings.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 artifact         Manage artifacts.                                           \u2502\n\u2502 auditlog         Audit log management and access                             \u2502\n\u2502 commands         List all commands.                                          \u2502\n\u2502 config           Manage Harbor configuration.                                \u2502\n\u2502 cve-allowlist    Manage the system-wide CVE allowlist.                       \u2502\n\u2502 find             Search for commands based on names and descriptions.        \u2502\n\u2502 gc               Garbage Collection scheduling and information               \u2502\n\u2502 init             Initialize Harbor CLI configuration file.                   \u2502\n\u2502 ldap             LDAP configuration                                          \u2502\n\u2502 project          Manage projects.                                            \u2502\n\u2502 quota            Quota management                                            \u2502\n\u2502 registry         Registry management                                         \u2502\n\u2502 repl             Start an interactive REPL.                                  \u2502\n\u2502 replication      Registry replication execution and policy.                  \u2502\n\u2502 repository       Manage repositories.                                        \u2502\n\u2502 retention        Artifact retention policy management and execution.         \u2502\n\u2502 sample-config    Print a sample config file to stdout.                       \u2502\n\u2502 scan             Scanning of individual artifacts.                           \u2502\n\u2502 scan-all         Scanning of all artifacts.                                  \u2502\n\u2502 scanner          Manage scanners.                                            \u2502\n\u2502 search           Search for projects and repositories.                       \u2502\n\u2502 self             Manage the CLI itself.                                      \u2502\n\u2502 system           System information                                          \u2502\n\u2502 tui              Start a TUI (text-based user interface).                    \u2502\n\u2502 user             Manage users.                                               \u2502\n\u2502 usergroup        Manage user groups.                                         \u2502\n\u2502 webhook          Manage webhooks                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/options/","title":"Options","text":"<p>The application provides a wide range of options that can be used to customize its behavior. Common for all these options is that they must be specified before the command to run:</p> <pre><code>harbor \\\n--url https://my-harbor.com/api/v2.0 \\\n--username admin \\\n--secret my-secret \\\nproject list\n</code></pre> <p>Many of these options can override configuration file options, and will always take precedence if used. For a more in-depth look at persistent configuration, see Configuration. Each option listed below has a link to the relevant section in the configuration file if applicable.</p>"},{"location":"usage/options/#-config-c","title":"<code>--config</code>, <code>-c</code>","text":"<p>Environment variable: <code>HARBOR_CLI_CONFIG</code></p> <p>Path to config file.</p>"},{"location":"usage/options/#-url-u","title":"<code>--url</code>, <code>-u</code>","text":"<p>Environment variable: <code>HARBOR_CLI_URL</code></p> <p>Configuration option: <code>harbor.url</code></p> <p>Harbor API URL.</p>"},{"location":"usage/options/#-username-u","title":"<code>--username</code>, <code>-U</code>","text":"<p>Environment variable: <code>HARBOR_CLI_USERNAME</code></p> <p>Configuration option: <code>harbor.username</code></p> <p>Harbor username.</p>"},{"location":"usage/options/#-secret-s","title":"<code>--secret</code>, <code>-S</code>","text":"<p>Environment variable: <code>HARBOR_CLI_SECRET</code></p> <p>Configuration option: <code>harbor.secret</code></p> <p>Harbor secret (password).</p>"},{"location":"usage/options/#_1","title":"Options","text":"<p>Environment variable: <code>HARBOR_CLI_BASICAUTH</code></p> <p>Configuration option: <code>harbor.basicauth</code></p> <p>Harbor basic access credentials (base64).</p>"},{"location":"usage/options/#-credentials-file-f","title":"<code>--credentials-file</code>, <code>-F</code>","text":"<p>Environment variable: <code>HARBOR_CLI_CREDENTIALS_FILE</code></p> <p>Configuration option: <code>harbor.credentials_file</code></p> <p>Path to Harbor JSON credentials file.</p>"},{"location":"usage/options/#-validate-no-validate","title":"<code>--validate/--no-validate</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_VALIDATE_DATA</code></p> <p>Configuration option: <code>harbor.validate_data</code></p> <p>Validate Harbor API response data. Forces JSON output format if disabled.</p>"},{"location":"usage/options/#-raw-no-raw","title":"<code>--raw/--no-raw</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_RAW_MODE</code></p> <p>Configuration option: <code>harbor.raw_mode</code></p> <p>Return raw data from Harbor API. Overrides all output formatting options.</p>"},{"location":"usage/options/#-verify-ssl-no-verify-ssl","title":"<code>--verify-ssl/--no-verify-ssl</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_VERIFY_SSL</code></p> <p>Configuration option: <code>harbor.verify_ssl</code></p> <p>Verify SSL certificates when connecting to Harbor.</p>"},{"location":"usage/options/#-retry-no-retry","title":"<code>--retry/--no-retry</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_RETRY_ENABLED</code></p> <p>Configuration option: <code>harbor.retry.enabled</code></p> <p>Retry failed HTTP requests.</p>"},{"location":"usage/options/#-retry-max-tries","title":"<code>--retry-max-tries</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_RETRY_MAX_TRIES</code></p> <p>Configuration option: <code>harbor.retry.max_tries</code></p> <p>Number of times to retry failed HTTP requests.</p>"},{"location":"usage/options/#-retry-max-time","title":"<code>--retry-max-time</code>","text":"<p>Environment variable: <code>HARBOR_CLI_HARBOR_RETRY_MAX_TIME</code></p> <p>Configuration option: <code>harbor.retry.max_time</code></p> <p>Maximum number of seconds to retry failed HTTP requests.</p>"},{"location":"usage/options/#-table-description-no-table-description","title":"<code>--table-description/--no-table-description</code>","text":"<p>Environment variable: <code>HARBOR_CLI_TABLE_DESCRIPTION</code></p> <p>Configuration option: <code>output.table.description</code></p> <p>Include field descriptions in tables.</p>"},{"location":"usage/options/#-table-max-depth","title":"<code>--table-max-depth</code>","text":"<p>Environment variable: <code>HARBOR_CLI_TABLE_MAX_DEPTH</code></p> <p>Configuration option: <code>output.table.max_depth</code></p> <p>Maximum depth to print nested objects in tables.</p>"},{"location":"usage/options/#-table-compact-no-table-compact","title":"<code>--table-compact/--no-table-compact</code>","text":"<p>Environment variable: <code>HARBOR_CLI_TABLE_COMPACT</code></p> <p>Configuration option: <code>output.table.compact</code></p> <p>Compact table output. Has no effect on other formats. </p>"},{"location":"usage/options/#-json-indent","title":"<code>--json-indent</code>","text":"<p>Environment variable: <code>HARBOR_CLI_JSON_INDENT</code></p> <p>Configuration option: <code>output.json.indent</code></p> <p>Indentation level for JSON output.</p>"},{"location":"usage/options/#-json-sort-keys-no-json-sort-keys","title":"<code>--json-sort-keys/--no-json-sort-keys</code>","text":"<p>Environment variable: <code>HARBOR_CLI_JSON_SORT_KEYS</code></p> <p>Configuration option: <code>output.json.sort_keys</code></p> <p>Sort keys in JSON output.</p>"},{"location":"usage/options/#-format-f","title":"<code>--format</code>, <code>-f</code>","text":"<p>Environment variable: <code>HARBOR_CLI_OUTPUT_FORMAT</code></p> <p>Configuration option: <code>output.format</code></p> <p>Specifies the output format to use.</p>"},{"location":"usage/options/#-paging-no-paging","title":"<code>--paging/--no-paging</code>","text":"<p>Environment variable: <code>HARBOR_CLI_PAGING</code></p> <p>Configuration option: <code>output.paging</code></p> <p>Display output in a pager (less, etc.).</p>"},{"location":"usage/options/#-pager","title":"<code>--pager</code>","text":"<p>Environment variable: <code>HARBOR_CLI_PAGER</code></p> <p>Configuration option: <code>output.pager</code></p> <p>Pager command to use. The default Rich pager will be used.</p>"},{"location":"usage/options/#-confirm-deletion-no-confirm-deletion","title":"<code>--confirm-deletion/--no-confirm-deletion</code>","text":"<p>Environment variable: <code>HARBOR_CLI_CONFIRM_DELETION</code></p> <p>Configuration option: <code>general.confirm_deletion</code></p> <p>Confirm before deleting resources.</p>"},{"location":"usage/options/#-confirm-enumeration-no-confirm-enumeration","title":"<code>--confirm-enumeration/--no-confirm-enumeration</code>","text":"<p>Environment variable: <code>HARBOR_CLI_CONFIRM_ENUMERATION</code></p> <p>Configuration option: <code>general.confirm_enumeration</code></p> <p>Confirm before enumerating all resources without a limit or query.</p>"},{"location":"usage/options/#-warnings-no-warnings","title":"<code>--warnings/--no-warnings</code>","text":"<p>Environment variable: <code>HARBOR_CLI_WARNINGS</code></p> <p>Configuration option: <code>general.warnings</code></p> <p>Show/hide warnings.</p>"},{"location":"usage/options/#_2","title":"Options","text":"<p>Configuration option: <code>cache.enabled</code></p> <p>Enable caching of API responses.</p>"},{"location":"usage/options/#_3","title":"Options","text":"<p>Configuration option: <code>cache.ttl</code></p> <p>Cache TTL in seconds.</p>"},{"location":"usage/options/#-output-o","title":"<code>--output</code>, <code>-o</code>","text":"<p>Output file, by default None, which means output to stdout. If the file already exists, it will be overwritten.</p>"},{"location":"usage/options/#-no-overwrite","title":"<code>--no-overwrite</code>","text":"<p>Do not overwrite the output file if it already exists.</p>"},{"location":"usage/options/#-verbose-v","title":"<code>--verbose</code>, <code>-v</code>","text":"<p>Enable verbose output.</p>"},{"location":"usage/options/#-with-stdout","title":"<code>--with-stdout</code>","text":"<p>Output to stdout in addition to the specified output file, if any. Has no effect if no output file is specified.</p>"},{"location":"usage/options/#-version","title":"<code>--version</code>","text":"<p>Show application version and exit.</p>"},{"location":"usage/repl/","title":"REPL","text":"<p>Harbor-CLI has a built-in REPL (Read-Eval-Print-Loop) that can be used to interactively run commands. This is useful for testing out commands and exploring the API.</p> <p>The REPL is automatically generated by click-repl.</p>"},{"location":"usage/repl/#starting-the-repl","title":"Starting the REPL","text":"<p>Start the REPL:</p> <pre><code>harbor repl\n</code></pre> <p>The REPL provides auto-complete for commands and options as you type. Completion can be triggered with the <code>TAB</code> key.</p>"},{"location":"usage/repl/#repl-commands","title":"REPL Commands","text":"<p>REPL-specific help can be displayed with the <code>:help</code> command:</p> <pre><code>&gt; :help\nREPL help:\n\n  External Commands:\n    prefix external commands with \"!\"\n\n  Internal Commands:\n    prefix internal commands with \":\"\n    :exit, :q, :quit  exits the repl\n    :?, :h, :help     displays general help information\n</code></pre> <p>Quit the REPL with the <code>:q</code>/<code>:quit</code> command or press <code>CTRL+D</code>:</p> <pre><code>&gt; :quit\n</code></pre>"},{"location":"usage/repl/#application-help","title":"Application help","text":"<p>The regular application help text can be displayed with <code>--help</code>:</p> <pre><code>&gt; --help\n\n Usage: harbor  [OPTIONS] COMMAND [ARGS]...\n\n# ...\n</code></pre>"},{"location":"usage/repl/#options","title":"Options","text":"<p>To use top-level options, specify them before the subcommand as usual:</p> <pre><code>&gt; --format json system volumes\n{\n  \"storage\": [\n    {\n      \"total\": 912470835200,\n      \"free\": 99034193920\n    }\n  ]\n}\n</code></pre> <p>Subcommand options are specified after the subcommand as with the regular CLI:</p> <pre><code>&gt; system volumes --help\n\n Usage: harbor  system volumes [OPTIONS]\n\n Get information about the system volumes.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/scripts/","title":"Scripting","text":"<p>By utilizing the JSON output mode, Harbor CLI can act as a complete replacement for manual API calls using curl in scripts.</p> <p>A script that looks like this:</p> <pre><code>status=$(curl -u \"admin:password\" -H \"Content-Type: application/json\" -ki https://demo.goharbor.io/api/v2.0/health | jq .\"status\")\n\nif [ \"$status\" == \"\\\"healthy\\\"\" ]; then\n    # ...\n</code></pre> <p>Can be replaced with this:</p> <pre><code>status=$(harbor --format json system health | jq .\"status\")\n\nif [ \"$status\" == \"\\\"healthy\\\"\" ]; then\n    # ...\n</code></pre> <p>Note</p> <p>It's recommended to set the output format in the configuration file to <code>\"json\"</code> in order to avoid having to specify <code>--format json</code> for every command when using the CLI in scripts.</p>"},{"location":"usage/scripts/#deleting-resources","title":"Deleting resources","text":"<p>It is recommended to disable the deletion confirmation prompt by using the <code>--force</code> option:</p> <pre><code>harbor project delete test-project --force\n</code></pre> <p>Or by setting the <code>general.confirm_deletion</code> option to <code>false</code> in the configuration file:</p> <pre><code>[general]\nconfirm_deletion = false\n</code></pre>"},{"location":"usage/scripts/#listing-resources","title":"Listing resources","text":"<p>When listing certain resources without any constraints (<code>--limit</code> and/or <code>--query</code>) there is normally a confirmation prompt to confirm that you want to enumerate all resources. This should be disabled in scripts with the <code>--no-confirm-enumeration</code> option:</p> <pre><code>harbor auditlog list --no-confirm-enumeration\n</code></pre> <p>Or by setting the <code>general.confirm_enumeration</code> option to <code>false</code> in the configuration file:</p> <pre><code>[general]\nconfirm_enumeration = false\n</code></pre>"},{"location":"usage/terminology/","title":"Terminology","text":"<p>Commands invocation is structured as follows:</p> <pre><code>harbor [GLOBAL OPTIONS] COMMAND [SUBCOMMAND, SUBSUBCOMMAND, ...] [ARGS] [COMMAND OPTIONS]\n</code></pre>"},{"location":"usage/terminology/#global-options","title":"<code>GLOBAL OPTIONS</code>","text":"<p>Global options are options that apply to all commands. They must be specified before the command. Examples of this are <code>--config</code>, <code>--url</code>, <code>--username</code>, etc.</p> <p>See the output of <code>harbor --help</code> for a full list of global options.</p>"},{"location":"usage/terminology/#command","title":"<code>COMMAND</code>","text":"<p>Command is a resource such as <code>project</code>, <code>repository</code>, <code>artifact</code>, etc.</p>"},{"location":"usage/terminology/#subcommand-subsubcommand-etc","title":"<code>SUBCOMMAND</code>, <code>SUBSUBCOMMAND</code>, etc.","text":"<p>Certain commands have subcommands, and these subcommands can have their own set of subcommands, etc.</p> <p>An example of this is the commmand:</p> <pre><code>project metadata field set\n</code></pre> <p>Which can be decomposed into the following:</p> <ul> <li><code>COMMAND</code>: <code>project</code></li> <li><code>SUBCOMMAND</code>: <code>metadata</code></li> <li><code>SUBSUBCOMMAND</code>: <code>field</code></li> <li><code>SUBSUBSUBCOMMAND</code>: <code>set</code></li> </ul> <p>The final subcommand is the action to perform on the resource, such as <code>create</code>, <code>delete</code>, <code>list</code>, etc.</p>"},{"location":"usage/terminology/#actions-terminology","title":"Actions terminology","text":"<ul> <li><code>get</code> - Get a resource</li> <li><code>create</code> - Create a resource</li> <li> <p><code>delete</code> - Delete a resource</p> <ul> <li>Prompts for confirmation unless <code>--force</code> is specified. This behavior can be disabled in the configuration file under <code>general.confirm_deletion</code>.</li> </ul> </li> <li> <p><code>list</code> - List resources.</p> <ul> <li>Most of these commands expose the options <code>--query</code>, <code>--sort</code>, <code>--limit</code>, <code>--page</code> and <code>--page-size</code> to filter and limit the output.</li> <li>Each command may have its own set of options for more granular filtering of the resources such as <code>--tag</code>, <code>--architecture</code>. Some of this behavior can be achieved with <code>--query</code> as well.</li> <li>See harborapi <code>--query</code> docs for more information about the different parameters that can be used to filter the resources using <code>--query</code>.</li> <li>See harborapi <code>--sort</code> docs for information on how to use the <code>--sort</code> parameter.</li> </ul> </li> <li><code>update</code> - Update a resource.<ul> <li>The behavior of these commands mimic a PATCH request. A <code>update</code> command performs a partial update to an existing resource replacing a subset of the resource's fields with new values.</li> <li>Parameter names attempt to be 1:1 with the resource's field names. I.e. `project update --public trueAny divergences are specified in the relevant command's help text.</li> <li>The CLI fetches the existing resource first then replaces the given fields with the new values.<sup>1</sup></li> </ul> </li> <li><code>set</code> - Set the value of a specific field on a resource.<ul> <li>Used for setting single values, such as setting default project scanner.</li> </ul> </li> <li><code>add</code> - Add a value or reference to a resource to a resource<ul> <li>Used when multiple values can be added to a resource field, such as adding labels to artifacts.</li> </ul> </li> <li><code>start</code> - Start a job (scan, replication, etc.)</li> <li><code>stop</code> - Stop a job</li> <li><code>info</code> - Get information about an immutable resource<ul> <li>Used for getting information about a resource that cannot be updated by users, such as getting information about the system status.</li> </ul> </li> </ul>"},{"location":"usage/terminology/#args","title":"<code>ARGS</code>","text":"<p>The args for a command is usually one or more names or IDs identifying a resource. For example:</p> <pre><code>harbor project get my-project\n</code></pre> <p>The command specifies <code>my-project</code> as the argument for the <code>get</code> action on the <code>project</code> resource.</p> <p>Certain commands accept either a name or ID as arguments. Prefix IDs with <code>id:</code> to specify that the argument is an ID. Check the relevant command's documentation for more information.</p>"},{"location":"usage/terminology/#command-options","title":"<code>COMMAND OPTIONS</code>","text":"<p>Command options are options that apply to a command.</p> <p><pre><code>harbor project create my-project --public true\n</code></pre> The <code>project create</code> command has a <code>--public</code> option that can be used to create a public project.</p> <ol> <li> <p>The endpoints themselves are <code>PUT</code> endpoints in the Harbor API but they use <code>PATCH</code> semantics (i.e. partial updates). Until this is codified as intended behavior by Harbor, we will continue to fetch the existing resource first and then replace the given fields with the new values before sending back the updated resource to the server.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage/tui/","title":"TUI","text":"<p>The application provides the command <code>tui</code> which can be used to launch an interactive TUI (Terminal User Interface), in which you can navigate through the different commands and launch them interactively. This is useful for users who prefer a more visual interface than the CLI and users who are looking to learn more about the available commands.</p> <p>The TUI is powered by Trogon by Textualize, and is automatically generated from the CLI commands. It can be navigated with both mouse and keyboard.</p>"},{"location":"usage/tui/#basic-usage","title":"Basic Usage","text":"<p>To start the TUI, run:</p> <pre><code>harbor tui\n</code></pre> <p>This opens a TUI session that looks like this:</p> <p></p> <p>By selecting a command, you can see its description and usage information.</p> <p></p> <p>After adding the required argument and toggling the options you want, pressing <code>CTRL+R</code> will close the TUI and run the command in your terminal.</p> <p></p>"},{"location":"usage/tui/#demo","title":"Demo","text":""}]}